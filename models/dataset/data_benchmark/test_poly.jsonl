{"code": "for (j = 0; j < _PB_M; j++)\n{\n  mean[j] = 0.0;\n  for (i = 0; i < _PB_N; i++)\n    mean[j] += data[i][j];\n\n  mean[j] /= float_n;\n}\n", "pragma": "omp for private (i)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/correlation/correlation/0"}
{"code": "for (j = 0; j < _PB_M; j++)\n{\n  stddev[j] = 0.0;\n  for (i = 0; i < _PB_N; i++)\n    stddev[j] += (data[i][j] - mean[j]) * (data[i][j] - mean[j]);\n\n  stddev[j] /= float_n;\n  stddev[j] = sqrt(stddev[j]);\n  stddev[j] = (stddev[j] <= eps) ? (1.0) : (stddev[j]);\n}\n", "pragma": "omp for private (i)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/correlation/correlation/1"}
{"code": "for (i = 0; i < _PB_N; i++)\n  for (j = 0; j < _PB_M; j++)\n{\n  data[i][j] -= mean[j];\n  data[i][j] /= sqrt(float_n) * stddev[j];\n}\n\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/correlation/correlation/2"}
{"code": "for (j1 = 0; j1 < (_PB_M - 1); j1++)\n{\n  symmat[j1][j1] = 1.0;\n  for (j2 = j1 + 1; j2 < _PB_M; j2++)\n  {\n    symmat[j1][j2] = 0.0;\n    for (i = 0; i < _PB_N; i++)\n      symmat[j1][j2] += data[i][j1] * data[i][j2];\n\n    symmat[j2][j1] = symmat[j1][j2];\n  }\n\n}\n", "pragma": "omp for private (j2, i)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/correlation/correlation/3"}
{"code": "for (i = 0; i < m; i++)\n  for (j = 0; j < n; j++)\n  data[i][j] = (((DATA_TYPE) i) * j) / M;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/correlation/correlation/4"}
{"code": "for (i = 0; i < m; i++)\n  for (j = 0; j < m; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, symmat[i][j]);\n  if ((((i * m) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/correlation/correlation/5"}
{"code": "for (i = 0; i < _PB_N; i++)\n  for (j = 0; j < _PB_M; j++)\n  data[i][j] -= mean[j];\n\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/covariance/covariance/0"}
{"code": "for (j1 = 0; j1 < _PB_M; j1++)\n  for (j2 = j1; j2 < _PB_M; j2++)\n{\n  symmat[j1][j2] = 0.0;\n  for (i = 0; i < _PB_N; i++)\n    symmat[j1][j2] += data[i][j1] * data[i][j2];\n\n  symmat[j2][j1] = symmat[j1][j2];\n}\n\n", "pragma": "omp for private (j2, i)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/covariance/covariance/1"}
{"code": "for (i = 0; i < M; i++)\n  for (j = 0; j < N; j++)\n  data[i][j] = (((DATA_TYPE) i) * j) / M;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/datamining/covariance/covariance/2"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NJ; j++)\n{\n  tmp[i][j] = 0;\n  for (k = 0; k < _PB_NK; ++k)\n    tmp[i][j] += (alpha * A[i][k]) * B[k][j];\n\n}\n\n", "pragma": "omp for private (j, k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/2mm/2mm/0"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NL; j++)\n{\n  D[i][j] *= beta;\n  for (k = 0; k < _PB_NJ; ++k)\n    D[i][j] += tmp[i][k] * C[k][j];\n\n}\n\n", "pragma": "omp for private (j, k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/2mm/2mm/1"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nk; j++)\n  A[i][j] = (((DATA_TYPE) i) * j) / ni;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/2mm/2mm/2"}
{"code": "for (i = 0; i < nk; i++)\n  for (j = 0; j < nj; j++)\n  B[i][j] = (((DATA_TYPE) i) * (j + 1)) / nj;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/2mm/2mm/3"}
{"code": "for (i = 0; i < nl; i++)\n  for (j = 0; j < nj; j++)\n  C[i][j] = (((DATA_TYPE) i) * (j + 3)) / nl;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/2mm/2mm/4"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nl; j++)\n  D[i][j] = (((DATA_TYPE) i) * (j + 2)) / nk;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/2mm/2mm/5"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nl; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, D[i][j]);\n  if ((((i * ni) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/2mm/2mm/6"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NJ; j++)\n{\n  E[i][j] = 0;\n  for (k = 0; k < _PB_NK; ++k)\n    E[i][j] += A[i][k] * B[k][j];\n\n}\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/3mm/3mm/0"}
{"code": "for (i = 0; i < _PB_NJ; i++)\n  for (j = 0; j < _PB_NL; j++)\n{\n  F[i][j] = 0;\n  for (k = 0; k < _PB_NM; ++k)\n    F[i][j] += C[i][k] * D[k][j];\n\n}\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/3mm/3mm/1"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NL; j++)\n{\n  G[i][j] = 0;\n  for (k = 0; k < _PB_NJ; ++k)\n    G[i][j] += E[i][k] * F[k][j];\n\n}\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/3mm/3mm/2"}
{"code": "for (i = 0; i < nj; i++)\n  for (j = 0; j < nm; j++)\n  C[i][j] = (((DATA_TYPE) i) * (j + 3)) / nl;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/3mm/3mm/3"}
{"code": "for (i = 0; i < nm; i++)\n  for (j = 0; j < nl; j++)\n  D[i][j] = (((DATA_TYPE) i) * (j + 2)) / nk;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/3mm/3mm/4"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nl; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, G[i][j]);\n  if ((((i * ni) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/3mm/3mm/5"}
{"code": "for (i = 0; i < _PB_NY; i++)\n  y[i] = 0;\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/atax/atax/0"}
{"code": "for (i = 0; i < _PB_NX; i++)\n{\n  tmp[i] = 0;\n  for (j = 0; j < _PB_NY; j++)\n    tmp[i] = tmp[i] + (A[i][j] * x[j]);\n\n  for (j = 0; j < _PB_NY; j++)\n    y[j] = y[j] + (A[i][j] * tmp[i]);\n\n}\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/atax/atax/1"}
{"code": "for (i = 0; i < ny; i++)\n  x[i] = i * M_PI;\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/atax/atax/2"}
{"code": "for (i = 0; i < nx; i++)\n  for (j = 0; j < ny; j++)\n  A[i][j] = (((DATA_TYPE) i) * (j + 1)) / nx;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/atax/atax/3"}
{"code": "for (i = 0; i < nx; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, y[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/atax/atax/4"}
{"code": "for (i = 0; i < _PB_NY; i++)\n  s[i] = 0;\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/bicg/bicg/0"}
{"code": "for (i = 0; i < _PB_NX; i++)\n{\n  q[i] = 0;\n  for (j = 0; j < _PB_NY; j++)\n  {\n    s[j] = s[j] + (r[i] * A[i][j]);\n    q[i] = q[i] + (A[i][j] * p[j]);\n  }\n\n}\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/bicg/bicg/1"}
{"code": "for (i = 0; i < ny; i++)\n  p[i] = i * M_PI;\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/bicg/bicg/2"}
{"code": "for (i = 0; i < nx; i++)\n{\n  r[i] = i * M_PI;\n  for (j = 0; j < ny; j++)\n    A[i][j] = (((DATA_TYPE) i) * (j + 1)) / nx;\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/bicg/bicg/3"}
{"code": "for (i = 0; i < ny; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, s[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/bicg/bicg/4"}
{"code": "for (i = 0; i < nx; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, q[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/bicg/bicg/5"}
{"code": "for (i = 0; i < _PB_N; ++i)\n{\n  x = A[i][i];\n  for (j = 0; j <= (i - 1); ++j)\n    x = x - (A[i][j] * A[i][j]);\n\n  p[i] = 1.0 / sqrt(x);\n  for (j = i + 1; j < _PB_N; ++j)\n  {\n    x = A[i][j];\n    for (k = 0; k <= (i - 1); ++k)\n      x = x - (A[j][k] * A[i][k]);\n\n    A[j][i] = x * p[i];\n  }\n\n}\n", "pragma": "omp for private (j,k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/cholesky/cholesky/0"}
{"code": "for (i = 0; i < n; i++)\n{\n  p[i] = 1.0 / n;\n  for (j = 0; j < n; j++)\n    A[i][j] = 1.0 / n;\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/cholesky/cholesky/1"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, A[i][j]);\n  if ((((i * N) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/cholesky/cholesky/2"}
{"code": "for (r = 0; r < _PB_NR; r++)\n  for (q = 0; q < _PB_NQ; q++)\n{\n  for (p = 0; p < _PB_NP; p++)\n  {\n    sum[r][q][p] = 0;\n    for (s = 0; s < _PB_NP; s++)\n      sum[r][q][p] = sum[r][q][p] + (A[r][q][s] * C4[s][p]);\n\n  }\n\n  for (p = 0; p < _PB_NR; p++)\n    A[r][q][p] = sum[r][q][p];\n\n}\n\n", "pragma": "omp for private (q, p, s)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/doitgen/doitgen/0"}
{"code": "for (i = 0; i < nr; i++)\n  for (j = 0; j < nq; j++)\n  for (k = 0; k < np; k++)\n  A[i][j][k] = ((((DATA_TYPE) i) * j) + k) / np;\n\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/doitgen/doitgen/1"}
{"code": "for (i = 0; i < np; i++)\n  for (j = 0; j < np; j++)\n  C4[i][j] = (((DATA_TYPE) i) * j) / np;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/doitgen/doitgen/2"}
{"code": "for (i = 0; i < nr; i++)\n  for (j = 0; j < nq; j++)\n  for (k = 0; k < np; k++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, A[i][j][k]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/doitgen/doitgen/3"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NJ; j++)\n{\n  C[i][j] *= beta;\n  for (k = 0; k < _PB_NK; ++k)\n    C[i][j] += (alpha * A[i][k]) * B[k][j];\n\n}\n\n", "pragma": "omp for private (j, k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemm/gemm/0"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n  C[i][j] = (((DATA_TYPE) i) * j) / ni;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemm/gemm/1"}
{"code": "for (i = 0; i < nk; i++)\n  for (j = 0; j < nj; j++)\n  B[i][j] = (((DATA_TYPE) i) * j) / ni;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemm/gemm/2"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, C[i][j]);\n  if ((((i * ni) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemm/gemm/3"}
{"code": "for (i = 0; i < _PB_N; i++)\n  for (j = 0; j < _PB_N; j++)\n  A[i][j] = (A[i][j] + (u1[i] * v1[j])) + (u2[i] * v2[j]);\n\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemver/gemver/0"}
{"code": "for (i = 0; i < _PB_N; i++)\n  for (j = 0; j < _PB_N; j++)\n  x[i] = x[i] + ((beta * A[j][i]) * y[j]);\n\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemver/gemver/1"}
{"code": "for (i = 0; i < _PB_N; i++)\n  x[i] = x[i] + z[i];\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemver/gemver/2"}
{"code": "for (i = 0; i < _PB_N; i++)\n  for (j = 0; j < _PB_N; j++)\n  w[i] = w[i] + ((alpha * A[i][j]) * x[j]);\n\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemver/gemver/3"}
{"code": "for (i = 0; i < n; i++)\n{\n  u1[i] = i;\n  u2[i] = ((i + 1) / n) / 2.0;\n  v1[i] = ((i + 1) / n) / 4.0;\n  v2[i] = ((i + 1) / n) / 6.0;\n  y[i] = ((i + 1) / n) / 8.0;\n  z[i] = ((i + 1) / n) / 9.0;\n  x[i] = 0.0;\n  w[i] = 0.0;\n  for (j = 0; j < n; j++)\n    A[i][j] = (((DATA_TYPE) i) * j) / n;\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemver/gemver/4"}
{"code": "for (i = 0; i < n; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, w[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gemver/gemver/5"}
{"code": "for (i = 0; i < _PB_N; i++)\n{\n  tmp[i] = 0;\n  y[i] = 0;\n  for (j = 0; j < _PB_N; j++)\n  {\n    tmp[i] = (A[i][j] * x[j]) + tmp[i];\n    y[i] = (B[i][j] * x[j]) + y[i];\n  }\n\n  y[i] = (alpha * tmp[i]) + (beta * y[i]);\n}\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gesummv/gesummv/0"}
{"code": "for (i = 0; i < n; i++)\n{\n  x[i] = ((DATA_TYPE) i) / n;\n  for (j = 0; j < n; j++)\n  {\n    A[i][j] = (((DATA_TYPE) i) * j) / n;\n    B[i][j] = (((DATA_TYPE) i) * j) / n;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gesummv/gesummv/1"}
{"code": "for (i = 0; i < n; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, y[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/gesummv/gesummv/2"}
{"code": "for (i = 0; i < _PB_N; i++)\n  for (j = 0; j < _PB_N; j++)\n  x1[i] = x1[i] + (A[i][j] * y_1[j]);\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/mvt/mvt/0"}
{"code": "for (i = 0; i < _PB_N; i++)\n  for (j = 0; j < _PB_N; j++)\n  x2[i] = x2[i] + (A[j][i] * y_2[j]);\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/mvt/mvt/1"}
{"code": "for (i = 0; i < n; i++)\n{\n  x1[i] = ((DATA_TYPE) i) / n;\n  x2[i] = (((DATA_TYPE) i) + 1) / n;\n  y_1[i] = (((DATA_TYPE) i) + 3) / n;\n  y_2[i] = (((DATA_TYPE) i) + 4) / n;\n  for (j = 0; j < n; j++)\n    A[i][j] = (((DATA_TYPE) i) * j) / N;\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/mvt/mvt/2"}
{"code": "for (i = 0; i < n; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, x1[i]);\n  fprintf(stderr, DATA_PRINTF_MODIFIER, x2[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/mvt/mvt/3"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NJ; j++)\n{\n  acc = 0;\n  for (k = 0; k < (j - 1); k++)\n  {\n    C[k][j] += (alpha * A[k][i]) * B[i][j];\n    acc += B[k][j] * A[k][i];\n  }\n\n  C[i][j] = ((beta * C[i][j]) + ((alpha * A[i][i]) * B[i][j])) + (alpha * acc);\n}\n\n", "pragma": "omp for private(j,acc,k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/symm/symm/0"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n{\n  C[i][j] = (((DATA_TYPE) i) * j) / ni;\n  B[i][j] = (((DATA_TYPE) i) * j) / ni;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/symm/symm/1"}
{"code": "for (i = 0; i < nj; i++)\n  for (j = 0; j < nj; j++)\n  A[i][j] = (((DATA_TYPE) i) * j) / ni;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/symm/symm/2"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NI; j++)\n  C[i][j] *= beta;\n\n", "pragma": "omp for private (j) schedule(static)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/syr2k/syr2k/0"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NI; j++)\n  for (k = 0; k < _PB_NJ; k++)\n{\n  C[i][j] += (alpha * A[i][k]) * B[j][k];\n  C[i][j] += (alpha * B[i][k]) * A[j][k];\n}\n\n\n", "pragma": "omp for private (j, k) schedule(static)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/syr2k/syr2k/1"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n{\n  A[i][j] = (((DATA_TYPE) i) * j) / ni;\n  B[i][j] = (((DATA_TYPE) i) * j) / ni;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/syr2k/syr2k/2"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < ni; j++)\n  C[i][j] = (((DATA_TYPE) i) * j) / ni;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/syr2k/syr2k/3"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < ni; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, C[i][j]);\n  if ((((i * ni) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/syr2k/syr2k/4"}
{"code": "for (i = 0; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NI; j++)\n  for (k = 0; k < _PB_NJ; k++)\n  C[i][j] += (alpha * A[i][k]) * A[j][k];\n\n\n", "pragma": "omp for private(j,k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/syrk/syrk/0"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n  A[i][j] = (((DATA_TYPE) i) * j) / ni;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/syrk/syrk/1"}
{"code": "for (j = 0; j <= (i - 1); j++)\n  x[i] = x[i] - (A[i][j] * x[j]);\n", "pragma": "omp for schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/trisolv/trisolv/0"}
{"code": "for (i = 0; i < n; i++)\n{\n  c[i] = (x[i] = ((DATA_TYPE) i) / n);\n  for (j = 0; j < n; j++)\n    A[i][j] = (((DATA_TYPE) i) * j) / n;\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/trisolv/trisolv/1"}
{"code": "for (i = 0; i < n; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, x[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/trisolv/trisolv/2"}
{"code": "for (i = 0; i < _PB_N; i++)\n{\n  x[i] = c[i];\n  #pragma omp for schedule(static)\n  for (j = 0; j <= (i - 1); j++)\n    x[i] = x[i] - (A[i][j] * x[j]);\n\n  x[i] = x[i] / A[i][i];\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/trisolv/trisolv/3"}
{"code": "for (i = 1; i < _PB_NI; i++)\n  for (j = 0; j < _PB_NI; j++)\n  for (k = 0; k < i; k++)\n  B[i][j] += (alpha * A[i][k]) * B[j][k];\n\n\n", "pragma": "omp for private (j, k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/trmm/trmm/0"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < ni; j++)\n{\n  A[i][j] = (((DATA_TYPE) i) * j) / ni;\n  B[i][j] = (((DATA_TYPE) i) * j) / ni;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/trmm/trmm/1"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < ni; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, B[i][j]);\n  if ((((i * ni) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/kernels/trmm/trmm/2"}
{"code": "for (k = 1; k < _PB_N; k++)\n{\n  beta[k] = beta[k - 1] - ((alpha[k - 1] * alpha[k - 1]) * beta[k - 1]);\n  sum[0][k] = r[k];\n  for (i = 0; i <= (k - 1); i++)\n    sum[i + 1][k] = sum[i][k] + (r[(k - i) - 1] * y[i][k - 1]);\n\n  alpha[k] = (-sum[k][k]) * beta[k];\n  for (i = 0; i <= (k - 1); i++)\n    y[i][k] = y[i][k - 1] + (alpha[k] * y[(k - i) - 1][k - 1]);\n\n  y[k][k] = alpha[k];\n}\n", "pragma": "omp for private (i)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/durbin/durbin/0"}
{"code": "for (i = 0; i < _PB_N; i++)\n  out[i] = y[i][_PB_N - 1];\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/durbin/durbin/1"}
{"code": "for (i = 0; i < n; i++)\n{\n  alpha[i] = i;\n  beta[i] = ((i + 1) / n) / 2.0;\n  r[i] = ((i + 1) / n) / 4.0;\n  for (j = 0; j < n; j++)\n  {\n    y[i][j] = (((DATA_TYPE) i) * j) / n;\n    sum[i][j] = (((DATA_TYPE) i) * j) / n;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/durbin/durbin/2"}
{"code": "for (i = 0; i < n; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, out[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/durbin/durbin/3"}
{"code": "for (i = 0; i <= (_PB_LENGTH - 1); i++)\n  for (j = 0; j <= (_PB_LENGTH - 1); j++)\n  c[i][j] = 0;\n\n", "pragma": "omp for private (j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/dynprog/dynprog/0"}
{"code": "for (i = 0; i <= (_PB_LENGTH - 2); i++)\n{\n  for (j = i + 1; j <= (_PB_LENGTH - 1); j++)\n  {\n    sum_c[i][j][i] = 0;\n    for (k = i + 1; k <= (j - 1); k++)\n      sum_c[i][j][k] = (sum_c[i][j][k - 1] + c[i][k]) + c[k][j];\n\n    c[i][j] = sum_c[i][j][j - 1] + W[i][j];\n  }\n\n}\n", "pragma": "omp for private (j, k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/dynprog/dynprog/1"}
{"code": "for (i = 0; i < length; i++)\n  for (j = 0; j < length; j++)\n{\n  c[i][j] = (i * j) % 2;\n  W[i][j] = (((DATA_TYPE) i) - j) / length;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/dynprog/dynprog/2"}
{"code": "for (iter = 0; iter < _PB_TSTEPS; iter++)\n{\n  #pragma omp for private (j)\n  for (i = 0; i <= (_PB_LENGTH - 1); i++)\n    for (j = 0; j <= (_PB_LENGTH - 1); j++)\n    c[i][j] = 0;\n\n\n  #pragma omp for private (j, k)\n  for (i = 0; i <= (_PB_LENGTH - 2); i++)\n  {\n    for (j = i + 1; j <= (_PB_LENGTH - 1); j++)\n    {\n      sum_c[i][j][i] = 0;\n      for (k = i + 1; k <= (j - 1); k++)\n        sum_c[i][j][k] = (sum_c[i][j][k - 1] + c[i][k]) + c[k][j];\n\n      c[i][j] = sum_c[i][j][j - 1] + W[i][j];\n    }\n\n  }\n\n  out_l += c[0][_PB_LENGTH - 1];\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/dynprog/dynprog/3"}
{"code": "for (k = 0; k < _PB_NJ; k++)\n{\n  nrm = 0;\n  for (i = 0; i < _PB_NI; i++)\n    nrm += A[i][k] * A[i][k];\n\n  R[k][k] = sqrt(nrm);\n  for (i = 0; i < _PB_NI; i++)\n    Q[i][k] = A[i][k] / R[k][k];\n\n  for (j = k + 1; j < _PB_NJ; j++)\n  {\n    R[k][j] = 0;\n    for (i = 0; i < _PB_NI; i++)\n      R[k][j] += Q[i][k] * A[i][j];\n\n    for (i = 0; i < _PB_NI; i++)\n      A[i][j] = A[i][j] - (Q[i][k] * R[k][j]);\n\n  }\n\n}\n", "pragma": "omp parallel for private (i, j)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/gramschmidt/gramschmidt/0"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n{\n  A[i][j] = (((DATA_TYPE) i) * j) / ni;\n  Q[i][j] = (((DATA_TYPE) i) * (j + 1)) / nj;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/gramschmidt/gramschmidt/1"}
{"code": "for (i = 0; i < nj; i++)\n  for (j = 0; j < nj; j++)\n  R[i][j] = (((DATA_TYPE) i) * (j + 2)) / nj;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/gramschmidt/gramschmidt/2"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, A[i][j]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/gramschmidt/gramschmidt/3"}
{"code": "for (i = 0; i < nj; i++)\n  for (j = 0; j < nj; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, R[i][j]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/gramschmidt/gramschmidt/4"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, Q[i][j]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/gramschmidt/gramschmidt/5"}
{"code": "for (k = 0; k < _PB_N; k++)\n{\n  for (j = k + 1; j < _PB_N; j++)\n    A[k][j] = A[k][j] / A[k][k];\n\n  for (i = k + 1; i < _PB_N; i++)\n    for (j = k + 1; j < _PB_N; j++)\n    A[i][j] = A[i][j] - (A[i][k] * A[k][j]);\n\n\n}\n", "pragma": "omp for private (j, i)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/lu/lu/0"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n  A[i][j] = (((DATA_TYPE) (i + 1)) * (j + 1)) / n;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/lu/lu/1"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, A[i][j]);\n  if ((((i * n) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/lu/lu/2"}
{"code": "for (i = 0; i < _PB_N; i++)\n{\n  for (j = i + 1; j <= _PB_N; j++)\n  {\n    w = A[j][i];\n    for (k = 0; k < i; k++)\n      w = w - (A[j][k] * A[k][i]);\n\n    A[j][i] = w / A[i][i];\n  }\n\n  #pragma omp barrier\n  for (j = i + 1; j <= _PB_N; j++)\n  {\n    w = A[i + 1][j];\n    for (k = 0; k <= i; k++)\n      w = w - (A[i + 1][k] * A[k][j]);\n\n    A[i + 1][j] = w;\n  }\n\n}\n", "pragma": "omp for private (j, k, w)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/ludcmp/ludcmp/0"}
{"code": "for (i = 1; i <= _PB_N; i++)\n{\n  w = b[i];\n  for (j = 0; j < i; j++)\n    w = w - (A[i][j] * y[j]);\n\n  y[i] = w;\n}\n", "pragma": "omp for private (j, w)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/ludcmp/ludcmp/1"}
{"code": "for (i = 0; i <= (_PB_N - 1); i++)\n{\n  w = y[(_PB_N - 1) - i];\n  for (j = _PB_N - i; j <= _PB_N; j++)\n    w = w - (A[(_PB_N - 1) - i][j] * x[j]);\n\n  x[(_PB_N - 1) - i] = w / A[(_PB_N - 1) - i][(_PB_N - 1) - i];\n}\n", "pragma": "omp for private (j, w)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/ludcmp/ludcmp/2"}
{"code": "for (i = 0; i <= n; i++)\n{\n  x[i] = i + 1;\n  y[i] = (((i + 1) / n) / 2.0) + 1;\n  b[i] = (((i + 1) / n) / 2.0) + 42;\n  for (j = 0; j <= n; j++)\n  {\n    A[i][j] = (((DATA_TYPE) (i + 1)) * (j + 1)) / n;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/ludcmp/ludcmp/3"}
{"code": "for (i = 0; i <= n; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, x[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/linear-algebra/solvers/ludcmp/ludcmp/4"}
{"code": "for (j = 0; j <= (_PB_MAXGRID - 1); j++)\n  for (i = j; i <= (_PB_MAXGRID - 1); i++)\n  for (cnt = 0; cnt <= (_PB_LENGTH - 1); cnt++)\n  diff[j][i][cnt] = sum_tang[j][i];\n\n\n", "pragma": "omp for private (i, cnt) collapse(2) schedule(static)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/medley/reg_detect/reg_detect/0"}
{"code": "for (j = 0; j <= (_PB_MAXGRID - 1); j++)\n{\n  for (i = j; i <= (_PB_MAXGRID - 1); i++)\n  {\n    sum_diff[j][i][0] = diff[j][i][0];\n    for (cnt = 1; cnt <= (_PB_LENGTH - 1); cnt++)\n      sum_diff[j][i][cnt] = sum_diff[j][i][cnt - 1] + diff[j][i][cnt];\n\n    mean[j][i] = sum_diff[j][i][_PB_LENGTH - 1];\n  }\n\n}\n", "pragma": "omp for private (i, cnt) collapse(2) schedule(static)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/medley/reg_detect/reg_detect/1"}
{"code": "for (i = 0; i <= (_PB_MAXGRID - 1); i++)\n  path[0][i] = mean[0][i];\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/medley/reg_detect/reg_detect/2"}
{"code": "for (j = 1; j <= (_PB_MAXGRID - 1); j++)\n  for (i = j; i <= (_PB_MAXGRID - 1); i++)\n  path[j][i] = path[j - 1][i - 1] + mean[j][i];\n\n", "pragma": "omp for private (i) collapse(2) schedule(static)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/medley/reg_detect/reg_detect/3"}
{"code": "for (i = 0; i < maxgrid; i++)\n  for (j = 0; j < maxgrid; j++)\n{\n  sum_tang[i][j] = (DATA_TYPE) ((i + 1) * (j + 1));\n  mean[i][j] = (((DATA_TYPE) i) - j) / maxgrid;\n  path[i][j] = (((DATA_TYPE) i) * (j - 1)) / maxgrid;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/medley/reg_detect/reg_detect/4"}
{"code": "for (i = 0; i < maxgrid; i++)\n  for (j = 0; j < maxgrid; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, path[i][j]);\n  if ((((i * maxgrid) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/medley/reg_detect/reg_detect/5"}
{"code": "for (t = 0; t < _PB_NITER; t++)\n{\n  #pragma omp for private (i, cnt) collapse(2) schedule(static)\n  for (j = 0; j <= (_PB_MAXGRID - 1); j++)\n    for (i = j; i <= (_PB_MAXGRID - 1); i++)\n    for (cnt = 0; cnt <= (_PB_LENGTH - 1); cnt++)\n    diff[j][i][cnt] = sum_tang[j][i];\n\n\n\n  #pragma omp for private (i, cnt) collapse(2) schedule(static)\n  for (j = 0; j <= (_PB_MAXGRID - 1); j++)\n  {\n    for (i = j; i <= (_PB_MAXGRID - 1); i++)\n    {\n      sum_diff[j][i][0] = diff[j][i][0];\n      for (cnt = 1; cnt <= (_PB_LENGTH - 1); cnt++)\n        sum_diff[j][i][cnt] = sum_diff[j][i][cnt - 1] + diff[j][i][cnt];\n\n      mean[j][i] = sum_diff[j][i][_PB_LENGTH - 1];\n    }\n\n  }\n\n  #pragma omp for\n  for (i = 0; i <= (_PB_MAXGRID - 1); i++)\n    path[0][i] = mean[0][i];\n\n  #pragma omp for private (i) collapse(2) schedule(static)\n  for (j = 1; j <= (_PB_MAXGRID - 1); j++)\n    for (i = j; i <= (_PB_MAXGRID - 1); i++)\n    path[j][i] = path[j - 1][i - 1] + mean[j][i];\n\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/medley/reg_detect/reg_detect/6"}
{"code": "for (i1 = 0; i1 < _PB_N; i1++)\n  for (i2 = 1; i2 < _PB_N; i2++)\n{\n  X[i1][i2] = X[i1][i2] - ((X[i1][i2 - 1] * A[i1][i2]) / B[i1][i2 - 1]);\n  B[i1][i2] = B[i1][i2] - ((A[i1][i2] * A[i1][i2]) / B[i1][i2 - 1]);\n}\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/0"}
{"code": "for (i1 = 0; i1 < _PB_N; i1++)\n  X[i1][_PB_N - 1] = X[i1][_PB_N - 1] / B[i1][_PB_N - 1];\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/1"}
{"code": "for (i1 = 0; i1 < _PB_N; i1++)\n  for (i2 = 0; i2 < (_PB_N - 2); i2++)\n  X[i1][(_PB_N - i2) - 2] = (X[i1][(_PB_N - 2) - i2] - (X[i1][((_PB_N - 2) - i2) - 1] * A[i1][(_PB_N - i2) - 3])) / B[i1][(_PB_N - 3) - i2];\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/2"}
{"code": "for (i1 = 1; i1 < _PB_N; i1++)\n  for (i2 = 0; i2 < _PB_N; i2++)\n{\n  X[i1][i2] = X[i1][i2] - ((X[i1 - 1][i2] * A[i1][i2]) / B[i1 - 1][i2]);\n  B[i1][i2] = B[i1][i2] - ((A[i1][i2] * A[i1][i2]) / B[i1 - 1][i2]);\n}\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/3"}
{"code": "for (i2 = 0; i2 < _PB_N; i2++)\n  X[_PB_N - 1][i2] = X[_PB_N - 1][i2] / B[_PB_N - 1][i2];\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/4"}
{"code": "for (i1 = 0; i1 < (_PB_N - 2); i1++)\n  for (i2 = 0; i2 < _PB_N; i2++)\n  X[(_PB_N - 2) - i1][i2] = (X[(_PB_N - 2) - i1][i2] - (X[(_PB_N - i1) - 3][i2] * A[(_PB_N - 3) - i1][i2])) / B[(_PB_N - 2) - i1][i2];\n\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/5"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n{\n  X[i][j] = ((((DATA_TYPE) i) * (j + 1)) + 1) / n;\n  A[i][j] = ((((DATA_TYPE) i) * (j + 2)) + 2) / n;\n  B[i][j] = ((((DATA_TYPE) i) * (j + 3)) + 3) / n;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/6"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, X[i][j]);\n  if ((((i * N) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/7"}
{"code": "for (t = 0; t < _PB_TSTEPS; t++)\n{\n  #pragma omp for\n  for (i1 = 0; i1 < _PB_N; i1++)\n    for (i2 = 1; i2 < _PB_N; i2++)\n  {\n    X[i1][i2] = X[i1][i2] - ((X[i1][i2 - 1] * A[i1][i2]) / B[i1][i2 - 1]);\n    B[i1][i2] = B[i1][i2] - ((A[i1][i2] * A[i1][i2]) / B[i1][i2 - 1]);\n  }\n\n\n  #pragma omp for\n  for (i1 = 0; i1 < _PB_N; i1++)\n    X[i1][_PB_N - 1] = X[i1][_PB_N - 1] / B[i1][_PB_N - 1];\n\n  #pragma omp for\n  for (i1 = 0; i1 < _PB_N; i1++)\n    for (i2 = 0; i2 < (_PB_N - 2); i2++)\n    X[i1][(_PB_N - i2) - 2] = (X[i1][(_PB_N - 2) - i2] - (X[i1][((_PB_N - 2) - i2) - 1] * A[i1][(_PB_N - i2) - 3])) / B[i1][(_PB_N - 3) - i2];\n\n\n  #pragma omp for\n  for (i1 = 1; i1 < _PB_N; i1++)\n    for (i2 = 0; i2 < _PB_N; i2++)\n  {\n    X[i1][i2] = X[i1][i2] - ((X[i1 - 1][i2] * A[i1][i2]) / B[i1 - 1][i2]);\n    B[i1][i2] = B[i1][i2] - ((A[i1][i2] * A[i1][i2]) / B[i1 - 1][i2]);\n  }\n\n\n  #pragma omp for\n  for (i2 = 0; i2 < _PB_N; i2++)\n    X[_PB_N - 1][i2] = X[_PB_N - 1][i2] / B[_PB_N - 1][i2];\n\n  #pragma omp for\n  for (i1 = 0; i1 < (_PB_N - 2); i1++)\n    for (i2 = 0; i2 < _PB_N; i2++)\n    X[(_PB_N - 2) - i1][i2] = (X[(_PB_N - 2) - i1][i2] - (X[(_PB_N - i1) - 3][i2] * A[(_PB_N - 3) - i1][i2])) / B[(_PB_N - 2) - i1][i2];\n\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/adi/adi/8"}
{"code": "for (i = 1; i < (_PB_NI - 1); ++i)\n{\n  for (j = 1; j < (_PB_NJ - 1); ++j)\n  {\n    B[i][j] = ((((((((0.2 * A[i - 1][j - 1]) + (0.5 * A[i - 1][j])) + ((-0.8) * A[i - 1][j + 1])) + ((-0.3) * A[i][j - 1])) + (0.6 * A[i][j])) + ((-0.9) * A[i][j + 1])) + (0.4 * A[i + 1][j - 1])) + (0.7 * A[i + 1][j])) + (0.1 * A[i + 1][j + 1]);\n  }\n\n}\n", "pragma": "omp parallel for private(j) collapse(2) schedule(static)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/convolution-2d/convolution-2d/0"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n{\n  A[i][j] = ((DATA_TYPE) (i + j)) / nj;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/convolution-2d/convolution-2d/1"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, B[i][j]);\n  if ((((i * NJ) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/convolution-2d/convolution-2d/2"}
{"code": "for (i = 1; i < (_PB_NI - 1); ++i)\n  for (j = 1; j < (_PB_NJ - 1); ++j)\n  for (k = 1; k < (_PB_NK - 1); ++k)\n{\n  B[i][j][k] = ((((((((((((((2 * A[i - 1][j - 1][k - 1]) + (4 * A[i + 1][j - 1][k - 1])) + (5 * A[i - 1][j - 1][k - 1])) + (7 * A[i + 1][j - 1][k - 1])) + ((-8) * A[i - 1][j - 1][k - 1])) + (10 * A[i + 1][j - 1][k - 1])) + ((-3) * A[i][j - 1][k])) + (6 * A[i][j][k])) + ((-9) * A[i][j + 1][k])) + (2 * A[i - 1][j - 1][k + 1])) + (4 * A[i + 1][j - 1][k + 1])) + (5 * A[i - 1][j][k + 1])) + (7 * A[i + 1][j][k + 1])) + ((-8) * A[i - 1][j + 1][k + 1])) + (10 * A[i + 1][j + 1][k + 1]);\n}\n\n\n", "pragma": "omp for private (j,k) collapse(2)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/convolution-3d/convolution-3d/0"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n  for (k = 0; j < nk; k++)\n{\n  A[i][j][k] = ((i % 12) + (2 * (j % 7))) + (3 * (k % 13));\n}\n\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/convolution-3d/convolution-3d/1"}
{"code": "for (i = 0; i < ni; i++)\n  for (j = 0; j < nj; j++)\n  for (k = 0; j < nk; k++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, B[i][j][k]);\n  if ((((((i * NJ) + j) * NK) + k) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/convolution-3d/convolution-3d/2"}
{"code": "for (j = 0; j < _PB_NY; j++)\n  ey[0][j] = _fict_[t];\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-2d/fdtd-2d/0"}
{"code": "for (i = 1; i < _PB_NX; i++)\n  for (j = 0; j < _PB_NY; j++)\n  ey[i][j] = ey[i][j] - (0.5 * (hz[i][j] - hz[i - 1][j]));\n\n", "pragma": "omp for collapse(2) schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-2d/fdtd-2d/1"}
{"code": "for (i = 0; i < _PB_NX; i++)\n  for (j = 1; j < _PB_NY; j++)\n  ex[i][j] = ex[i][j] - (0.5 * (hz[i][j] - hz[i][j - 1]));\n\n", "pragma": "omp for collapse(2) schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-2d/fdtd-2d/2"}
{"code": "for (i = 0; i < (_PB_NX - 1); i++)\n  for (j = 0; j < (_PB_NY - 1); j++)\n  hz[i][j] = hz[i][j] - (0.7 * (((ex[i][j + 1] - ex[i][j]) + ey[i + 1][j]) - ey[i][j]));\n\n", "pragma": "omp for collapse(2) schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-2d/fdtd-2d/3"}
{"code": "for (i = 0; i < tmax; i++)\n  _fict_[i] = (DATA_TYPE) i;\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-2d/fdtd-2d/4"}
{"code": "for (i = 0; i < nx; i++)\n  for (j = 0; j < ny; j++)\n{\n  ex[i][j] = (((DATA_TYPE) i) * (j + 1)) / nx;\n  ey[i][j] = (((DATA_TYPE) i) * (j + 2)) / ny;\n  hz[i][j] = (((DATA_TYPE) i) * (j + 3)) / nx;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-2d/fdtd-2d/5"}
{"code": "for (i = 0; i < nx; i++)\n  for (j = 0; j < ny; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, ex[i][j]);\n  fprintf(stderr, DATA_PRINTF_MODIFIER, ey[i][j]);\n  fprintf(stderr, DATA_PRINTF_MODIFIER, hz[i][j]);\n  if ((((i * nx) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-2d/fdtd-2d/6"}
{"code": "for (t = 0; t < _PB_TMAX; t++)\n{\n  #pragma omp for\n  for (j = 0; j < _PB_NY; j++)\n    ey[0][j] = _fict_[t];\n\n  #pragma omp barrier\n  #pragma omp for collapse(2) schedule(static)\n  for (i = 1; i < _PB_NX; i++)\n    for (j = 0; j < _PB_NY; j++)\n    ey[i][j] = ey[i][j] - (0.5 * (hz[i][j] - hz[i - 1][j]));\n\n\n  #pragma omp barrier\n  #pragma omp for collapse(2) schedule(static)\n  for (i = 0; i < _PB_NX; i++)\n    for (j = 1; j < _PB_NY; j++)\n    ex[i][j] = ex[i][j] - (0.5 * (hz[i][j] - hz[i][j - 1]));\n\n\n  #pragma omp barrier\n  #pragma omp for collapse(2) schedule(static)\n  for (i = 0; i < (_PB_NX - 1); i++)\n    for (j = 0; j < (_PB_NY - 1); j++)\n    hz[i][j] = hz[i][j] - (0.7 * (((ex[i][j + 1] - ex[i][j]) + ey[i + 1][j]) - ey[i][j]));\n\n\n  #pragma omp barrier\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-2d/fdtd-2d/7"}
{"code": "for (iz = 0; iz < _PB_CZ; iz++)\n{\n  for (iy = 0; iy < _PB_CYM; iy++)\n  {\n    for (ix = 0; ix < _PB_CXM; ix++)\n    {\n      clf[iz][iy] = ((Ex[iz][iy][ix] - Ex[iz][iy + 1][ix]) + Ey[iz][iy][ix + 1]) - Ey[iz][iy][ix];\n      tmp[iz][iy] = ((cymh[iy] / cyph[iy]) * Bza[iz][iy][ix]) - ((ch / cyph[iy]) * clf[iz][iy]);\n      Hz[iz][iy][ix] = (((cxmh[ix] / cxph[ix]) * Hz[iz][iy][ix]) + (((mui * czp[iz]) / cxph[ix]) * tmp[iz][iy])) - (((mui * czm[iz]) / cxph[ix]) * Bza[iz][iy][ix]);\n      Bza[iz][iy][ix] = tmp[iz][iy];\n    }\n\n    clf[iz][iy] = ((Ex[iz][iy][_PB_CXM] - Ex[iz][iy + 1][_PB_CXM]) + Ry[iz][iy]) - Ey[iz][iy][_PB_CXM];\n    tmp[iz][iy] = ((cymh[iy] / cyph[iy]) * Bza[iz][iy][_PB_CXM]) - ((ch / cyph[iy]) * clf[iz][iy]);\n    Hz[iz][iy][_PB_CXM] = (((cxmh[_PB_CXM] / cxph[_PB_CXM]) * Hz[iz][iy][_PB_CXM]) + (((mui * czp[iz]) / cxph[_PB_CXM]) * tmp[iz][iy])) - (((mui * czm[iz]) / cxph[_PB_CXM]) * Bza[iz][iy][_PB_CXM]);\n    Bza[iz][iy][_PB_CXM] = tmp[iz][iy];\n    for (ix = 0; ix < _PB_CXM; ix++)\n    {\n      clf[iz][iy] = ((Ex[iz][_PB_CYM][ix] - Ax[iz][ix]) + Ey[iz][_PB_CYM][ix + 1]) - Ey[iz][_PB_CYM][ix];\n      tmp[iz][iy] = ((cymh[_PB_CYM] / cyph[iy]) * Bza[iz][iy][ix]) - ((ch / cyph[iy]) * clf[iz][iy]);\n      Hz[iz][_PB_CYM][ix] = (((cxmh[ix] / cxph[ix]) * Hz[iz][_PB_CYM][ix]) + (((mui * czp[iz]) / cxph[ix]) * tmp[iz][iy])) - (((mui * czm[iz]) / cxph[ix]) * Bza[iz][_PB_CYM][ix]);\n      Bza[iz][_PB_CYM][ix] = tmp[iz][iy];\n    }\n\n    clf[iz][iy] = ((Ex[iz][_PB_CYM][_PB_CXM] - Ax[iz][_PB_CXM]) + Ry[iz][_PB_CYM]) - Ey[iz][_PB_CYM][_PB_CXM];\n    tmp[iz][iy] = ((cymh[_PB_CYM] / cyph[_PB_CYM]) * Bza[iz][_PB_CYM][_PB_CXM]) - ((ch / cyph[_PB_CYM]) * clf[iz][iy]);\n    Hz[iz][_PB_CYM][_PB_CXM] = (((cxmh[_PB_CXM] / cxph[_PB_CXM]) * Hz[iz][_PB_CYM][_PB_CXM]) + (((mui * czp[iz]) / cxph[_PB_CXM]) * tmp[iz][iy])) - (((mui * czm[iz]) / cxph[_PB_CXM]) * Bza[iz][_PB_CYM][_PB_CXM]);\n    Bza[iz][_PB_CYM][_PB_CXM] = tmp[iz][iy];\n  }\n\n}\n", "pragma": "omp for private (iy, ix)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-apml/fdtd-apml/0"}
{"code": "for (i = 0; i <= cz; i++)\n{\n  czm[i] = (((DATA_TYPE) i) + 1) / cxm;\n  czp[i] = (((DATA_TYPE) i) + 2) / cxm;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-apml/fdtd-apml/1"}
{"code": "for (i = 0; i <= cxm; i++)\n{\n  cxmh[i] = (((DATA_TYPE) i) + 3) / cxm;\n  cxph[i] = (((DATA_TYPE) i) + 4) / cxm;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-apml/fdtd-apml/2"}
{"code": "for (i = 0; i <= cym; i++)\n{\n  cymh[i] = (((DATA_TYPE) i) + 5) / cxm;\n  cyph[i] = (((DATA_TYPE) i) + 6) / cxm;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-apml/fdtd-apml/3"}
{"code": "for (i = 0; i <= cz; i++)\n  for (j = 0; j <= cym; j++)\n{\n  Ry[i][j] = ((((DATA_TYPE) i) * (j + 1)) + 10) / cym;\n  Ax[i][j] = ((((DATA_TYPE) i) * (j + 2)) + 11) / cym;\n  for (k = 0; k <= cxm; k++)\n  {\n    Ex[i][j][k] = (((((DATA_TYPE) i) * (j + 3)) + k) + 1) / cxm;\n    Ey[i][j][k] = (((((DATA_TYPE) i) * (j + 4)) + k) + 2) / cym;\n    Hz[i][j][k] = (((((DATA_TYPE) i) * (j + 5)) + k) + 3) / cz;\n  }\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-apml/fdtd-apml/4"}
{"code": "for (i = 0; i <= cz; i++)\n  for (j = 0; j <= cym; j++)\n  for (k = 0; k <= cxm; k++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, Bza[i][j][k]);\n  fprintf(stderr, DATA_PRINTF_MODIFIER, Ex[i][j][k]);\n  fprintf(stderr, DATA_PRINTF_MODIFIER, Ey[i][j][k]);\n  fprintf(stderr, DATA_PRINTF_MODIFIER, Hz[i][j][k]);\n  if ((((i * cxm) + j) % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/fdtd-apml/fdtd-apml/5"}
{"code": "for (i = 1; i < (_PB_N - 1); i++)\n  B[i] = 0.33333 * ((A[i - 1] + A[i]) + A[i + 1]);\n", "pragma": "omp for schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-1d-imper/jacobi-1d-imper/0"}
{"code": "for (j = 1; j < (_PB_N - 1); j++)\n  A[j] = B[j];\n", "pragma": "omp for schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-1d-imper/jacobi-1d-imper/1"}
{"code": "for (i = 0; i < n; i++)\n{\n  A[i] = (((DATA_TYPE) i) + 2) / n;\n  B[i] = (((DATA_TYPE) i) + 3) / n;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-1d-imper/jacobi-1d-imper/2"}
{"code": "for (i = 0; i < n; i++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, A[i]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-1d-imper/jacobi-1d-imper/3"}
{"code": "for (t = 0; t < _PB_TSTEPS; t++)\n{\n  #pragma omp for schedule(static)\n  for (i = 1; i < (_PB_N - 1); i++)\n    B[i] = 0.33333 * ((A[i - 1] + A[i]) + A[i + 1]);\n\n  #pragma omp barrier\n  #pragma omp for schedule(static)\n  for (j = 1; j < (_PB_N - 1); j++)\n    A[j] = B[j];\n\n  #pragma omp barrier\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-1d-imper/jacobi-1d-imper/4"}
{"code": "for (i = 1; i < (_PB_N - 1); i++)\n  for (j = 1; j < (_PB_N - 1); j++)\n  B[i][j] = 0.2 * ((((A[i][j] + A[i][j - 1]) + A[i][1 + j]) + A[1 + i][j]) + A[i - 1][j]);\n\n", "pragma": "omp for schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-2d-imper/jacobi-2d-imper/0"}
{"code": "for (i = 1; i < (_PB_N - 1); i++)\n  for (j = 1; j < (_PB_N - 1); j++)\n  A[i][j] = B[i][j];\n\n", "pragma": "omp for schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-2d-imper/jacobi-2d-imper/1"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n{\n  A[i][j] = ((((DATA_TYPE) i) * (j + 2)) + 2) / n;\n  B[i][j] = ((((DATA_TYPE) i) * (j + 3)) + 3) / n;\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-2d-imper/jacobi-2d-imper/2"}
{"code": "for (t = 0; t < _PB_TSTEPS; t++)\n{\n  #pragma omp for schedule(static)\n  for (i = 1; i < (_PB_N - 1); i++)\n    for (j = 1; j < (_PB_N - 1); j++)\n    B[i][j] = 0.2 * ((((A[i][j] + A[i][j - 1]) + A[i][1 + j]) + A[1 + i][j]) + A[i - 1][j]);\n\n\n  #pragma omp for schedule(static)\n  for (i = 1; i < (_PB_N - 1); i++)\n    for (j = 1; j < (_PB_N - 1); j++)\n    A[i][j] = B[i][j];\n\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/jacobi-2d-imper/jacobi-2d-imper/3"}
{"code": "for (i = 1; i <= (_PB_N - 2); i++)\n{\n  for (j = 1; j <= (_PB_N - 2); j++)\n  {\n    A[i][j] = ((((((((A[i - 1][j - 1] + A[i - 1][j]) + A[i - 1][j + 1]) + A[i][j - 1]) + A[i][j]) + A[i][j + 1]) + A[i + 1][j - 1]) + A[i + 1][j]) + A[i + 1][j + 1]) / 9.0;\n  }\n\n}\n", "pragma": "omp for schedule(static) collapse (2)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/seidel-2d/seidel-2d/0"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n  A[i][j] = ((((DATA_TYPE) i) * (j + 2)) + 2) / n;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/seidel-2d/seidel-2d/1"}
{"code": "for (t = 0; t <= (_PB_TSTEPS - 1); t++)\n{\n  #pragma omp for schedule(static) collapse (2)\n  for (i = 1; i <= (_PB_N - 2); i++)\n  {\n    for (j = 1; j <= (_PB_N - 2); j++)\n    {\n      A[i][j] = ((((((((A[i - 1][j - 1] + A[i - 1][j]) + A[i - 1][j + 1]) + A[i][j - 1]) + A[i][j]) + A[i][j + 1]) + A[i + 1][j - 1]) + A[i + 1][j]) + A[i + 1][j + 1]) / 9.0;\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/stencils/seidel-2d/seidel-2d/2"}
{"code": "for (i = 0; i < cs; i++)\n  tmp += flush[i];\n", "pragma": "omp parallel for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/utilities/polybench/0"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n  C[i][j] = 42;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/utilities/template-for-new-benchmark/0"}
{"code": "for (i = 0; i < n; i++)\n  for (j = 0; j < n; j++)\n{\n  fprintf(stderr, DATA_PRINTF_MODIFIER, C[i][j]);\n  if ((i % 20) == 0)\n    fprintf(stderr, \"\\n\");\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/utilities/template-for-new-benchmark/1"}
{"code": "for (i = 0; i < _PB_N; i++)\n  for (j = 0; j < _PB_N; j++)\n  C[i][j] += 42;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/polybench_loops/OpenMP/utilities/template-for-new-benchmark/2"}
