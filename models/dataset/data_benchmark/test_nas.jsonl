{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        u[i][j][k][m] = u[i][j][k][m] + rhs[i][j][k][m];\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/0"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        forcing[i][j][k][m] = 0.0;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/1"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  eta = ((double) j) * dnym1;\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    zeta = ((double) k) * dnzm1;\n    for (i = 0; i < grid_points[0]; i++)\n    {\n      xi = ((double) i) * dnxm1;\n      exact_solution(xi, eta, zeta, dtemp);\n      for (m = 0; m < 5; m++)\n      {\n        ue[i][m] = dtemp[m];\n      }\n\n      dtpp = 1.0 / dtemp[0];\n      for (m = 1; m <= 4; m++)\n      {\n        buf[i][m] = dtpp * dtemp[m];\n      }\n\n      cuf[i] = buf[i][1] * buf[i][1];\n      buf[i][0] = (cuf[i] + (buf[i][2] * buf[i][2])) + (buf[i][3] * buf[i][3]);\n      q[i] = 0.5 * (((buf[i][1] * ue[i][1]) + (buf[i][2] * ue[i][2])) + (buf[i][3] * ue[i][3]));\n    }\n\n    for (i = 1; i < (grid_points[0] - 1); i++)\n    {\n      im1 = i - 1;\n      ip1 = i + 1;\n      forcing[i][j][k][0] = (forcing[i][j][k][0] - (tx2 * (ue[ip1][1] - ue[im1][1]))) + (dx1tx1 * ((ue[ip1][0] - (2.0 * ue[i][0])) + ue[im1][0]));\n      forcing[i][j][k][1] = ((forcing[i][j][k][1] - (tx2 * (((ue[ip1][1] * buf[ip1][1]) + (c2 * (ue[ip1][4] - q[ip1]))) - ((ue[im1][1] * buf[im1][1]) + (c2 * (ue[im1][4] - q[im1])))))) + (xxcon1 * ((buf[ip1][1] - (2.0 * buf[i][1])) + buf[im1][1]))) + (dx2tx1 * ((ue[ip1][1] - (2.0 * ue[i][1])) + ue[im1][1]));\n      forcing[i][j][k][2] = ((forcing[i][j][k][2] - (tx2 * ((ue[ip1][2] * buf[ip1][1]) - (ue[im1][2] * buf[im1][1])))) + (xxcon2 * ((buf[ip1][2] - (2.0 * buf[i][2])) + buf[im1][2]))) + (dx3tx1 * ((ue[ip1][2] - (2.0 * ue[i][2])) + ue[im1][2]));\n      forcing[i][j][k][3] = ((forcing[i][j][k][3] - (tx2 * ((ue[ip1][3] * buf[ip1][1]) - (ue[im1][3] * buf[im1][1])))) + (xxcon2 * ((buf[ip1][3] - (2.0 * buf[i][3])) + buf[im1][3]))) + (dx4tx1 * ((ue[ip1][3] - (2.0 * ue[i][3])) + ue[im1][3]));\n      forcing[i][j][k][4] = ((((forcing[i][j][k][4] - (tx2 * ((buf[ip1][1] * ((c1 * ue[ip1][4]) - (c2 * q[ip1]))) - (buf[im1][1] * ((c1 * ue[im1][4]) - (c2 * q[im1])))))) + ((0.5 * xxcon3) * ((buf[ip1][0] - (2.0 * buf[i][0])) + buf[im1][0]))) + (xxcon4 * ((cuf[ip1] - (2.0 * cuf[i])) + cuf[im1]))) + (xxcon5 * ((buf[ip1][4] - (2.0 * buf[i][4])) + buf[im1][4]))) + (dx5tx1 * ((ue[ip1][4] - (2.0 * ue[i][4])) + ue[im1][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      i = 1;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((5.0 * ue[i][m]) - (4.0 * ue[i + 1][m])) + ue[i + 2][m]));\n      i = 2;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((((-4.0) * ue[i - 1][m]) + (6.0 * ue[i][m])) - (4.0 * ue[i + 1][m])) + ue[i + 2][m]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      for (i = 1 * 3; i <= ((grid_points[0] - (3 * 1)) - 1); i++)\n      {\n        forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * ((((ue[i - 2][m] - (4.0 * ue[i - 1][m])) + (6.0 * ue[i][m])) - (4.0 * ue[i + 1][m])) + ue[i + 2][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      i = grid_points[0] - 3;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((ue[i - 2][m] - (4.0 * ue[i - 1][m])) + (6.0 * ue[i][m])) - (4.0 * ue[i + 1][m])));\n      i = grid_points[0] - 2;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * ((ue[i - 2][m] - (4.0 * ue[i - 1][m])) + (5.0 * ue[i][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/2"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    zeta = ((double) k) * dnzm1;\n    for (j = 0; j < grid_points[1]; j++)\n    {\n      eta = ((double) j) * dnym1;\n      exact_solution(xi, eta, zeta, dtemp);\n      for (m = 0; m < 5; m++)\n      {\n        ue[j][m] = dtemp[m];\n      }\n\n      dtpp = 1.0 / dtemp[0];\n      for (m = 1; m <= 4; m++)\n      {\n        buf[j][m] = dtpp * dtemp[m];\n      }\n\n      cuf[j] = buf[j][2] * buf[j][2];\n      buf[j][0] = (cuf[j] + (buf[j][1] * buf[j][1])) + (buf[j][3] * buf[j][3]);\n      q[j] = 0.5 * (((buf[j][1] * ue[j][1]) + (buf[j][2] * ue[j][2])) + (buf[j][3] * ue[j][3]));\n    }\n\n    for (j = 1; j < (grid_points[1] - 1); j++)\n    {\n      jm1 = j - 1;\n      jp1 = j + 1;\n      forcing[i][j][k][0] = (forcing[i][j][k][0] - (ty2 * (ue[jp1][2] - ue[jm1][2]))) + (dy1ty1 * ((ue[jp1][0] - (2.0 * ue[j][0])) + ue[jm1][0]));\n      forcing[i][j][k][1] = ((forcing[i][j][k][1] - (ty2 * ((ue[jp1][1] * buf[jp1][2]) - (ue[jm1][1] * buf[jm1][2])))) + (yycon2 * ((buf[jp1][1] - (2.0 * buf[j][1])) + buf[jm1][1]))) + (dy2ty1 * ((ue[jp1][1] - (2.0 * ue[j][1])) + ue[jm1][1]));\n      forcing[i][j][k][2] = ((forcing[i][j][k][2] - (ty2 * (((ue[jp1][2] * buf[jp1][2]) + (c2 * (ue[jp1][4] - q[jp1]))) - ((ue[jm1][2] * buf[jm1][2]) + (c2 * (ue[jm1][4] - q[jm1])))))) + (yycon1 * ((buf[jp1][2] - (2.0 * buf[j][2])) + buf[jm1][2]))) + (dy3ty1 * ((ue[jp1][2] - (2.0 * ue[j][2])) + ue[jm1][2]));\n      forcing[i][j][k][3] = ((forcing[i][j][k][3] - (ty2 * ((ue[jp1][3] * buf[jp1][2]) - (ue[jm1][3] * buf[jm1][2])))) + (yycon2 * ((buf[jp1][3] - (2.0 * buf[j][3])) + buf[jm1][3]))) + (dy4ty1 * ((ue[jp1][3] - (2.0 * ue[j][3])) + ue[jm1][3]));\n      forcing[i][j][k][4] = ((((forcing[i][j][k][4] - (ty2 * ((buf[jp1][2] * ((c1 * ue[jp1][4]) - (c2 * q[jp1]))) - (buf[jm1][2] * ((c1 * ue[jm1][4]) - (c2 * q[jm1])))))) + ((0.5 * yycon3) * ((buf[jp1][0] - (2.0 * buf[j][0])) + buf[jm1][0]))) + (yycon4 * ((cuf[jp1] - (2.0 * cuf[j])) + cuf[jm1]))) + (yycon5 * ((buf[jp1][4] - (2.0 * buf[j][4])) + buf[jm1][4]))) + (dy5ty1 * ((ue[jp1][4] - (2.0 * ue[j][4])) + ue[jm1][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      j = 1;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((5.0 * ue[j][m]) - (4.0 * ue[j + 1][m])) + ue[j + 2][m]));\n      j = 2;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((((-4.0) * ue[j - 1][m]) + (6.0 * ue[j][m])) - (4.0 * ue[j + 1][m])) + ue[j + 2][m]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      for (j = 1 * 3; j <= ((grid_points[1] - (3 * 1)) - 1); j++)\n      {\n        forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * ((((ue[j - 2][m] - (4.0 * ue[j - 1][m])) + (6.0 * ue[j][m])) - (4.0 * ue[j + 1][m])) + ue[j + 2][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      j = grid_points[1] - 3;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((ue[j - 2][m] - (4.0 * ue[j - 1][m])) + (6.0 * ue[j][m])) - (4.0 * ue[j + 1][m])));\n      j = grid_points[1] - 2;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * ((ue[j - 2][m] - (4.0 * ue[j - 1][m])) + (5.0 * ue[j][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/3"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    eta = ((double) j) * dnym1;\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      zeta = ((double) k) * dnzm1;\n      exact_solution(xi, eta, zeta, dtemp);\n      for (m = 0; m < 5; m++)\n      {\n        ue[k][m] = dtemp[m];\n      }\n\n      dtpp = 1.0 / dtemp[0];\n      for (m = 1; m <= 4; m++)\n      {\n        buf[k][m] = dtpp * dtemp[m];\n      }\n\n      cuf[k] = buf[k][3] * buf[k][3];\n      buf[k][0] = (cuf[k] + (buf[k][1] * buf[k][1])) + (buf[k][2] * buf[k][2]);\n      q[k] = 0.5 * (((buf[k][1] * ue[k][1]) + (buf[k][2] * ue[k][2])) + (buf[k][3] * ue[k][3]));\n    }\n\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      km1 = k - 1;\n      kp1 = k + 1;\n      forcing[i][j][k][0] = (forcing[i][j][k][0] - (tz2 * (ue[kp1][3] - ue[km1][3]))) + (dz1tz1 * ((ue[kp1][0] - (2.0 * ue[k][0])) + ue[km1][0]));\n      forcing[i][j][k][1] = ((forcing[i][j][k][1] - (tz2 * ((ue[kp1][1] * buf[kp1][3]) - (ue[km1][1] * buf[km1][3])))) + (zzcon2 * ((buf[kp1][1] - (2.0 * buf[k][1])) + buf[km1][1]))) + (dz2tz1 * ((ue[kp1][1] - (2.0 * ue[k][1])) + ue[km1][1]));\n      forcing[i][j][k][2] = ((forcing[i][j][k][2] - (tz2 * ((ue[kp1][2] * buf[kp1][3]) - (ue[km1][2] * buf[km1][3])))) + (zzcon2 * ((buf[kp1][2] - (2.0 * buf[k][2])) + buf[km1][2]))) + (dz3tz1 * ((ue[kp1][2] - (2.0 * ue[k][2])) + ue[km1][2]));\n      forcing[i][j][k][3] = ((forcing[i][j][k][3] - (tz2 * (((ue[kp1][3] * buf[kp1][3]) + (c2 * (ue[kp1][4] - q[kp1]))) - ((ue[km1][3] * buf[km1][3]) + (c2 * (ue[km1][4] - q[km1])))))) + (zzcon1 * ((buf[kp1][3] - (2.0 * buf[k][3])) + buf[km1][3]))) + (dz4tz1 * ((ue[kp1][3] - (2.0 * ue[k][3])) + ue[km1][3]));\n      forcing[i][j][k][4] = ((((forcing[i][j][k][4] - (tz2 * ((buf[kp1][3] * ((c1 * ue[kp1][4]) - (c2 * q[kp1]))) - (buf[km1][3] * ((c1 * ue[km1][4]) - (c2 * q[km1])))))) + ((0.5 * zzcon3) * ((buf[kp1][0] - (2.0 * buf[k][0])) + buf[km1][0]))) + (zzcon4 * ((cuf[kp1] - (2.0 * cuf[k])) + cuf[km1]))) + (zzcon5 * ((buf[kp1][4] - (2.0 * buf[k][4])) + buf[km1][4]))) + (dz5tz1 * ((ue[kp1][4] - (2.0 * ue[k][4])) + ue[km1][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      k = 1;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((5.0 * ue[k][m]) - (4.0 * ue[k + 1][m])) + ue[k + 2][m]));\n      k = 2;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((((-4.0) * ue[k - 1][m]) + (6.0 * ue[k][m])) - (4.0 * ue[k + 1][m])) + ue[k + 2][m]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      for (k = 1 * 3; k <= ((grid_points[2] - (3 * 1)) - 1); k++)\n      {\n        forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * ((((ue[k - 2][m] - (4.0 * ue[k - 1][m])) + (6.0 * ue[k][m])) - (4.0 * ue[k + 1][m])) + ue[k + 2][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      k = grid_points[2] - 3;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * (((ue[k - 2][m] - (4.0 * ue[k - 1][m])) + (6.0 * ue[k][m])) - (4.0 * ue[k + 1][m])));\n      k = grid_points[2] - 2;\n      forcing[i][j][k][m] = forcing[i][j][k][m] - (dssp * ((ue[k - 2][m] - (4.0 * ue[k - 1][m])) + (5.0 * ue[k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/4"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        forcing[i][j][k][m] = (-1.0) * forcing[i][j][k][m];\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/5"}
{"code": "for (i = 0; i < IMAX; i++)\n{\n  for (j = 0; j < IMAX; j++)\n  {\n    for (k = 0; k < IMAX; k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        u[i][j][k][m] = 1.0;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/6"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    eta = ((double) j) * dnym1;\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      zeta = ((double) k) * dnzm1;\n      for (ix = 0; ix < 2; ix++)\n      {\n        exact_solution((double) ix, eta, zeta, &Pface[ix][0][0]);\n      }\n\n      for (iy = 0; iy < 2; iy++)\n      {\n        exact_solution(xi, (double) iy, zeta, &Pface[iy][1][0]);\n      }\n\n      for (iz = 0; iz < 2; iz++)\n      {\n        exact_solution(xi, eta, (double) iz, &Pface[iz][2][0]);\n      }\n\n      for (m = 0; m < 5; m++)\n      {\n        Pxi = (xi * Pface[1][0][m]) + ((1.0 - xi) * Pface[0][0][m]);\n        Peta = (eta * Pface[1][1][m]) + ((1.0 - eta) * Pface[0][1][m]);\n        Pzeta = (zeta * Pface[1][2][m]) + ((1.0 - zeta) * Pface[0][2][m]);\n        u[i][j][k][m] = (((((Pxi + Peta) + Pzeta) - (Pxi * Peta)) - (Pxi * Pzeta)) - (Peta * Pzeta)) + ((Pxi * Peta) * Pzeta);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/7"}
{"code": "for (j = 0; j < grid_points[1]; j++)\n{\n  eta = ((double) j) * dnym1;\n  for (k = 0; k < grid_points[2]; k++)\n  {\n    zeta = ((double) k) * dnzm1;\n    exact_solution(xi, eta, zeta, temp);\n    for (m = 0; m < 5; m++)\n    {\n      u[i][j][k][m] = temp[m];\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/8"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (k = 0; k < grid_points[2]; k++)\n  {\n    zeta = ((double) k) * dnzm1;\n    exact_solution(xi, eta, zeta, temp);\n    for (m = 0; m < 5; m++)\n    {\n      u[i][j][k][m] = temp[m];\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/9"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    eta = ((double) j) * dnym1;\n    exact_solution(xi, eta, zeta, temp);\n    for (m = 0; m < 5; m++)\n    {\n      u[i][j][k][m] = temp[m];\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/10"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        for (n = 0; n < 5; n++)\n        {\n          lhs[i][j][k][0][m][n] = 0.0;\n          lhs[i][j][k][1][m][n] = 0.0;\n          lhs[i][j][k][2][m][n] = 0.0;\n        }\n\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/11"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        lhs[i][j][k][1][m][m] = 1.0;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/12"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (i = 0; i < grid_points[0]; i++)\n    {\n      tmp1 = 1.0 / u[i][j][k][0];\n      tmp2 = tmp1 * tmp1;\n      tmp3 = tmp1 * tmp2;\n      fjac[i][j][k][0][0] = 0.0;\n      fjac[i][j][k][0][1] = 1.0;\n      fjac[i][j][k][0][2] = 0.0;\n      fjac[i][j][k][0][3] = 0.0;\n      fjac[i][j][k][0][4] = 0.0;\n      fjac[i][j][k][1][0] = (-((u[i][j][k][1] * tmp2) * u[i][j][k][1])) + (((c2 * 0.50) * (((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) * tmp2);\n      fjac[i][j][k][1][1] = (2.0 - c2) * (u[i][j][k][1] / u[i][j][k][0]);\n      fjac[i][j][k][1][2] = (-c2) * (u[i][j][k][2] * tmp1);\n      fjac[i][j][k][1][3] = (-c2) * (u[i][j][k][3] * tmp1);\n      fjac[i][j][k][1][4] = c2;\n      fjac[i][j][k][2][0] = (-(u[i][j][k][1] * u[i][j][k][2])) * tmp2;\n      fjac[i][j][k][2][1] = u[i][j][k][2] * tmp1;\n      fjac[i][j][k][2][2] = u[i][j][k][1] * tmp1;\n      fjac[i][j][k][2][3] = 0.0;\n      fjac[i][j][k][2][4] = 0.0;\n      fjac[i][j][k][3][0] = (-(u[i][j][k][1] * u[i][j][k][3])) * tmp2;\n      fjac[i][j][k][3][1] = u[i][j][k][3] * tmp1;\n      fjac[i][j][k][3][2] = 0.0;\n      fjac[i][j][k][3][3] = u[i][j][k][1] * tmp1;\n      fjac[i][j][k][3][4] = 0.0;\n      fjac[i][j][k][4][0] = (((c2 * (((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) * tmp2) - (c1 * (u[i][j][k][4] * tmp1))) * (u[i][j][k][1] * tmp1);\n      fjac[i][j][k][4][1] = ((c1 * u[i][j][k][4]) * tmp1) - (((0.50 * c2) * ((((3.0 * u[i][j][k][1]) * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) * tmp2);\n      fjac[i][j][k][4][2] = ((-c2) * (u[i][j][k][2] * u[i][j][k][1])) * tmp2;\n      fjac[i][j][k][4][3] = ((-c2) * (u[i][j][k][3] * u[i][j][k][1])) * tmp2;\n      fjac[i][j][k][4][4] = c1 * (u[i][j][k][1] * tmp1);\n      njac[i][j][k][0][0] = 0.0;\n      njac[i][j][k][0][1] = 0.0;\n      njac[i][j][k][0][2] = 0.0;\n      njac[i][j][k][0][3] = 0.0;\n      njac[i][j][k][0][4] = 0.0;\n      njac[i][j][k][1][0] = (((-con43) * c3c4) * tmp2) * u[i][j][k][1];\n      njac[i][j][k][1][1] = (con43 * c3c4) * tmp1;\n      njac[i][j][k][1][2] = 0.0;\n      njac[i][j][k][1][3] = 0.0;\n      njac[i][j][k][1][4] = 0.0;\n      njac[i][j][k][2][0] = ((-c3c4) * tmp2) * u[i][j][k][2];\n      njac[i][j][k][2][1] = 0.0;\n      njac[i][j][k][2][2] = c3c4 * tmp1;\n      njac[i][j][k][2][3] = 0.0;\n      njac[i][j][k][2][4] = 0.0;\n      njac[i][j][k][3][0] = ((-c3c4) * tmp2) * u[i][j][k][3];\n      njac[i][j][k][3][1] = 0.0;\n      njac[i][j][k][3][2] = 0.0;\n      njac[i][j][k][3][3] = c3c4 * tmp1;\n      njac[i][j][k][3][4] = 0.0;\n      njac[i][j][k][4][0] = (((((-((con43 * c3c4) - c1345)) * tmp3) * pow2(u[i][j][k][1])) - (((c3c4 - c1345) * tmp3) * pow2(u[i][j][k][2]))) - (((c3c4 - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4]);\n      njac[i][j][k][4][1] = (((con43 * c3c4) - c1345) * tmp2) * u[i][j][k][1];\n      njac[i][j][k][4][2] = ((c3c4 - c1345) * tmp2) * u[i][j][k][2];\n      njac[i][j][k][4][3] = ((c3c4 - c1345) * tmp2) * u[i][j][k][3];\n      njac[i][j][k][4][4] = c1345 * tmp1;\n    }\n\n    for (i = 1; i < (grid_points[0] - 1); i++)\n    {\n      tmp1 = dt * tx1;\n      tmp2 = dt * tx2;\n      lhs[i][j][k][AA][0][0] = (((-tmp2) * fjac[i - 1][j][k][0][0]) - (tmp1 * njac[i - 1][j][k][0][0])) - (tmp1 * dx1);\n      lhs[i][j][k][AA][0][1] = ((-tmp2) * fjac[i - 1][j][k][0][1]) - (tmp1 * njac[i - 1][j][k][0][1]);\n      lhs[i][j][k][AA][0][2] = ((-tmp2) * fjac[i - 1][j][k][0][2]) - (tmp1 * njac[i - 1][j][k][0][2]);\n      lhs[i][j][k][AA][0][3] = ((-tmp2) * fjac[i - 1][j][k][0][3]) - (tmp1 * njac[i - 1][j][k][0][3]);\n      lhs[i][j][k][AA][0][4] = ((-tmp2) * fjac[i - 1][j][k][0][4]) - (tmp1 * njac[i - 1][j][k][0][4]);\n      lhs[i][j][k][AA][1][0] = ((-tmp2) * fjac[i - 1][j][k][1][0]) - (tmp1 * njac[i - 1][j][k][1][0]);\n      lhs[i][j][k][AA][1][1] = (((-tmp2) * fjac[i - 1][j][k][1][1]) - (tmp1 * njac[i - 1][j][k][1][1])) - (tmp1 * dx2);\n      lhs[i][j][k][AA][1][2] = ((-tmp2) * fjac[i - 1][j][k][1][2]) - (tmp1 * njac[i - 1][j][k][1][2]);\n      lhs[i][j][k][AA][1][3] = ((-tmp2) * fjac[i - 1][j][k][1][3]) - (tmp1 * njac[i - 1][j][k][1][3]);\n      lhs[i][j][k][AA][1][4] = ((-tmp2) * fjac[i - 1][j][k][1][4]) - (tmp1 * njac[i - 1][j][k][1][4]);\n      lhs[i][j][k][AA][2][0] = ((-tmp2) * fjac[i - 1][j][k][2][0]) - (tmp1 * njac[i - 1][j][k][2][0]);\n      lhs[i][j][k][AA][2][1] = ((-tmp2) * fjac[i - 1][j][k][2][1]) - (tmp1 * njac[i - 1][j][k][2][1]);\n      lhs[i][j][k][AA][2][2] = (((-tmp2) * fjac[i - 1][j][k][2][2]) - (tmp1 * njac[i - 1][j][k][2][2])) - (tmp1 * dx3);\n      lhs[i][j][k][AA][2][3] = ((-tmp2) * fjac[i - 1][j][k][2][3]) - (tmp1 * njac[i - 1][j][k][2][3]);\n      lhs[i][j][k][AA][2][4] = ((-tmp2) * fjac[i - 1][j][k][2][4]) - (tmp1 * njac[i - 1][j][k][2][4]);\n      lhs[i][j][k][AA][3][0] = ((-tmp2) * fjac[i - 1][j][k][3][0]) - (tmp1 * njac[i - 1][j][k][3][0]);\n      lhs[i][j][k][AA][3][1] = ((-tmp2) * fjac[i - 1][j][k][3][1]) - (tmp1 * njac[i - 1][j][k][3][1]);\n      lhs[i][j][k][AA][3][2] = ((-tmp2) * fjac[i - 1][j][k][3][2]) - (tmp1 * njac[i - 1][j][k][3][2]);\n      lhs[i][j][k][AA][3][3] = (((-tmp2) * fjac[i - 1][j][k][3][3]) - (tmp1 * njac[i - 1][j][k][3][3])) - (tmp1 * dx4);\n      lhs[i][j][k][AA][3][4] = ((-tmp2) * fjac[i - 1][j][k][3][4]) - (tmp1 * njac[i - 1][j][k][3][4]);\n      lhs[i][j][k][AA][4][0] = ((-tmp2) * fjac[i - 1][j][k][4][0]) - (tmp1 * njac[i - 1][j][k][4][0]);\n      lhs[i][j][k][AA][4][1] = ((-tmp2) * fjac[i - 1][j][k][4][1]) - (tmp1 * njac[i - 1][j][k][4][1]);\n      lhs[i][j][k][AA][4][2] = ((-tmp2) * fjac[i - 1][j][k][4][2]) - (tmp1 * njac[i - 1][j][k][4][2]);\n      lhs[i][j][k][AA][4][3] = ((-tmp2) * fjac[i - 1][j][k][4][3]) - (tmp1 * njac[i - 1][j][k][4][3]);\n      lhs[i][j][k][AA][4][4] = (((-tmp2) * fjac[i - 1][j][k][4][4]) - (tmp1 * njac[i - 1][j][k][4][4])) - (tmp1 * dx5);\n      lhs[i][j][k][BB][0][0] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][0][0])) + ((tmp1 * 2.0) * dx1);\n      lhs[i][j][k][BB][0][1] = (tmp1 * 2.0) * njac[i][j][k][0][1];\n      lhs[i][j][k][BB][0][2] = (tmp1 * 2.0) * njac[i][j][k][0][2];\n      lhs[i][j][k][BB][0][3] = (tmp1 * 2.0) * njac[i][j][k][0][3];\n      lhs[i][j][k][BB][0][4] = (tmp1 * 2.0) * njac[i][j][k][0][4];\n      lhs[i][j][k][BB][1][0] = (tmp1 * 2.0) * njac[i][j][k][1][0];\n      lhs[i][j][k][BB][1][1] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][1][1])) + ((tmp1 * 2.0) * dx2);\n      lhs[i][j][k][BB][1][2] = (tmp1 * 2.0) * njac[i][j][k][1][2];\n      lhs[i][j][k][BB][1][3] = (tmp1 * 2.0) * njac[i][j][k][1][3];\n      lhs[i][j][k][BB][1][4] = (tmp1 * 2.0) * njac[i][j][k][1][4];\n      lhs[i][j][k][BB][2][0] = (tmp1 * 2.0) * njac[i][j][k][2][0];\n      lhs[i][j][k][BB][2][1] = (tmp1 * 2.0) * njac[i][j][k][2][1];\n      lhs[i][j][k][BB][2][2] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][2][2])) + ((tmp1 * 2.0) * dx3);\n      lhs[i][j][k][BB][2][3] = (tmp1 * 2.0) * njac[i][j][k][2][3];\n      lhs[i][j][k][BB][2][4] = (tmp1 * 2.0) * njac[i][j][k][2][4];\n      lhs[i][j][k][BB][3][0] = (tmp1 * 2.0) * njac[i][j][k][3][0];\n      lhs[i][j][k][BB][3][1] = (tmp1 * 2.0) * njac[i][j][k][3][1];\n      lhs[i][j][k][BB][3][2] = (tmp1 * 2.0) * njac[i][j][k][3][2];\n      lhs[i][j][k][BB][3][3] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][3][3])) + ((tmp1 * 2.0) * dx4);\n      lhs[i][j][k][BB][3][4] = (tmp1 * 2.0) * njac[i][j][k][3][4];\n      lhs[i][j][k][BB][4][0] = (tmp1 * 2.0) * njac[i][j][k][4][0];\n      lhs[i][j][k][BB][4][1] = (tmp1 * 2.0) * njac[i][j][k][4][1];\n      lhs[i][j][k][BB][4][2] = (tmp1 * 2.0) * njac[i][j][k][4][2];\n      lhs[i][j][k][BB][4][3] = (tmp1 * 2.0) * njac[i][j][k][4][3];\n      lhs[i][j][k][BB][4][4] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][4][4])) + ((tmp1 * 2.0) * dx5);\n      lhs[i][j][k][CC][0][0] = ((tmp2 * fjac[i + 1][j][k][0][0]) - (tmp1 * njac[i + 1][j][k][0][0])) - (tmp1 * dx1);\n      lhs[i][j][k][CC][0][1] = (tmp2 * fjac[i + 1][j][k][0][1]) - (tmp1 * njac[i + 1][j][k][0][1]);\n      lhs[i][j][k][CC][0][2] = (tmp2 * fjac[i + 1][j][k][0][2]) - (tmp1 * njac[i + 1][j][k][0][2]);\n      lhs[i][j][k][CC][0][3] = (tmp2 * fjac[i + 1][j][k][0][3]) - (tmp1 * njac[i + 1][j][k][0][3]);\n      lhs[i][j][k][CC][0][4] = (tmp2 * fjac[i + 1][j][k][0][4]) - (tmp1 * njac[i + 1][j][k][0][4]);\n      lhs[i][j][k][CC][1][0] = (tmp2 * fjac[i + 1][j][k][1][0]) - (tmp1 * njac[i + 1][j][k][1][0]);\n      lhs[i][j][k][CC][1][1] = ((tmp2 * fjac[i + 1][j][k][1][1]) - (tmp1 * njac[i + 1][j][k][1][1])) - (tmp1 * dx2);\n      lhs[i][j][k][CC][1][2] = (tmp2 * fjac[i + 1][j][k][1][2]) - (tmp1 * njac[i + 1][j][k][1][2]);\n      lhs[i][j][k][CC][1][3] = (tmp2 * fjac[i + 1][j][k][1][3]) - (tmp1 * njac[i + 1][j][k][1][3]);\n      lhs[i][j][k][CC][1][4] = (tmp2 * fjac[i + 1][j][k][1][4]) - (tmp1 * njac[i + 1][j][k][1][4]);\n      lhs[i][j][k][CC][2][0] = (tmp2 * fjac[i + 1][j][k][2][0]) - (tmp1 * njac[i + 1][j][k][2][0]);\n      lhs[i][j][k][CC][2][1] = (tmp2 * fjac[i + 1][j][k][2][1]) - (tmp1 * njac[i + 1][j][k][2][1]);\n      lhs[i][j][k][CC][2][2] = ((tmp2 * fjac[i + 1][j][k][2][2]) - (tmp1 * njac[i + 1][j][k][2][2])) - (tmp1 * dx3);\n      lhs[i][j][k][CC][2][3] = (tmp2 * fjac[i + 1][j][k][2][3]) - (tmp1 * njac[i + 1][j][k][2][3]);\n      lhs[i][j][k][CC][2][4] = (tmp2 * fjac[i + 1][j][k][2][4]) - (tmp1 * njac[i + 1][j][k][2][4]);\n      lhs[i][j][k][CC][3][0] = (tmp2 * fjac[i + 1][j][k][3][0]) - (tmp1 * njac[i + 1][j][k][3][0]);\n      lhs[i][j][k][CC][3][1] = (tmp2 * fjac[i + 1][j][k][3][1]) - (tmp1 * njac[i + 1][j][k][3][1]);\n      lhs[i][j][k][CC][3][2] = (tmp2 * fjac[i + 1][j][k][3][2]) - (tmp1 * njac[i + 1][j][k][3][2]);\n      lhs[i][j][k][CC][3][3] = ((tmp2 * fjac[i + 1][j][k][3][3]) - (tmp1 * njac[i + 1][j][k][3][3])) - (tmp1 * dx4);\n      lhs[i][j][k][CC][3][4] = (tmp2 * fjac[i + 1][j][k][3][4]) - (tmp1 * njac[i + 1][j][k][3][4]);\n      lhs[i][j][k][CC][4][0] = (tmp2 * fjac[i + 1][j][k][4][0]) - (tmp1 * njac[i + 1][j][k][4][0]);\n      lhs[i][j][k][CC][4][1] = (tmp2 * fjac[i + 1][j][k][4][1]) - (tmp1 * njac[i + 1][j][k][4][1]);\n      lhs[i][j][k][CC][4][2] = (tmp2 * fjac[i + 1][j][k][4][2]) - (tmp1 * njac[i + 1][j][k][4][2]);\n      lhs[i][j][k][CC][4][3] = (tmp2 * fjac[i + 1][j][k][4][3]) - (tmp1 * njac[i + 1][j][k][4][3]);\n      lhs[i][j][k][CC][4][4] = ((tmp2 * fjac[i + 1][j][k][4][4]) - (tmp1 * njac[i + 1][j][k][4][4])) - (tmp1 * dx5);\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/13"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      tmp1 = 1.0 / u[i][j][k][0];\n      tmp2 = tmp1 * tmp1;\n      tmp3 = tmp1 * tmp2;\n      fjac[i][j][k][0][0] = 0.0;\n      fjac[i][j][k][0][1] = 0.0;\n      fjac[i][j][k][0][2] = 1.0;\n      fjac[i][j][k][0][3] = 0.0;\n      fjac[i][j][k][0][4] = 0.0;\n      fjac[i][j][k][1][0] = (-(u[i][j][k][1] * u[i][j][k][2])) * tmp2;\n      fjac[i][j][k][1][1] = u[i][j][k][2] * tmp1;\n      fjac[i][j][k][1][2] = u[i][j][k][1] * tmp1;\n      fjac[i][j][k][1][3] = 0.0;\n      fjac[i][j][k][1][4] = 0.0;\n      fjac[i][j][k][2][0] = (-((u[i][j][k][2] * u[i][j][k][2]) * tmp2)) + ((0.50 * c2) * ((((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3])) * tmp2));\n      fjac[i][j][k][2][1] = ((-c2) * u[i][j][k][1]) * tmp1;\n      fjac[i][j][k][2][2] = ((2.0 - c2) * u[i][j][k][2]) * tmp1;\n      fjac[i][j][k][2][3] = ((-c2) * u[i][j][k][3]) * tmp1;\n      fjac[i][j][k][2][4] = c2;\n      fjac[i][j][k][3][0] = (-(u[i][j][k][2] * u[i][j][k][3])) * tmp2;\n      fjac[i][j][k][3][1] = 0.0;\n      fjac[i][j][k][3][2] = u[i][j][k][3] * tmp1;\n      fjac[i][j][k][3][3] = u[i][j][k][2] * tmp1;\n      fjac[i][j][k][3][4] = 0.0;\n      fjac[i][j][k][4][0] = ((((c2 * (((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) * tmp2) - ((c1 * u[i][j][k][4]) * tmp1)) * u[i][j][k][2]) * tmp1;\n      fjac[i][j][k][4][1] = (((-c2) * u[i][j][k][1]) * u[i][j][k][2]) * tmp2;\n      fjac[i][j][k][4][2] = ((c1 * u[i][j][k][4]) * tmp1) - ((0.50 * c2) * ((((u[i][j][k][1] * u[i][j][k][1]) + ((3.0 * u[i][j][k][2]) * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3])) * tmp2));\n      fjac[i][j][k][4][3] = ((-c2) * (u[i][j][k][2] * u[i][j][k][3])) * tmp2;\n      fjac[i][j][k][4][4] = (c1 * u[i][j][k][2]) * tmp1;\n      njac[i][j][k][0][0] = 0.0;\n      njac[i][j][k][0][1] = 0.0;\n      njac[i][j][k][0][2] = 0.0;\n      njac[i][j][k][0][3] = 0.0;\n      njac[i][j][k][0][4] = 0.0;\n      njac[i][j][k][1][0] = ((-c3c4) * tmp2) * u[i][j][k][1];\n      njac[i][j][k][1][1] = c3c4 * tmp1;\n      njac[i][j][k][1][2] = 0.0;\n      njac[i][j][k][1][3] = 0.0;\n      njac[i][j][k][1][4] = 0.0;\n      njac[i][j][k][2][0] = (((-con43) * c3c4) * tmp2) * u[i][j][k][2];\n      njac[i][j][k][2][1] = 0.0;\n      njac[i][j][k][2][2] = (con43 * c3c4) * tmp1;\n      njac[i][j][k][2][3] = 0.0;\n      njac[i][j][k][2][4] = 0.0;\n      njac[i][j][k][3][0] = ((-c3c4) * tmp2) * u[i][j][k][3];\n      njac[i][j][k][3][1] = 0.0;\n      njac[i][j][k][3][2] = 0.0;\n      njac[i][j][k][3][3] = c3c4 * tmp1;\n      njac[i][j][k][3][4] = 0.0;\n      njac[i][j][k][4][0] = (((((-(c3c4 - c1345)) * tmp3) * pow2(u[i][j][k][1])) - ((((con43 * c3c4) - c1345) * tmp3) * pow2(u[i][j][k][2]))) - (((c3c4 - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4]);\n      njac[i][j][k][4][1] = ((c3c4 - c1345) * tmp2) * u[i][j][k][1];\n      njac[i][j][k][4][2] = (((con43 * c3c4) - c1345) * tmp2) * u[i][j][k][2];\n      njac[i][j][k][4][3] = ((c3c4 - c1345) * tmp2) * u[i][j][k][3];\n      njac[i][j][k][4][4] = c1345 * tmp1;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/14"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      tmp1 = dt * ty1;\n      tmp2 = dt * ty2;\n      lhs[i][j][k][AA][0][0] = (((-tmp2) * fjac[i][j - 1][k][0][0]) - (tmp1 * njac[i][j - 1][k][0][0])) - (tmp1 * dy1);\n      lhs[i][j][k][AA][0][1] = ((-tmp2) * fjac[i][j - 1][k][0][1]) - (tmp1 * njac[i][j - 1][k][0][1]);\n      lhs[i][j][k][AA][0][2] = ((-tmp2) * fjac[i][j - 1][k][0][2]) - (tmp1 * njac[i][j - 1][k][0][2]);\n      lhs[i][j][k][AA][0][3] = ((-tmp2) * fjac[i][j - 1][k][0][3]) - (tmp1 * njac[i][j - 1][k][0][3]);\n      lhs[i][j][k][AA][0][4] = ((-tmp2) * fjac[i][j - 1][k][0][4]) - (tmp1 * njac[i][j - 1][k][0][4]);\n      lhs[i][j][k][AA][1][0] = ((-tmp2) * fjac[i][j - 1][k][1][0]) - (tmp1 * njac[i][j - 1][k][1][0]);\n      lhs[i][j][k][AA][1][1] = (((-tmp2) * fjac[i][j - 1][k][1][1]) - (tmp1 * njac[i][j - 1][k][1][1])) - (tmp1 * dy2);\n      lhs[i][j][k][AA][1][2] = ((-tmp2) * fjac[i][j - 1][k][1][2]) - (tmp1 * njac[i][j - 1][k][1][2]);\n      lhs[i][j][k][AA][1][3] = ((-tmp2) * fjac[i][j - 1][k][1][3]) - (tmp1 * njac[i][j - 1][k][1][3]);\n      lhs[i][j][k][AA][1][4] = ((-tmp2) * fjac[i][j - 1][k][1][4]) - (tmp1 * njac[i][j - 1][k][1][4]);\n      lhs[i][j][k][AA][2][0] = ((-tmp2) * fjac[i][j - 1][k][2][0]) - (tmp1 * njac[i][j - 1][k][2][0]);\n      lhs[i][j][k][AA][2][1] = ((-tmp2) * fjac[i][j - 1][k][2][1]) - (tmp1 * njac[i][j - 1][k][2][1]);\n      lhs[i][j][k][AA][2][2] = (((-tmp2) * fjac[i][j - 1][k][2][2]) - (tmp1 * njac[i][j - 1][k][2][2])) - (tmp1 * dy3);\n      lhs[i][j][k][AA][2][3] = ((-tmp2) * fjac[i][j - 1][k][2][3]) - (tmp1 * njac[i][j - 1][k][2][3]);\n      lhs[i][j][k][AA][2][4] = ((-tmp2) * fjac[i][j - 1][k][2][4]) - (tmp1 * njac[i][j - 1][k][2][4]);\n      lhs[i][j][k][AA][3][0] = ((-tmp2) * fjac[i][j - 1][k][3][0]) - (tmp1 * njac[i][j - 1][k][3][0]);\n      lhs[i][j][k][AA][3][1] = ((-tmp2) * fjac[i][j - 1][k][3][1]) - (tmp1 * njac[i][j - 1][k][3][1]);\n      lhs[i][j][k][AA][3][2] = ((-tmp2) * fjac[i][j - 1][k][3][2]) - (tmp1 * njac[i][j - 1][k][3][2]);\n      lhs[i][j][k][AA][3][3] = (((-tmp2) * fjac[i][j - 1][k][3][3]) - (tmp1 * njac[i][j - 1][k][3][3])) - (tmp1 * dy4);\n      lhs[i][j][k][AA][3][4] = ((-tmp2) * fjac[i][j - 1][k][3][4]) - (tmp1 * njac[i][j - 1][k][3][4]);\n      lhs[i][j][k][AA][4][0] = ((-tmp2) * fjac[i][j - 1][k][4][0]) - (tmp1 * njac[i][j - 1][k][4][0]);\n      lhs[i][j][k][AA][4][1] = ((-tmp2) * fjac[i][j - 1][k][4][1]) - (tmp1 * njac[i][j - 1][k][4][1]);\n      lhs[i][j][k][AA][4][2] = ((-tmp2) * fjac[i][j - 1][k][4][2]) - (tmp1 * njac[i][j - 1][k][4][2]);\n      lhs[i][j][k][AA][4][3] = ((-tmp2) * fjac[i][j - 1][k][4][3]) - (tmp1 * njac[i][j - 1][k][4][3]);\n      lhs[i][j][k][AA][4][4] = (((-tmp2) * fjac[i][j - 1][k][4][4]) - (tmp1 * njac[i][j - 1][k][4][4])) - (tmp1 * dy5);\n      lhs[i][j][k][BB][0][0] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][0][0])) + ((tmp1 * 2.0) * dy1);\n      lhs[i][j][k][BB][0][1] = (tmp1 * 2.0) * njac[i][j][k][0][1];\n      lhs[i][j][k][BB][0][2] = (tmp1 * 2.0) * njac[i][j][k][0][2];\n      lhs[i][j][k][BB][0][3] = (tmp1 * 2.0) * njac[i][j][k][0][3];\n      lhs[i][j][k][BB][0][4] = (tmp1 * 2.0) * njac[i][j][k][0][4];\n      lhs[i][j][k][BB][1][0] = (tmp1 * 2.0) * njac[i][j][k][1][0];\n      lhs[i][j][k][BB][1][1] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][1][1])) + ((tmp1 * 2.0) * dy2);\n      lhs[i][j][k][BB][1][2] = (tmp1 * 2.0) * njac[i][j][k][1][2];\n      lhs[i][j][k][BB][1][3] = (tmp1 * 2.0) * njac[i][j][k][1][3];\n      lhs[i][j][k][BB][1][4] = (tmp1 * 2.0) * njac[i][j][k][1][4];\n      lhs[i][j][k][BB][2][0] = (tmp1 * 2.0) * njac[i][j][k][2][0];\n      lhs[i][j][k][BB][2][1] = (tmp1 * 2.0) * njac[i][j][k][2][1];\n      lhs[i][j][k][BB][2][2] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][2][2])) + ((tmp1 * 2.0) * dy3);\n      lhs[i][j][k][BB][2][3] = (tmp1 * 2.0) * njac[i][j][k][2][3];\n      lhs[i][j][k][BB][2][4] = (tmp1 * 2.0) * njac[i][j][k][2][4];\n      lhs[i][j][k][BB][3][0] = (tmp1 * 2.0) * njac[i][j][k][3][0];\n      lhs[i][j][k][BB][3][1] = (tmp1 * 2.0) * njac[i][j][k][3][1];\n      lhs[i][j][k][BB][3][2] = (tmp1 * 2.0) * njac[i][j][k][3][2];\n      lhs[i][j][k][BB][3][3] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][3][3])) + ((tmp1 * 2.0) * dy4);\n      lhs[i][j][k][BB][3][4] = (tmp1 * 2.0) * njac[i][j][k][3][4];\n      lhs[i][j][k][BB][4][0] = (tmp1 * 2.0) * njac[i][j][k][4][0];\n      lhs[i][j][k][BB][4][1] = (tmp1 * 2.0) * njac[i][j][k][4][1];\n      lhs[i][j][k][BB][4][2] = (tmp1 * 2.0) * njac[i][j][k][4][2];\n      lhs[i][j][k][BB][4][3] = (tmp1 * 2.0) * njac[i][j][k][4][3];\n      lhs[i][j][k][BB][4][4] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][4][4])) + ((tmp1 * 2.0) * dy5);\n      lhs[i][j][k][CC][0][0] = ((tmp2 * fjac[i][j + 1][k][0][0]) - (tmp1 * njac[i][j + 1][k][0][0])) - (tmp1 * dy1);\n      lhs[i][j][k][CC][0][1] = (tmp2 * fjac[i][j + 1][k][0][1]) - (tmp1 * njac[i][j + 1][k][0][1]);\n      lhs[i][j][k][CC][0][2] = (tmp2 * fjac[i][j + 1][k][0][2]) - (tmp1 * njac[i][j + 1][k][0][2]);\n      lhs[i][j][k][CC][0][3] = (tmp2 * fjac[i][j + 1][k][0][3]) - (tmp1 * njac[i][j + 1][k][0][3]);\n      lhs[i][j][k][CC][0][4] = (tmp2 * fjac[i][j + 1][k][0][4]) - (tmp1 * njac[i][j + 1][k][0][4]);\n      lhs[i][j][k][CC][1][0] = (tmp2 * fjac[i][j + 1][k][1][0]) - (tmp1 * njac[i][j + 1][k][1][0]);\n      lhs[i][j][k][CC][1][1] = ((tmp2 * fjac[i][j + 1][k][1][1]) - (tmp1 * njac[i][j + 1][k][1][1])) - (tmp1 * dy2);\n      lhs[i][j][k][CC][1][2] = (tmp2 * fjac[i][j + 1][k][1][2]) - (tmp1 * njac[i][j + 1][k][1][2]);\n      lhs[i][j][k][CC][1][3] = (tmp2 * fjac[i][j + 1][k][1][3]) - (tmp1 * njac[i][j + 1][k][1][3]);\n      lhs[i][j][k][CC][1][4] = (tmp2 * fjac[i][j + 1][k][1][4]) - (tmp1 * njac[i][j + 1][k][1][4]);\n      lhs[i][j][k][CC][2][0] = (tmp2 * fjac[i][j + 1][k][2][0]) - (tmp1 * njac[i][j + 1][k][2][0]);\n      lhs[i][j][k][CC][2][1] = (tmp2 * fjac[i][j + 1][k][2][1]) - (tmp1 * njac[i][j + 1][k][2][1]);\n      lhs[i][j][k][CC][2][2] = ((tmp2 * fjac[i][j + 1][k][2][2]) - (tmp1 * njac[i][j + 1][k][2][2])) - (tmp1 * dy3);\n      lhs[i][j][k][CC][2][3] = (tmp2 * fjac[i][j + 1][k][2][3]) - (tmp1 * njac[i][j + 1][k][2][3]);\n      lhs[i][j][k][CC][2][4] = (tmp2 * fjac[i][j + 1][k][2][4]) - (tmp1 * njac[i][j + 1][k][2][4]);\n      lhs[i][j][k][CC][3][0] = (tmp2 * fjac[i][j + 1][k][3][0]) - (tmp1 * njac[i][j + 1][k][3][0]);\n      lhs[i][j][k][CC][3][1] = (tmp2 * fjac[i][j + 1][k][3][1]) - (tmp1 * njac[i][j + 1][k][3][1]);\n      lhs[i][j][k][CC][3][2] = (tmp2 * fjac[i][j + 1][k][3][2]) - (tmp1 * njac[i][j + 1][k][3][2]);\n      lhs[i][j][k][CC][3][3] = ((tmp2 * fjac[i][j + 1][k][3][3]) - (tmp1 * njac[i][j + 1][k][3][3])) - (tmp1 * dy4);\n      lhs[i][j][k][CC][3][4] = (tmp2 * fjac[i][j + 1][k][3][4]) - (tmp1 * njac[i][j + 1][k][3][4]);\n      lhs[i][j][k][CC][4][0] = (tmp2 * fjac[i][j + 1][k][4][0]) - (tmp1 * njac[i][j + 1][k][4][0]);\n      lhs[i][j][k][CC][4][1] = (tmp2 * fjac[i][j + 1][k][4][1]) - (tmp1 * njac[i][j + 1][k][4][1]);\n      lhs[i][j][k][CC][4][2] = (tmp2 * fjac[i][j + 1][k][4][2]) - (tmp1 * njac[i][j + 1][k][4][2]);\n      lhs[i][j][k][CC][4][3] = (tmp2 * fjac[i][j + 1][k][4][3]) - (tmp1 * njac[i][j + 1][k][4][3]);\n      lhs[i][j][k][CC][4][4] = ((tmp2 * fjac[i][j + 1][k][4][4]) - (tmp1 * njac[i][j + 1][k][4][4])) - (tmp1 * dy5);\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/15"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      tmp1 = 1.0 / u[i][j][k][0];\n      tmp2 = tmp1 * tmp1;\n      tmp3 = tmp1 * tmp2;\n      fjac[i][j][k][0][0] = 0.0;\n      fjac[i][j][k][0][1] = 0.0;\n      fjac[i][j][k][0][2] = 0.0;\n      fjac[i][j][k][0][3] = 1.0;\n      fjac[i][j][k][0][4] = 0.0;\n      fjac[i][j][k][1][0] = (-(u[i][j][k][1] * u[i][j][k][3])) * tmp2;\n      fjac[i][j][k][1][1] = u[i][j][k][3] * tmp1;\n      fjac[i][j][k][1][2] = 0.0;\n      fjac[i][j][k][1][3] = u[i][j][k][1] * tmp1;\n      fjac[i][j][k][1][4] = 0.0;\n      fjac[i][j][k][2][0] = (-(u[i][j][k][2] * u[i][j][k][3])) * tmp2;\n      fjac[i][j][k][2][1] = 0.0;\n      fjac[i][j][k][2][2] = u[i][j][k][3] * tmp1;\n      fjac[i][j][k][2][3] = u[i][j][k][2] * tmp1;\n      fjac[i][j][k][2][4] = 0.0;\n      fjac[i][j][k][3][0] = (-((u[i][j][k][3] * u[i][j][k][3]) * tmp2)) + ((0.50 * c2) * ((((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3])) * tmp2));\n      fjac[i][j][k][3][1] = ((-c2) * u[i][j][k][1]) * tmp1;\n      fjac[i][j][k][3][2] = ((-c2) * u[i][j][k][2]) * tmp1;\n      fjac[i][j][k][3][3] = ((2.0 - c2) * u[i][j][k][3]) * tmp1;\n      fjac[i][j][k][3][4] = c2;\n      fjac[i][j][k][4][0] = (((c2 * (((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) * tmp2) - (c1 * (u[i][j][k][4] * tmp1))) * (u[i][j][k][3] * tmp1);\n      fjac[i][j][k][4][1] = ((-c2) * (u[i][j][k][1] * u[i][j][k][3])) * tmp2;\n      fjac[i][j][k][4][2] = ((-c2) * (u[i][j][k][2] * u[i][j][k][3])) * tmp2;\n      fjac[i][j][k][4][3] = (c1 * (u[i][j][k][4] * tmp1)) - ((0.50 * c2) * ((((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + ((3.0 * u[i][j][k][3]) * u[i][j][k][3])) * tmp2));\n      fjac[i][j][k][4][4] = (c1 * u[i][j][k][3]) * tmp1;\n      njac[i][j][k][0][0] = 0.0;\n      njac[i][j][k][0][1] = 0.0;\n      njac[i][j][k][0][2] = 0.0;\n      njac[i][j][k][0][3] = 0.0;\n      njac[i][j][k][0][4] = 0.0;\n      njac[i][j][k][1][0] = ((-c3c4) * tmp2) * u[i][j][k][1];\n      njac[i][j][k][1][1] = c3c4 * tmp1;\n      njac[i][j][k][1][2] = 0.0;\n      njac[i][j][k][1][3] = 0.0;\n      njac[i][j][k][1][4] = 0.0;\n      njac[i][j][k][2][0] = ((-c3c4) * tmp2) * u[i][j][k][2];\n      njac[i][j][k][2][1] = 0.0;\n      njac[i][j][k][2][2] = c3c4 * tmp1;\n      njac[i][j][k][2][3] = 0.0;\n      njac[i][j][k][2][4] = 0.0;\n      njac[i][j][k][3][0] = (((-con43) * c3c4) * tmp2) * u[i][j][k][3];\n      njac[i][j][k][3][1] = 0.0;\n      njac[i][j][k][3][2] = 0.0;\n      njac[i][j][k][3][3] = ((con43 * c3) * c4) * tmp1;\n      njac[i][j][k][3][4] = 0.0;\n      njac[i][j][k][4][0] = (((((-(c3c4 - c1345)) * tmp3) * pow2(u[i][j][k][1])) - (((c3c4 - c1345) * tmp3) * pow2(u[i][j][k][2]))) - ((((con43 * c3c4) - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4]);\n      njac[i][j][k][4][1] = ((c3c4 - c1345) * tmp2) * u[i][j][k][1];\n      njac[i][j][k][4][2] = ((c3c4 - c1345) * tmp2) * u[i][j][k][2];\n      njac[i][j][k][4][3] = (((con43 * c3c4) - c1345) * tmp2) * u[i][j][k][3];\n      njac[i][j][k][4][4] = c1345 * tmp1;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/16"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      tmp1 = dt * tz1;\n      tmp2 = dt * tz2;\n      lhs[i][j][k][AA][0][0] = (((-tmp2) * fjac[i][j][k - 1][0][0]) - (tmp1 * njac[i][j][k - 1][0][0])) - (tmp1 * dz1);\n      lhs[i][j][k][AA][0][1] = ((-tmp2) * fjac[i][j][k - 1][0][1]) - (tmp1 * njac[i][j][k - 1][0][1]);\n      lhs[i][j][k][AA][0][2] = ((-tmp2) * fjac[i][j][k - 1][0][2]) - (tmp1 * njac[i][j][k - 1][0][2]);\n      lhs[i][j][k][AA][0][3] = ((-tmp2) * fjac[i][j][k - 1][0][3]) - (tmp1 * njac[i][j][k - 1][0][3]);\n      lhs[i][j][k][AA][0][4] = ((-tmp2) * fjac[i][j][k - 1][0][4]) - (tmp1 * njac[i][j][k - 1][0][4]);\n      lhs[i][j][k][AA][1][0] = ((-tmp2) * fjac[i][j][k - 1][1][0]) - (tmp1 * njac[i][j][k - 1][1][0]);\n      lhs[i][j][k][AA][1][1] = (((-tmp2) * fjac[i][j][k - 1][1][1]) - (tmp1 * njac[i][j][k - 1][1][1])) - (tmp1 * dz2);\n      lhs[i][j][k][AA][1][2] = ((-tmp2) * fjac[i][j][k - 1][1][2]) - (tmp1 * njac[i][j][k - 1][1][2]);\n      lhs[i][j][k][AA][1][3] = ((-tmp2) * fjac[i][j][k - 1][1][3]) - (tmp1 * njac[i][j][k - 1][1][3]);\n      lhs[i][j][k][AA][1][4] = ((-tmp2) * fjac[i][j][k - 1][1][4]) - (tmp1 * njac[i][j][k - 1][1][4]);\n      lhs[i][j][k][AA][2][0] = ((-tmp2) * fjac[i][j][k - 1][2][0]) - (tmp1 * njac[i][j][k - 1][2][0]);\n      lhs[i][j][k][AA][2][1] = ((-tmp2) * fjac[i][j][k - 1][2][1]) - (tmp1 * njac[i][j][k - 1][2][1]);\n      lhs[i][j][k][AA][2][2] = (((-tmp2) * fjac[i][j][k - 1][2][2]) - (tmp1 * njac[i][j][k - 1][2][2])) - (tmp1 * dz3);\n      lhs[i][j][k][AA][2][3] = ((-tmp2) * fjac[i][j][k - 1][2][3]) - (tmp1 * njac[i][j][k - 1][2][3]);\n      lhs[i][j][k][AA][2][4] = ((-tmp2) * fjac[i][j][k - 1][2][4]) - (tmp1 * njac[i][j][k - 1][2][4]);\n      lhs[i][j][k][AA][3][0] = ((-tmp2) * fjac[i][j][k - 1][3][0]) - (tmp1 * njac[i][j][k - 1][3][0]);\n      lhs[i][j][k][AA][3][1] = ((-tmp2) * fjac[i][j][k - 1][3][1]) - (tmp1 * njac[i][j][k - 1][3][1]);\n      lhs[i][j][k][AA][3][2] = ((-tmp2) * fjac[i][j][k - 1][3][2]) - (tmp1 * njac[i][j][k - 1][3][2]);\n      lhs[i][j][k][AA][3][3] = (((-tmp2) * fjac[i][j][k - 1][3][3]) - (tmp1 * njac[i][j][k - 1][3][3])) - (tmp1 * dz4);\n      lhs[i][j][k][AA][3][4] = ((-tmp2) * fjac[i][j][k - 1][3][4]) - (tmp1 * njac[i][j][k - 1][3][4]);\n      lhs[i][j][k][AA][4][0] = ((-tmp2) * fjac[i][j][k - 1][4][0]) - (tmp1 * njac[i][j][k - 1][4][0]);\n      lhs[i][j][k][AA][4][1] = ((-tmp2) * fjac[i][j][k - 1][4][1]) - (tmp1 * njac[i][j][k - 1][4][1]);\n      lhs[i][j][k][AA][4][2] = ((-tmp2) * fjac[i][j][k - 1][4][2]) - (tmp1 * njac[i][j][k - 1][4][2]);\n      lhs[i][j][k][AA][4][3] = ((-tmp2) * fjac[i][j][k - 1][4][3]) - (tmp1 * njac[i][j][k - 1][4][3]);\n      lhs[i][j][k][AA][4][4] = (((-tmp2) * fjac[i][j][k - 1][4][4]) - (tmp1 * njac[i][j][k - 1][4][4])) - (tmp1 * dz5);\n      lhs[i][j][k][BB][0][0] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][0][0])) + ((tmp1 * 2.0) * dz1);\n      lhs[i][j][k][BB][0][1] = (tmp1 * 2.0) * njac[i][j][k][0][1];\n      lhs[i][j][k][BB][0][2] = (tmp1 * 2.0) * njac[i][j][k][0][2];\n      lhs[i][j][k][BB][0][3] = (tmp1 * 2.0) * njac[i][j][k][0][3];\n      lhs[i][j][k][BB][0][4] = (tmp1 * 2.0) * njac[i][j][k][0][4];\n      lhs[i][j][k][BB][1][0] = (tmp1 * 2.0) * njac[i][j][k][1][0];\n      lhs[i][j][k][BB][1][1] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][1][1])) + ((tmp1 * 2.0) * dz2);\n      lhs[i][j][k][BB][1][2] = (tmp1 * 2.0) * njac[i][j][k][1][2];\n      lhs[i][j][k][BB][1][3] = (tmp1 * 2.0) * njac[i][j][k][1][3];\n      lhs[i][j][k][BB][1][4] = (tmp1 * 2.0) * njac[i][j][k][1][4];\n      lhs[i][j][k][BB][2][0] = (tmp1 * 2.0) * njac[i][j][k][2][0];\n      lhs[i][j][k][BB][2][1] = (tmp1 * 2.0) * njac[i][j][k][2][1];\n      lhs[i][j][k][BB][2][2] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][2][2])) + ((tmp1 * 2.0) * dz3);\n      lhs[i][j][k][BB][2][3] = (tmp1 * 2.0) * njac[i][j][k][2][3];\n      lhs[i][j][k][BB][2][4] = (tmp1 * 2.0) * njac[i][j][k][2][4];\n      lhs[i][j][k][BB][3][0] = (tmp1 * 2.0) * njac[i][j][k][3][0];\n      lhs[i][j][k][BB][3][1] = (tmp1 * 2.0) * njac[i][j][k][3][1];\n      lhs[i][j][k][BB][3][2] = (tmp1 * 2.0) * njac[i][j][k][3][2];\n      lhs[i][j][k][BB][3][3] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][3][3])) + ((tmp1 * 2.0) * dz4);\n      lhs[i][j][k][BB][3][4] = (tmp1 * 2.0) * njac[i][j][k][3][4];\n      lhs[i][j][k][BB][4][0] = (tmp1 * 2.0) * njac[i][j][k][4][0];\n      lhs[i][j][k][BB][4][1] = (tmp1 * 2.0) * njac[i][j][k][4][1];\n      lhs[i][j][k][BB][4][2] = (tmp1 * 2.0) * njac[i][j][k][4][2];\n      lhs[i][j][k][BB][4][3] = (tmp1 * 2.0) * njac[i][j][k][4][3];\n      lhs[i][j][k][BB][4][4] = (1.0 + ((tmp1 * 2.0) * njac[i][j][k][4][4])) + ((tmp1 * 2.0) * dz5);\n      lhs[i][j][k][CC][0][0] = ((tmp2 * fjac[i][j][k + 1][0][0]) - (tmp1 * njac[i][j][k + 1][0][0])) - (tmp1 * dz1);\n      lhs[i][j][k][CC][0][1] = (tmp2 * fjac[i][j][k + 1][0][1]) - (tmp1 * njac[i][j][k + 1][0][1]);\n      lhs[i][j][k][CC][0][2] = (tmp2 * fjac[i][j][k + 1][0][2]) - (tmp1 * njac[i][j][k + 1][0][2]);\n      lhs[i][j][k][CC][0][3] = (tmp2 * fjac[i][j][k + 1][0][3]) - (tmp1 * njac[i][j][k + 1][0][3]);\n      lhs[i][j][k][CC][0][4] = (tmp2 * fjac[i][j][k + 1][0][4]) - (tmp1 * njac[i][j][k + 1][0][4]);\n      lhs[i][j][k][CC][1][0] = (tmp2 * fjac[i][j][k + 1][1][0]) - (tmp1 * njac[i][j][k + 1][1][0]);\n      lhs[i][j][k][CC][1][1] = ((tmp2 * fjac[i][j][k + 1][1][1]) - (tmp1 * njac[i][j][k + 1][1][1])) - (tmp1 * dz2);\n      lhs[i][j][k][CC][1][2] = (tmp2 * fjac[i][j][k + 1][1][2]) - (tmp1 * njac[i][j][k + 1][1][2]);\n      lhs[i][j][k][CC][1][3] = (tmp2 * fjac[i][j][k + 1][1][3]) - (tmp1 * njac[i][j][k + 1][1][3]);\n      lhs[i][j][k][CC][1][4] = (tmp2 * fjac[i][j][k + 1][1][4]) - (tmp1 * njac[i][j][k + 1][1][4]);\n      lhs[i][j][k][CC][2][0] = (tmp2 * fjac[i][j][k + 1][2][0]) - (tmp1 * njac[i][j][k + 1][2][0]);\n      lhs[i][j][k][CC][2][1] = (tmp2 * fjac[i][j][k + 1][2][1]) - (tmp1 * njac[i][j][k + 1][2][1]);\n      lhs[i][j][k][CC][2][2] = ((tmp2 * fjac[i][j][k + 1][2][2]) - (tmp1 * njac[i][j][k + 1][2][2])) - (tmp1 * dz3);\n      lhs[i][j][k][CC][2][3] = (tmp2 * fjac[i][j][k + 1][2][3]) - (tmp1 * njac[i][j][k + 1][2][3]);\n      lhs[i][j][k][CC][2][4] = (tmp2 * fjac[i][j][k + 1][2][4]) - (tmp1 * njac[i][j][k + 1][2][4]);\n      lhs[i][j][k][CC][3][0] = (tmp2 * fjac[i][j][k + 1][3][0]) - (tmp1 * njac[i][j][k + 1][3][0]);\n      lhs[i][j][k][CC][3][1] = (tmp2 * fjac[i][j][k + 1][3][1]) - (tmp1 * njac[i][j][k + 1][3][1]);\n      lhs[i][j][k][CC][3][2] = (tmp2 * fjac[i][j][k + 1][3][2]) - (tmp1 * njac[i][j][k + 1][3][2]);\n      lhs[i][j][k][CC][3][3] = ((tmp2 * fjac[i][j][k + 1][3][3]) - (tmp1 * njac[i][j][k + 1][3][3])) - (tmp1 * dz4);\n      lhs[i][j][k][CC][3][4] = (tmp2 * fjac[i][j][k + 1][3][4]) - (tmp1 * njac[i][j][k + 1][3][4]);\n      lhs[i][j][k][CC][4][0] = (tmp2 * fjac[i][j][k + 1][4][0]) - (tmp1 * njac[i][j][k + 1][4][0]);\n      lhs[i][j][k][CC][4][1] = (tmp2 * fjac[i][j][k + 1][4][1]) - (tmp1 * njac[i][j][k + 1][4][1]);\n      lhs[i][j][k][CC][4][2] = (tmp2 * fjac[i][j][k + 1][4][2]) - (tmp1 * njac[i][j][k + 1][4][2]);\n      lhs[i][j][k][CC][4][3] = (tmp2 * fjac[i][j][k + 1][4][3]) - (tmp1 * njac[i][j][k + 1][4][3]);\n      lhs[i][j][k][CC][4][4] = ((tmp2 * fjac[i][j][k + 1][4][4]) - (tmp1 * njac[i][j][k + 1][4][4])) - (tmp1 * dz5);\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/17"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      rho_inv = 1.0 / u[i][j][k][0];\n      rho_i[i][j][k] = rho_inv;\n      us[i][j][k] = u[i][j][k][1] * rho_inv;\n      vs[i][j][k] = u[i][j][k][2] * rho_inv;\n      ws[i][j][k] = u[i][j][k][3] * rho_inv;\n      square[i][j][k] = (0.5 * (((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) * rho_inv;\n      qs[i][j][k] = square[i][j][k] * rho_inv;\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/18"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rhs[i][j][k][m] = forcing[i][j][k][m];\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/19"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      uijk = us[i][j][k];\n      up1 = us[i + 1][j][k];\n      um1 = us[i - 1][j][k];\n      rhs[i][j][k][0] = (rhs[i][j][k][0] + (dx1tx1 * ((u[i + 1][j][k][0] - (2.0 * u[i][j][k][0])) + u[i - 1][j][k][0]))) - (tx2 * (u[i + 1][j][k][1] - u[i - 1][j][k][1]));\n      rhs[i][j][k][1] = ((rhs[i][j][k][1] + (dx2tx1 * ((u[i + 1][j][k][1] - (2.0 * u[i][j][k][1])) + u[i - 1][j][k][1]))) + ((xxcon2 * con43) * ((up1 - (2.0 * uijk)) + um1))) - (tx2 * (((u[i + 1][j][k][1] * up1) - (u[i - 1][j][k][1] * um1)) + ((((u[i + 1][j][k][4] - square[i + 1][j][k]) - u[i - 1][j][k][4]) + square[i - 1][j][k]) * c2)));\n      rhs[i][j][k][2] = ((rhs[i][j][k][2] + (dx3tx1 * ((u[i + 1][j][k][2] - (2.0 * u[i][j][k][2])) + u[i - 1][j][k][2]))) + (xxcon2 * ((vs[i + 1][j][k] - (2.0 * vs[i][j][k])) + vs[i - 1][j][k]))) - (tx2 * ((u[i + 1][j][k][2] * up1) - (u[i - 1][j][k][2] * um1)));\n      rhs[i][j][k][3] = ((rhs[i][j][k][3] + (dx4tx1 * ((u[i + 1][j][k][3] - (2.0 * u[i][j][k][3])) + u[i - 1][j][k][3]))) + (xxcon2 * ((ws[i + 1][j][k] - (2.0 * ws[i][j][k])) + ws[i - 1][j][k]))) - (tx2 * ((u[i + 1][j][k][3] * up1) - (u[i - 1][j][k][3] * um1)));\n      rhs[i][j][k][4] = ((((rhs[i][j][k][4] + (dx5tx1 * ((u[i + 1][j][k][4] - (2.0 * u[i][j][k][4])) + u[i - 1][j][k][4]))) + (xxcon3 * ((qs[i + 1][j][k] - (2.0 * qs[i][j][k])) + qs[i - 1][j][k]))) + (xxcon4 * (((up1 * up1) - ((2.0 * uijk) * uijk)) + (um1 * um1)))) + (xxcon5 * (((u[i + 1][j][k][4] * rho_i[i + 1][j][k]) - ((2.0 * u[i][j][k][4]) * rho_i[i][j][k])) + (u[i - 1][j][k][4] * rho_i[i - 1][j][k])))) - (tx2 * ((((c1 * u[i + 1][j][k][4]) - (c2 * square[i + 1][j][k])) * up1) - (((c1 * u[i - 1][j][k][4]) - (c2 * square[i - 1][j][k])) * um1)));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/20"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((5.0 * u[i][j][k][m]) - (4.0 * u[i + 1][j][k][m])) + u[i + 2][j][k][m]));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/21"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((((-4.0) * u[i - 1][j][k][m]) + (6.0 * u[i][j][k][m])) - (4.0 * u[i + 1][j][k][m])) + u[i + 2][j][k][m]));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/22"}
{"code": "for (i = 3; i < (grid_points[0] - 3); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * ((((u[i - 2][j][k][m] - (4.0 * u[i - 1][j][k][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i + 1][j][k][m])) + u[i + 2][j][k][m]));\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/23"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((u[i - 2][j][k][m] - (4.0 * u[i - 1][j][k][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i + 1][j][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/24"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * ((u[i - 2][j][k][m] - (4. * u[i - 1][j][k][m])) + (5.0 * u[i][j][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/25"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      vijk = vs[i][j][k];\n      vp1 = vs[i][j + 1][k];\n      vm1 = vs[i][j - 1][k];\n      rhs[i][j][k][0] = (rhs[i][j][k][0] + (dy1ty1 * ((u[i][j + 1][k][0] - (2.0 * u[i][j][k][0])) + u[i][j - 1][k][0]))) - (ty2 * (u[i][j + 1][k][2] - u[i][j - 1][k][2]));\n      rhs[i][j][k][1] = ((rhs[i][j][k][1] + (dy2ty1 * ((u[i][j + 1][k][1] - (2.0 * u[i][j][k][1])) + u[i][j - 1][k][1]))) + (yycon2 * ((us[i][j + 1][k] - (2.0 * us[i][j][k])) + us[i][j - 1][k]))) - (ty2 * ((u[i][j + 1][k][1] * vp1) - (u[i][j - 1][k][1] * vm1)));\n      rhs[i][j][k][2] = ((rhs[i][j][k][2] + (dy3ty1 * ((u[i][j + 1][k][2] - (2.0 * u[i][j][k][2])) + u[i][j - 1][k][2]))) + ((yycon2 * con43) * ((vp1 - (2.0 * vijk)) + vm1))) - (ty2 * (((u[i][j + 1][k][2] * vp1) - (u[i][j - 1][k][2] * vm1)) + ((((u[i][j + 1][k][4] - square[i][j + 1][k]) - u[i][j - 1][k][4]) + square[i][j - 1][k]) * c2)));\n      rhs[i][j][k][3] = ((rhs[i][j][k][3] + (dy4ty1 * ((u[i][j + 1][k][3] - (2.0 * u[i][j][k][3])) + u[i][j - 1][k][3]))) + (yycon2 * ((ws[i][j + 1][k] - (2.0 * ws[i][j][k])) + ws[i][j - 1][k]))) - (ty2 * ((u[i][j + 1][k][3] * vp1) - (u[i][j - 1][k][3] * vm1)));\n      rhs[i][j][k][4] = ((((rhs[i][j][k][4] + (dy5ty1 * ((u[i][j + 1][k][4] - (2.0 * u[i][j][k][4])) + u[i][j - 1][k][4]))) + (yycon3 * ((qs[i][j + 1][k] - (2.0 * qs[i][j][k])) + qs[i][j - 1][k]))) + (yycon4 * (((vp1 * vp1) - ((2.0 * vijk) * vijk)) + (vm1 * vm1)))) + (yycon5 * (((u[i][j + 1][k][4] * rho_i[i][j + 1][k]) - ((2.0 * u[i][j][k][4]) * rho_i[i][j][k])) + (u[i][j - 1][k][4] * rho_i[i][j - 1][k])))) - (ty2 * ((((c1 * u[i][j + 1][k][4]) - (c2 * square[i][j + 1][k])) * vp1) - (((c1 * u[i][j - 1][k][4]) - (c2 * square[i][j - 1][k])) * vm1)));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/26"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((5.0 * u[i][j][k][m]) - (4.0 * u[i][j + 1][k][m])) + u[i][j + 2][k][m]));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/27"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((((-4.0) * u[i][j - 1][k][m]) + (6.0 * u[i][j][k][m])) - (4.0 * u[i][j + 1][k][m])) + u[i][j + 2][k][m]));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/28"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 3; j < (grid_points[1] - 3); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * ((((u[i][j - 2][k][m] - (4.0 * u[i][j - 1][k][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i][j + 1][k][m])) + u[i][j + 2][k][m]));\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/29"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((u[i][j - 2][k][m] - (4.0 * u[i][j - 1][k][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i][j + 1][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/30"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * ((u[i][j - 2][k][m] - (4. * u[i][j - 1][k][m])) + (5. * u[i][j][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/31"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      wijk = ws[i][j][k];\n      wp1 = ws[i][j][k + 1];\n      wm1 = ws[i][j][k - 1];\n      rhs[i][j][k][0] = (rhs[i][j][k][0] + (dz1tz1 * ((u[i][j][k + 1][0] - (2.0 * u[i][j][k][0])) + u[i][j][k - 1][0]))) - (tz2 * (u[i][j][k + 1][3] - u[i][j][k - 1][3]));\n      rhs[i][j][k][1] = ((rhs[i][j][k][1] + (dz2tz1 * ((u[i][j][k + 1][1] - (2.0 * u[i][j][k][1])) + u[i][j][k - 1][1]))) + (zzcon2 * ((us[i][j][k + 1] - (2.0 * us[i][j][k])) + us[i][j][k - 1]))) - (tz2 * ((u[i][j][k + 1][1] * wp1) - (u[i][j][k - 1][1] * wm1)));\n      rhs[i][j][k][2] = ((rhs[i][j][k][2] + (dz3tz1 * ((u[i][j][k + 1][2] - (2.0 * u[i][j][k][2])) + u[i][j][k - 1][2]))) + (zzcon2 * ((vs[i][j][k + 1] - (2.0 * vs[i][j][k])) + vs[i][j][k - 1]))) - (tz2 * ((u[i][j][k + 1][2] * wp1) - (u[i][j][k - 1][2] * wm1)));\n      rhs[i][j][k][3] = ((rhs[i][j][k][3] + (dz4tz1 * ((u[i][j][k + 1][3] - (2.0 * u[i][j][k][3])) + u[i][j][k - 1][3]))) + ((zzcon2 * con43) * ((wp1 - (2.0 * wijk)) + wm1))) - (tz2 * (((u[i][j][k + 1][3] * wp1) - (u[i][j][k - 1][3] * wm1)) + ((((u[i][j][k + 1][4] - square[i][j][k + 1]) - u[i][j][k - 1][4]) + square[i][j][k - 1]) * c2)));\n      rhs[i][j][k][4] = ((((rhs[i][j][k][4] + (dz5tz1 * ((u[i][j][k + 1][4] - (2.0 * u[i][j][k][4])) + u[i][j][k - 1][4]))) + (zzcon3 * ((qs[i][j][k + 1] - (2.0 * qs[i][j][k])) + qs[i][j][k - 1]))) + (zzcon4 * (((wp1 * wp1) - ((2.0 * wijk) * wijk)) + (wm1 * wm1)))) + (zzcon5 * (((u[i][j][k + 1][4] * rho_i[i][j][k + 1]) - ((2.0 * u[i][j][k][4]) * rho_i[i][j][k])) + (u[i][j][k - 1][4] * rho_i[i][j][k - 1])))) - (tz2 * ((((c1 * u[i][j][k + 1][4]) - (c2 * square[i][j][k + 1])) * wp1) - (((c1 * u[i][j][k - 1][4]) - (c2 * square[i][j][k - 1])) * wm1)));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/32"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((5.0 * u[i][j][k][m]) - (4.0 * u[i][j][k + 1][m])) + u[i][j][k + 2][m]));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/33"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((((-4.0) * u[i][j][k - 1][m]) + (6.0 * u[i][j][k][m])) - (4.0 * u[i][j][k + 1][m])) + u[i][j][k + 2][m]));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/34"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 3; k < (grid_points[2] - 3); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * ((((u[i][j][k - 2][m] - (4.0 * u[i][j][k - 1][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i][j][k + 1][m])) + u[i][j][k + 2][m]));\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/35"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * (((u[i][j][k - 2][m] - (4.0 * u[i][j][k - 1][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i][j][k + 1][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/36"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      rhs[i][j][k][m] = rhs[i][j][k][m] - (dssp * ((u[i][j][k - 2][m] - (4.0 * u[i][j][k - 1][m])) + (5.0 * u[i][j][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/37"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      for (i = 1; i < (grid_points[0] - 1); i++)\n      {\n        rhs[i][j][k][m] = rhs[i][j][k][m] * dt;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/38"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < BLOCK_SIZE; m++)\n    {\n      for (n = 0; n < BLOCK_SIZE; n++)\n      {\n        rhs[i][j][k][m] = rhs[i][j][k][m] - (lhs[i][j][k][CC][m][n] * rhs[i + 1][j][k][n]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/39"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    binvcrhs(lhs[0][j][k][BB], lhs[0][j][k][CC], rhs[0][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/40"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    matvec_sub(lhs[i][j][k][AA], rhs[i - 1][j][k], rhs[i][j][k]);\n    matmul_sub(lhs[i][j][k][AA], lhs[i - 1][j][k][CC], lhs[i][j][k][BB]);\n    binvcrhs(lhs[i][j][k][BB], lhs[i][j][k][CC], rhs[i][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/41"}
{"code": "for (j = 1; j < (grid_points[1] - 1); j++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    matvec_sub(lhs[isize][j][k][AA], rhs[isize - 1][j][k], rhs[isize][j][k]);\n    matmul_sub(lhs[isize][j][k][AA], lhs[isize - 1][j][k][CC], lhs[isize][j][k][BB]);\n    binvrhs(lhs[i][j][k][BB], rhs[i][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/42"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    for (m = 0; m < BLOCK_SIZE; m++)\n    {\n      for (n = 0; n < BLOCK_SIZE; n++)\n      {\n        rhs[i][j][k][m] = rhs[i][j][k][m] - (lhs[i][j][k][CC][m][n] * rhs[i][j + 1][k][n]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/43"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    binvcrhs(lhs[i][0][k][BB], lhs[i][0][k][CC], rhs[i][0][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/44"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    matvec_sub(lhs[i][j][k][AA], rhs[i][j - 1][k], rhs[i][j][k]);\n    matmul_sub(lhs[i][j][k][AA], lhs[i][j - 1][k][CC], lhs[i][j][k][BB]);\n    binvcrhs(lhs[i][j][k][BB], lhs[i][j][k][CC], rhs[i][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/45"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (k = 1; k < (grid_points[2] - 1); k++)\n  {\n    matvec_sub(lhs[i][jsize][k][AA], rhs[i][jsize - 1][k], rhs[i][jsize][k]);\n    matmul_sub(lhs[i][jsize][k][AA], lhs[i][jsize - 1][k][CC], lhs[i][jsize][k][BB]);\n    binvrhs(lhs[i][jsize][k][BB], rhs[i][jsize][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/46"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = grid_points[2] - 2; k >= 0; k--)\n    {\n      for (m = 0; m < BLOCK_SIZE; m++)\n      {\n        for (n = 0; n < BLOCK_SIZE; n++)\n        {\n          rhs[i][j][k][m] = rhs[i][j][k][m] - (lhs[i][j][k][CC][m][n] * rhs[i][j][k + 1][n]);\n        }\n\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/47"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    binvcrhs(lhs[i][j][0][BB], lhs[i][j][0][CC], rhs[i][j][0]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/48"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    matvec_sub(lhs[i][j][k][AA], rhs[i][j][k - 1], rhs[i][j][k]);\n    matmul_sub(lhs[i][j][k][AA], lhs[i][j][k - 1][CC], lhs[i][j][k][BB]);\n    binvcrhs(lhs[i][j][k][BB], lhs[i][j][k][CC], rhs[i][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/49"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    matvec_sub(lhs[i][j][ksize][AA], rhs[i][j][ksize - 1], rhs[i][j][ksize]);\n    matmul_sub(lhs[i][j][ksize][AA], lhs[i][j][ksize - 1][CC], lhs[i][j][ksize][BB]);\n    binvrhs(lhs[i][j][ksize][BB], rhs[i][j][ksize]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/50"}
{"code": "for (step = 1; step <= niter; step++)\n{\n  if (((step % 20) == 0) || (step == 1))\n  {\n    printf(\" Time step %4d\\n\", step);\n  }\n\n  adi();\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/51"}
{"code": "for (m = 0; m < 5; m++)\n{\n  rms[m] = 0.0;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/52"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    eta = ((double) j) * dnym1;\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      zeta = ((double) k) * dnzm1;\n      exact_solution(xi, eta, zeta, u_exact);\n      for (m = 0; m < 5; m++)\n      {\n        add = u[i][j][k][m] - u_exact[m];\n        rms[m] = rms[m] + (add * add);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/53"}
{"code": "for (m = 0; m < 5; m++)\n{\n  for (d = 0; d <= 2; d++)\n  {\n    rms[m] = rms[m] / ((double) (grid_points[d] - 2));\n  }\n\n  rms[m] = sqrt(rms[m]);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/54"}
{"code": "for (i = 1; i < (grid_points[0] - 1); i++)\n{\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        add = rhs[i][j][k][m];\n        rms[m] = rms[m] + (add * add);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/55"}
{"code": "for (m = 0; m < 5; m++)\n{\n  dtemp[m] = ((ce[m][0] + (xi * (ce[m][1] + (xi * (ce[m][4] + (xi * (ce[m][7] + (xi * ce[m][10])))))))) + (eta * (ce[m][2] + (eta * (ce[m][5] + (eta * (ce[m][8] + (eta * ce[m][11])))))))) + (zeta * (ce[m][3] + (zeta * (ce[m][6] + (zeta * (ce[m][9] + (zeta * ce[m][12])))))));\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/56"}
{"code": "for (m = 0; m < 5; m++)\n{\n  xcr[m] = xcr[m] / dt;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/57"}
{"code": "for (m = 0; m < 5; m++)\n{\n  xcrref[m] = 1.0;\n  xceref[m] = 1.0;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/58"}
{"code": "for (m = 0; m < 5; m++)\n{\n  xcrdif[m] = fabs((xcr[m] - xcrref[m]) / xcrref[m]);\n  xcedif[m] = fabs((xce[m] - xceref[m]) / xceref[m]);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/59"}
{"code": "for (m = 0; m < 5; m++)\n{\n  if ((*class) == 'U')\n  {\n    printf(\"          %2d%20.13e\\n\", m, xcr[m]);\n  }\n  else\n    if (xcrdif[m] > epsilon)\n  {\n    *verified = FALSE;\n    printf(\" FAILURE: %2d%20.13e%20.13e%20.13e\\n\", m, xcr[m], xcrref[m], xcrdif[m]);\n  }\n  else\n  {\n    printf(\"          %2d%20.13e%20.13e%20.13e\\n\", m, xcr[m], xcrref[m], xcrdif[m]);\n  }\n\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/60"}
{"code": "for (m = 0; m < 5; m++)\n{\n  if ((*class) == 'U')\n  {\n    printf(\"          %2d%20.13e\\n\", m, xce[m]);\n  }\n  else\n    if (xcedif[m] > epsilon)\n  {\n    *verified = FALSE;\n    printf(\" FAILURE: %2d%20.13e%20.13e%20.13e\\n\", m, xce[m], xceref[m], xcedif[m]);\n  }\n  else\n  {\n    printf(\"          %2d%20.13e%20.13e%20.13e\\n\", m, xce[m], xceref[m], xcedif[m]);\n  }\n\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/61"}
{"code": "for (i = grid_points[0] - 2; i >= 0; i--)\n{\n  #pragma omp for\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      for (m = 0; m < BLOCK_SIZE; m++)\n      {\n        for (n = 0; n < BLOCK_SIZE; n++)\n        {\n          rhs[i][j][k][m] = rhs[i][j][k][m] - (lhs[i][j][k][CC][m][n] * rhs[i + 1][j][k][n]);\n        }\n\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/62"}
{"code": "for (i = 1; i < isize; i++)\n{\n  #pragma omp for\n  for (j = 1; j < (grid_points[1] - 1); j++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      matvec_sub(lhs[i][j][k][AA], rhs[i - 1][j][k], rhs[i][j][k]);\n      matmul_sub(lhs[i][j][k][AA], lhs[i - 1][j][k][CC], lhs[i][j][k][BB]);\n      binvcrhs(lhs[i][j][k][BB], lhs[i][j][k][CC], rhs[i][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/63"}
{"code": "for (i = 0; i < 5; i++)\n{\n  bvec[i] = ((((bvec[i] - (ablock[i][0] * avec[0])) - (ablock[i][1] * avec[1])) - (ablock[i][2] * avec[2])) - (ablock[i][3] * avec[3])) - (ablock[i][4] * avec[4]);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/64"}
{"code": "for (j = 0; j < 5; j++)\n{\n  cblock[0][j] = ((((cblock[0][j] - (ablock[0][0] * bblock[0][j])) - (ablock[0][1] * bblock[1][j])) - (ablock[0][2] * bblock[2][j])) - (ablock[0][3] * bblock[3][j])) - (ablock[0][4] * bblock[4][j]);\n  cblock[1][j] = ((((cblock[1][j] - (ablock[1][0] * bblock[0][j])) - (ablock[1][1] * bblock[1][j])) - (ablock[1][2] * bblock[2][j])) - (ablock[1][3] * bblock[3][j])) - (ablock[1][4] * bblock[4][j]);\n  cblock[2][j] = ((((cblock[2][j] - (ablock[2][0] * bblock[0][j])) - (ablock[2][1] * bblock[1][j])) - (ablock[2][2] * bblock[2][j])) - (ablock[2][3] * bblock[3][j])) - (ablock[2][4] * bblock[4][j]);\n  cblock[3][j] = ((((cblock[3][j] - (ablock[3][0] * bblock[0][j])) - (ablock[3][1] * bblock[1][j])) - (ablock[3][2] * bblock[2][j])) - (ablock[3][3] * bblock[3][j])) - (ablock[3][4] * bblock[4][j]);\n  cblock[4][j] = ((((cblock[4][j] - (ablock[4][0] * bblock[0][j])) - (ablock[4][1] * bblock[1][j])) - (ablock[4][2] * bblock[2][j])) - (ablock[4][3] * bblock[3][j])) - (ablock[4][4] * bblock[4][j]);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/65"}
{"code": "for (j = grid_points[1] - 2; j >= 0; j--)\n{\n  #pragma omp for\n  for (i = 1; i < (grid_points[0] - 1); i++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      for (m = 0; m < BLOCK_SIZE; m++)\n      {\n        for (n = 0; n < BLOCK_SIZE; n++)\n        {\n          rhs[i][j][k][m] = rhs[i][j][k][m] - (lhs[i][j][k][CC][m][n] * rhs[i][j + 1][k][n]);\n        }\n\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/66"}
{"code": "for (j = 1; j < jsize; j++)\n{\n  #pragma omp for\n  for (i = 1; i < (grid_points[0] - 1); i++)\n  {\n    for (k = 1; k < (grid_points[2] - 1); k++)\n    {\n      matvec_sub(lhs[i][j][k][AA], rhs[i][j - 1][k], rhs[i][j][k]);\n      matmul_sub(lhs[i][j][k][AA], lhs[i][j - 1][k][CC], lhs[i][j][k][BB]);\n      binvcrhs(lhs[i][j][k][BB], lhs[i][j][k][CC], rhs[i][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/67"}
{"code": "for (k = 1; k < ksize; k++)\n{\n  #pragma omp for\n  for (i = 1; i < (grid_points[0] - 1); i++)\n  {\n    for (j = 1; j < (grid_points[1] - 1); j++)\n    {\n      matvec_sub(lhs[i][j][k][AA], rhs[i][j][k - 1], rhs[i][j][k]);\n      matmul_sub(lhs[i][j][k][AA], lhs[i][j][k - 1][CC], lhs[i][j][k][BB]);\n      binvcrhs(lhs[i][j][k][BB], lhs[i][j][k][CC], rhs[i][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/BT/bt/68"}
{"code": "for (i = 0; i < (2 * (1 << 16)); i++)\n  x[i] = -1.0e99;\n", "pragma": "omp parallel for default(shared) private(i)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/0"}
{"code": "for (k = 1; k <= np; k++)\n{\n  kk = k_offset + k;\n  t1 = 271828183.0;\n  t2 = an;\n  for (i = 1; i <= 100; i++)\n  {\n    ik = kk / 2;\n    if ((2 * ik) != kk)\n      t3 = randlc(&t1, t2);\n\n    if (ik == 0)\n      break;\n\n    t3 = randlc(&t2, t2);\n    kk = ik;\n  }\n\n  if (FALSE == TRUE)\n    timer_start(3);\n\n  vranlc(2 * (1 << 16), &t1, 1220703125.0, x - 1);\n  if (FALSE == TRUE)\n    timer_stop(3);\n\n  if (FALSE == TRUE)\n    timer_start(2);\n\n  for (i = 0; i < (1 << 16); i++)\n  {\n    x1 = (2.0 * x[2 * i]) - 1.0;\n    x2 = (2.0 * x[(2 * i) + 1]) - 1.0;\n    t1 = pow2(x1) + pow2(x2);\n    if (t1 <= 1.0)\n    {\n      t2 = sqrt(((-2.0) * log(t1)) / t1);\n      t3 = x1 * t2;\n      t4 = x2 * t2;\n      l = max(fabs(t3), fabs(t4));\n      qq[l] += 1.0;\n      sx = sx + t3;\n      sy = sy + t4;\n    }\n\n  }\n\n  if (FALSE == TRUE)\n    timer_stop(2);\n\n}\n", "pragma": "omp for reduction(+:sx,sy) schedule(static)", "exist": 1, "private": 0, "reduction": 1, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/1"}
{"code": "for (j = 13; j >= 1; j--)\n{\n  if (size[j] == '.')\n    size[j] = ' ';\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/2"}
{"code": "for (i = 1; i <= (16 + 1); i++)\n{\n  t2 = randlc(&t1, t1);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/3"}
{"code": "for (i = 0; i <= (10 - 1); i++)\n{\n  q[i] = 0.0;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/4"}
{"code": "for (i = 0; i < 10; i++)\n  qq[i] = 0.0;\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/5"}
{"code": "for (i = 0; i <= (10 - 1); i++)\n  q[i] += qq[i];\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/6"}
{"code": "for (i = 0; i <= (10 - 1); i++)\n{\n  gc = gc + q[i];\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/7"}
{"code": "for (i = 0; i <= (10 - 1); i++)\n{\n  printf(\"%3d %15.0f\\n\", i, q[i]);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/EP/ep/8"}
{"code": "for (k = 0; k < d[2]; k++)\n{\n  for (j = 0; j < d[1]; j++)\n  {\n    for (i = 0; i < d[0]; i++)\n    {\n      crmul(u1[k][j][i], u0[k][j][i], ex[t * indexmap[k][j][i]]);\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(i,j,k)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/0"}
{"code": "for (i = 0; i < dims[2][0]; i++)\n{\n  ii = (((((i + 1) + xstart[2]) - 2) + (NX / 2)) % NX) - (NX / 2);\n  ii2 = ii * ii;\n  for (j = 0; j < dims[2][1]; j++)\n  {\n    jj = (((((j + 1) + ystart[2]) - 2) + (NY / 2)) % NY) - (NY / 2);\n    ij2 = (jj * jj) + ii2;\n    for (k = 0; k < dims[2][2]; k++)\n    {\n      kk = (((((k + 1) + zstart[2]) - 2) + (NZ / 2)) % NZ) - (NZ / 2);\n      indexmap[k][j][i] = (kk * kk) + ij2;\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(i,j,k,ii,ii2,jj,ij2,kk)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/1"}
{"code": "for (k = 0; k < d[2]; k++)\n{\n  for (jj = 0; jj <= (d[1] - fftblock); jj += fftblock)\n  {\n    for (j = 0; j < fftblock; j++)\n    {\n      for (i = 0; i < d[0]; i++)\n      {\n        y0[i][j].real = x[k][j + jj][i].real;\n        y0[i][j].imag = x[k][j + jj][i].imag;\n      }\n\n    }\n\n    cfftz(is, logd[0], d[0], y0, y1);\n    for (j = 0; j < fftblock; j++)\n    {\n      for (i = 0; i < d[0]; i++)\n      {\n        xout[k][j + jj][i].real = y0[i][j].real;\n        xout[k][j + jj][i].imag = y0[i][j].imag;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/2"}
{"code": "for (k = 0; k < d[2]; k++)\n{\n  for (ii = 0; ii <= (d[0] - fftblock); ii += fftblock)\n  {\n    for (j = 0; j < d[1]; j++)\n    {\n      for (i = 0; i < fftblock; i++)\n      {\n        y0[j][i].real = x[k][j][i + ii].real;\n        y0[j][i].imag = x[k][j][i + ii].imag;\n      }\n\n    }\n\n    cfftz(is, logd[1], d[1], y0, y1);\n    for (j = 0; j < d[1]; j++)\n    {\n      for (i = 0; i < fftblock; i++)\n      {\n        xout[k][j][i + ii].real = y0[j][i].real;\n        xout[k][j][i + ii].imag = y0[j][i].imag;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/3"}
{"code": "for (j = 0; j < d[1]; j++)\n{\n  for (ii = 0; ii <= (d[0] - fftblock); ii += fftblock)\n  {\n    for (k = 0; k < d[2]; k++)\n    {\n      for (i = 0; i < fftblock; i++)\n      {\n        y0[k][i].real = x[k][j][i + ii].real;\n        y0[k][i].imag = x[k][j][i + ii].imag;\n      }\n\n    }\n\n    cfftz(is, logd[2], d[2], y0, y1);\n    for (k = 0; k < d[2]; k++)\n    {\n      for (i = 0; i < fftblock; i++)\n      {\n        xout[k][j][i + ii].real = y0[k][i].real;\n        xout[k][j][i + ii].imag = y0[k][i].imag;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/4"}
{"code": "for (j = 1; j <= 1024; j++)\n{\n  q = (j % NX) + 1;\n  if ((q >= xstart[0]) && (q <= xend[0]))\n  {\n    r = ((3 * j) % NY) + 1;\n    if ((r >= ystart[0]) && (r <= yend[0]))\n    {\n      s = ((5 * j) % NZ) + 1;\n      if ((s >= zstart[0]) && (s <= zend[0]))\n      {\n        cadd(chk, chk, u1[s - zstart[0]][r - ystart[0]][q - xstart[0]]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/5"}
{"code": "for (i = 0; i < T_MAX; i++)\n{\n  timer_clear(i);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/6"}
{"code": "for (iter = 1; iter <= niter; iter++)\n{\n  if (TIMERS_ENABLED == TRUE)\n  {\n    timer_start(T_EVOLVE);\n  }\n\n  evolve(u0, u1, iter, indexmap, dims[0]);\n  if (TIMERS_ENABLED == TRUE)\n  {\n    timer_stop(T_EVOLVE);\n  }\n\n  if (TIMERS_ENABLED == TRUE)\n  {\n    timer_start(T_FFT);\n  }\n\n  fft(-1, u1, u2);\n  if (TIMERS_ENABLED == TRUE)\n  {\n    timer_stop(T_FFT);\n  }\n\n  if (TIMERS_ENABLED == TRUE)\n  {\n    timer_start(T_CHECKSUM);\n  }\n\n  checksum(iter, u2, dims[0]);\n  if (TIMERS_ENABLED == TRUE)\n  {\n    timer_stop(T_CHECKSUM);\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/7"}
{"code": "for (k = 0; k < dims[0][2]; k++)\n{\n  x0 = start;\n  vranlc((2 * NX) * dims[0][1], &x0, A, tmp);\n  t = 1;\n  for (j = 0; j < dims[0][1]; j++)\n    for (i = 0; i < NX; i++)\n  {\n    u0[k][j][i].real = tmp[t++];\n    u0[k][j][i].imag = tmp[t++];\n  }\n\n\n  if (k != dims[0][2])\n    dummy = randlc(&start, an);\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/8"}
{"code": "for (i = 0; i < 3; i++)\n{\n  dims[i][0] = NX;\n  dims[i][1] = NY;\n  dims[i][2] = NZ;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/9"}
{"code": "for (i = 0; i < 3; i++)\n{\n  xstart[i] = 1;\n  xend[i] = NX;\n  ystart[i] = 1;\n  yend[i] = NY;\n  zstart[i] = 1;\n  zend[i] = NZ;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/10"}
{"code": "for (i = 2; i <= EXPMAX; i++)\n{\n  ex[i] = ex[i - 1] * ex[1];\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/11"}
{"code": "for (i = 0; i < T_MAX; i++)\n{\n  if (timer_read(i) != 0.0)\n  {\n    printf(\"timer %2d(%16s( :%10.6f\\n\", i, tstrings[i], timer_read(i));\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/12"}
{"code": "for (i = 0; i < 3; i++)\n{\n  logd[i] = ilog2(d[i]);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/13"}
{"code": "for (j = 1; j <= m; j++)\n{\n  t = PI / ln;\n  for (i = 0; i <= (ln - 1); i++)\n  {\n    ti = i * t;\n    u[i + ku].real = cos(ti);\n    u[i + ku].imag = sin(ti);\n  }\n\n  ku = ku + ln;\n  ln = 2 * ln;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/14"}
{"code": "for (l = 1; l <= m; l += 2)\n{\n  fftz2(is, l, m, n, fftblock, fftblockpad, u, x, y);\n  if (l == m)\n    break;\n\n  fftz2(is, l + 1, m, n, fftblock, fftblockpad, u, y, x);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/15"}
{"code": "for (j = 0; j < n; j++)\n{\n  for (i = 0; i < fftblock; i++)\n  {\n    x[j][i].real = y[j][i].real;\n    x[j][i].imag = y[j][i].imag;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/16"}
{"code": "for (i = 0; i < li; i++)\n{\n  i11 = i * lk;\n  i12 = i11 + n1;\n  i21 = i * lj;\n  i22 = i21 + lk;\n  if (is >= 1)\n  {\n    u1.real = u[ku + i].real;\n    u1.imag = u[ku + i].imag;\n  }\n  else\n  {\n    u1.real = u[ku + i].real;\n    u1.imag = -u[ku + i].imag;\n  }\n\n  for (k = 0; k < lk; k++)\n  {\n    for (j = 0; j < ny; j++)\n    {\n      double x11real;\n      double x11imag;\n      double x21real;\n      double x21imag;\n      x11real = x[i11 + k][j].real;\n      x11imag = x[i11 + k][j].imag;\n      x21real = x[i12 + k][j].real;\n      x21imag = x[i12 + k][j].imag;\n      y[i21 + k][j].real = x11real + x21real;\n      y[i21 + k][j].imag = x11imag + x21imag;\n      y[i22 + k][j].real = (u1.real * (x11real - x21real)) - (u1.imag * (x11imag - x21imag));\n      y[i22 + k][j].imag = (u1.real * (x11imag - x21imag)) + (u1.imag * (x11real - x21real));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/17"}
{"code": "for (i = 1; i <= nt; i++)\n{\n  err = (get_real(sums[i]) - vdata_real_s[i]) / vdata_real_s[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n  err = (get_imag(sums[i]) - vdata_imag_s[i]) / vdata_imag_s[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/18"}
{"code": "for (i = 1; i <= nt; i++)\n{\n  err = (get_real(sums[i]) - vdata_real_w[i]) / vdata_real_w[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n  err = (get_imag(sums[i]) - vdata_imag_w[i]) / vdata_imag_w[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/19"}
{"code": "for (i = 1; i <= nt; i++)\n{\n  err = (get_real(sums[i]) - vdata_real_a[i]) / vdata_real_a[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n  err = (get_imag(sums[i]) - vdata_imag_a[i]) / vdata_imag_a[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/20"}
{"code": "for (i = 1; i <= nt; i++)\n{\n  err = (get_real(sums[i]) - vdata_real_b[i]) / vdata_real_b[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n  err = (get_imag(sums[i]) - vdata_imag_b[i]) / vdata_imag_b[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/21"}
{"code": "for (i = 1; i <= nt; i++)\n{\n  err = (get_real(sums[i]) - vdata_real_c[i]) / vdata_real_c[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n  err = (get_imag(sums[i]) - vdata_imag_c[i]) / vdata_imag_c[i];\n  if (fabs(err) > epsilon)\n  {\n    *verified = FALSE;\n    break;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/FT/ft/22"}
{"code": "for (i = 0; i < (1 << 16); i++)\n{\n  key_buff2[i] = key_array[i];\n  prv_buff1[key_buff2[i]]++;\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/0"}
{"code": "for (i = 1; i <= 23; i++)\n{\n  R23 = 0.50 * R23;\n  T23 = 2.0 * T23;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/1"}
{"code": "for (i = 1; i <= 46; i++)\n{\n  R46 = 0.50 * R46;\n  T46 = 2.0 * T46;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/2"}
{"code": "for (i = 0; i < (1 << 16); i++)\n{\n  x = randlc(&seed, &a);\n  x += randlc(&seed, &a);\n  x += randlc(&seed, &a);\n  x += randlc(&seed, &a);\n  key_array[i] = k * x;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/3"}
{"code": "for (i = 0; i < (1 << 16); i++)\n  key_array[--key_buff_ptr_global[key_buff2[i]]] = key_buff2[i];\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/4"}
{"code": "for (i = 1; i < (1 << 16); i++)\n  if (key_array[i - 1] > key_array[i])\n  j++;\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/5"}
{"code": "for (i = 0; i < 5; i++)\n  partial_verify_vals[i] = key_array[test_index_array[i]];\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/6"}
{"code": "for (i = 0; i < (1 << 11); i++)\n  key_buff1[i] = 0;\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/7"}
{"code": "for (i = 0; i < (1 << 11); i++)\n  prv_buff1[i] = 0;\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/8"}
{"code": "for (i = 0; i < ((1 << 11) - 1); i++)\n  prv_buff1[i + 1] += prv_buff1[i];\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/9"}
{"code": "for (i = 0; i < (1 << 11); i++)\n  key_buff1[i] += prv_buff1[i];\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/10"}
{"code": "for (i = 0; i < 5; i++)\n{\n  k = partial_verify_vals[i];\n  if ((0 <= k) && (k <= ((1 << 16) - 1)))\n    switch ('S')\n  {\n    case 'S':\n      if (i <= 2)\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] + iteration))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n    else\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] - iteration))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n\n      break;\n\n    case 'W':\n      if (i < 2)\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] + (iteration - 2)))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n    else\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] - iteration))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n\n      break;\n\n    case 'A':\n      if (i <= 2)\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] + (iteration - 1)))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n    else\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] - (iteration - 1)))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n\n      break;\n\n    case 'B':\n      if (((i == 1) || (i == 2)) || (i == 4))\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] + iteration))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n    else\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] - iteration))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n\n      break;\n\n    case 'C':\n      if (i <= 2)\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] + iteration))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n    else\n    {\n      if (key_buff1[k - 1] != (test_rank_array[i] - iteration))\n      {\n        printf(\"Failed partial verification: iteration %d, test key %d\\n\", iteration, i);\n      }\n      else\n        passed_verification++;\n\n    }\n\n      break;\n\n  }\n\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/11"}
{"code": "for (i = 0; i < 5; i++)\n  switch ('S')\n{\n  case 'S':\n    test_index_array[i] = S_test_index_array[i];\n    test_rank_array[i] = S_test_rank_array[i];\n    break;\n\n  case 'A':\n    test_index_array[i] = A_test_index_array[i];\n    test_rank_array[i] = A_test_rank_array[i];\n    break;\n\n  case 'W':\n    test_index_array[i] = W_test_index_array[i];\n    test_rank_array[i] = W_test_rank_array[i];\n    break;\n\n  case 'B':\n    test_index_array[i] = B_test_index_array[i];\n    test_rank_array[i] = B_test_rank_array[i];\n    break;\n\n  case 'C':\n    test_index_array[i] = C_test_index_array[i];\n    test_rank_array[i] = C_test_rank_array[i];\n    break;\n\n}\n\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/12"}
{"code": "for (iteration = 1; iteration <= 10; iteration++)\n{\n  #pragma omp master\n  if ('S' != 'S')\n    printf(\"        %d\\n\", iteration);\n\n  rank(iteration);\n  #pragma omp master\n  nthreads = omp_get_num_threads();\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/IS/is/13"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      v[i][j][k][m] = v[i][j][k][m] - (omega * (((((ldz[i][j][m][0] * v[i][j][k - 1][0]) + (ldz[i][j][m][1] * v[i][j][k - 1][1])) + (ldz[i][j][m][2] * v[i][j][k - 1][2])) + (ldz[i][j][m][3] * v[i][j][k - 1][3])) + (ldz[i][j][m][4] * v[i][j][k - 1][4])));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/0"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  if (i != ist)\n  {\n    while (flag[i - 1] == 0)\n    {\n      #pragma omp flush(flag)\n      ;\n    }\n\n  }\n\n  if (i != iend)\n  {\n    while (flag[i] == 1)\n    {\n      #pragma omp flush(flag)\n      ;\n    }\n\n  }\n\n  for (j = jst; j <= jend; j++)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      v[i][j][k][m] = v[i][j][k][m] - (omega * ((((((((((ldy[i][j][m][0] * v[i][j - 1][k][0]) + (ldx[i][j][m][0] * v[i - 1][j][k][0])) + (ldy[i][j][m][1] * v[i][j - 1][k][1])) + (ldx[i][j][m][1] * v[i - 1][j][k][1])) + (ldy[i][j][m][2] * v[i][j - 1][k][2])) + (ldx[i][j][m][2] * v[i - 1][j][k][2])) + (ldy[i][j][m][3] * v[i][j - 1][k][3])) + (ldx[i][j][m][3] * v[i - 1][j][k][3])) + (ldy[i][j][m][4] * v[i][j - 1][k][4])) + (ldx[i][j][m][4] * v[i - 1][j][k][4])));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      tmat[m][0] = d[i][j][m][0];\n      tmat[m][1] = d[i][j][m][1];\n      tmat[m][2] = d[i][j][m][2];\n      tmat[m][3] = d[i][j][m][3];\n      tmat[m][4] = d[i][j][m][4];\n    }\n\n    tmp1 = 1.0 / tmat[0][0];\n    tmp = tmp1 * tmat[1][0];\n    tmat[1][1] = tmat[1][1] - (tmp * tmat[0][1]);\n    tmat[1][2] = tmat[1][2] - (tmp * tmat[0][2]);\n    tmat[1][3] = tmat[1][3] - (tmp * tmat[0][3]);\n    tmat[1][4] = tmat[1][4] - (tmp * tmat[0][4]);\n    v[i][j][k][1] = v[i][j][k][1] - (v[i][j][k][0] * tmp);\n    tmp = tmp1 * tmat[2][0];\n    tmat[2][1] = tmat[2][1] - (tmp * tmat[0][1]);\n    tmat[2][2] = tmat[2][2] - (tmp * tmat[0][2]);\n    tmat[2][3] = tmat[2][3] - (tmp * tmat[0][3]);\n    tmat[2][4] = tmat[2][4] - (tmp * tmat[0][4]);\n    v[i][j][k][2] = v[i][j][k][2] - (v[i][j][k][0] * tmp);\n    tmp = tmp1 * tmat[3][0];\n    tmat[3][1] = tmat[3][1] - (tmp * tmat[0][1]);\n    tmat[3][2] = tmat[3][2] - (tmp * tmat[0][2]);\n    tmat[3][3] = tmat[3][3] - (tmp * tmat[0][3]);\n    tmat[3][4] = tmat[3][4] - (tmp * tmat[0][4]);\n    v[i][j][k][3] = v[i][j][k][3] - (v[i][j][k][0] * tmp);\n    tmp = tmp1 * tmat[4][0];\n    tmat[4][1] = tmat[4][1] - (tmp * tmat[0][1]);\n    tmat[4][2] = tmat[4][2] - (tmp * tmat[0][2]);\n    tmat[4][3] = tmat[4][3] - (tmp * tmat[0][3]);\n    tmat[4][4] = tmat[4][4] - (tmp * tmat[0][4]);\n    v[i][j][k][4] = v[i][j][k][4] - (v[i][j][k][0] * tmp);\n    tmp1 = 1.0 / tmat[1][1];\n    tmp = tmp1 * tmat[2][1];\n    tmat[2][2] = tmat[2][2] - (tmp * tmat[1][2]);\n    tmat[2][3] = tmat[2][3] - (tmp * tmat[1][3]);\n    tmat[2][4] = tmat[2][4] - (tmp * tmat[1][4]);\n    v[i][j][k][2] = v[i][j][k][2] - (v[i][j][k][1] * tmp);\n    tmp = tmp1 * tmat[3][1];\n    tmat[3][2] = tmat[3][2] - (tmp * tmat[1][2]);\n    tmat[3][3] = tmat[3][3] - (tmp * tmat[1][3]);\n    tmat[3][4] = tmat[3][4] - (tmp * tmat[1][4]);\n    v[i][j][k][3] = v[i][j][k][3] - (v[i][j][k][1] * tmp);\n    tmp = tmp1 * tmat[4][1];\n    tmat[4][2] = tmat[4][2] - (tmp * tmat[1][2]);\n    tmat[4][3] = tmat[4][3] - (tmp * tmat[1][3]);\n    tmat[4][4] = tmat[4][4] - (tmp * tmat[1][4]);\n    v[i][j][k][4] = v[i][j][k][4] - (v[i][j][k][1] * tmp);\n    tmp1 = 1.0 / tmat[2][2];\n    tmp = tmp1 * tmat[3][2];\n    tmat[3][3] = tmat[3][3] - (tmp * tmat[2][3]);\n    tmat[3][4] = tmat[3][4] - (tmp * tmat[2][4]);\n    v[i][j][k][3] = v[i][j][k][3] - (v[i][j][k][2] * tmp);\n    tmp = tmp1 * tmat[4][2];\n    tmat[4][3] = tmat[4][3] - (tmp * tmat[2][3]);\n    tmat[4][4] = tmat[4][4] - (tmp * tmat[2][4]);\n    v[i][j][k][4] = v[i][j][k][4] - (v[i][j][k][2] * tmp);\n    tmp1 = 1.0 / tmat[3][3];\n    tmp = tmp1 * tmat[4][3];\n    tmat[4][4] = tmat[4][4] - (tmp * tmat[3][4]);\n    v[i][j][k][4] = v[i][j][k][4] - (v[i][j][k][3] * tmp);\n    v[i][j][k][4] = v[i][j][k][4] / tmat[4][4];\n    v[i][j][k][3] = v[i][j][k][3] - (tmat[3][4] * v[i][j][k][4]);\n    v[i][j][k][3] = v[i][j][k][3] / tmat[3][3];\n    v[i][j][k][2] = (v[i][j][k][2] - (tmat[2][3] * v[i][j][k][3])) - (tmat[2][4] * v[i][j][k][4]);\n    v[i][j][k][2] = v[i][j][k][2] / tmat[2][2];\n    v[i][j][k][1] = ((v[i][j][k][1] - (tmat[1][2] * v[i][j][k][2])) - (tmat[1][3] * v[i][j][k][3])) - (tmat[1][4] * v[i][j][k][4]);\n    v[i][j][k][1] = v[i][j][k][1] / tmat[1][1];\n    v[i][j][k][0] = (((v[i][j][k][0] - (tmat[0][1] * v[i][j][k][1])) - (tmat[0][2] * v[i][j][k][2])) - (tmat[0][3] * v[i][j][k][3])) - (tmat[0][4] * v[i][j][k][4]);\n    v[i][j][k][0] = v[i][j][k][0] / tmat[0][0];\n  }\n\n  if (i != ist)\n    flag[i - 1] = 0;\n\n  if (i != iend)\n    flag[i] = 1;\n\n  #pragma omp flush(flag)\n}\n", "pragma": "omp for nowait schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/1"}
{"code": "for (i = iend; i >= ist; i--)\n{\n  for (j = jend; j >= jst; j--)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      tv[i][j][m] = omega * (((((udz[i][j][m][0] * v[i][j][k + 1][0]) + (udz[i][j][m][1] * v[i][j][k + 1][1])) + (udz[i][j][m][2] * v[i][j][k + 1][2])) + (udz[i][j][m][3] * v[i][j][k + 1][3])) + (udz[i][j][m][4] * v[i][j][k + 1][4]));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/2"}
{"code": "for (i = iend; i >= ist; i--)\n{\n  if (i != iend)\n  {\n    while (flag[i + 1] == 0)\n    {\n      #pragma omp flush(flag)\n      ;\n    }\n\n  }\n\n  if (i != ist)\n  {\n    while (flag[i] == 1)\n    {\n      #pragma omp flush(flag)\n      ;\n    }\n\n  }\n\n  for (j = jend; j >= jst; j--)\n  {\n    for (m = 0; m < 5; m++)\n    {\n      tv[i][j][m] = tv[i][j][m] + (omega * ((((((((((udy[i][j][m][0] * v[i][j + 1][k][0]) + (udx[i][j][m][0] * v[i + 1][j][k][0])) + (udy[i][j][m][1] * v[i][j + 1][k][1])) + (udx[i][j][m][1] * v[i + 1][j][k][1])) + (udy[i][j][m][2] * v[i][j + 1][k][2])) + (udx[i][j][m][2] * v[i + 1][j][k][2])) + (udy[i][j][m][3] * v[i][j + 1][k][3])) + (udx[i][j][m][3] * v[i + 1][j][k][3])) + (udy[i][j][m][4] * v[i][j + 1][k][4])) + (udx[i][j][m][4] * v[i + 1][j][k][4])));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      tmat[m][0] = d[i][j][m][0];\n      tmat[m][1] = d[i][j][m][1];\n      tmat[m][2] = d[i][j][m][2];\n      tmat[m][3] = d[i][j][m][3];\n      tmat[m][4] = d[i][j][m][4];\n    }\n\n    tmp1 = 1.0 / tmat[0][0];\n    tmp = tmp1 * tmat[1][0];\n    tmat[1][1] = tmat[1][1] - (tmp * tmat[0][1]);\n    tmat[1][2] = tmat[1][2] - (tmp * tmat[0][2]);\n    tmat[1][3] = tmat[1][3] - (tmp * tmat[0][3]);\n    tmat[1][4] = tmat[1][4] - (tmp * tmat[0][4]);\n    tv[i][j][1] = tv[i][j][1] - (tv[i][j][0] * tmp);\n    tmp = tmp1 * tmat[2][0];\n    tmat[2][1] = tmat[2][1] - (tmp * tmat[0][1]);\n    tmat[2][2] = tmat[2][2] - (tmp * tmat[0][2]);\n    tmat[2][3] = tmat[2][3] - (tmp * tmat[0][3]);\n    tmat[2][4] = tmat[2][4] - (tmp * tmat[0][4]);\n    tv[i][j][2] = tv[i][j][2] - (tv[i][j][0] * tmp);\n    tmp = tmp1 * tmat[3][0];\n    tmat[3][1] = tmat[3][1] - (tmp * tmat[0][1]);\n    tmat[3][2] = tmat[3][2] - (tmp * tmat[0][2]);\n    tmat[3][3] = tmat[3][3] - (tmp * tmat[0][3]);\n    tmat[3][4] = tmat[3][4] - (tmp * tmat[0][4]);\n    tv[i][j][3] = tv[i][j][3] - (tv[i][j][0] * tmp);\n    tmp = tmp1 * tmat[4][0];\n    tmat[4][1] = tmat[4][1] - (tmp * tmat[0][1]);\n    tmat[4][2] = tmat[4][2] - (tmp * tmat[0][2]);\n    tmat[4][3] = tmat[4][3] - (tmp * tmat[0][3]);\n    tmat[4][4] = tmat[4][4] - (tmp * tmat[0][4]);\n    tv[i][j][4] = tv[i][j][4] - (tv[i][j][0] * tmp);\n    tmp1 = 1.0 / tmat[1][1];\n    tmp = tmp1 * tmat[2][1];\n    tmat[2][2] = tmat[2][2] - (tmp * tmat[1][2]);\n    tmat[2][3] = tmat[2][3] - (tmp * tmat[1][3]);\n    tmat[2][4] = tmat[2][4] - (tmp * tmat[1][4]);\n    tv[i][j][2] = tv[i][j][2] - (tv[i][j][1] * tmp);\n    tmp = tmp1 * tmat[3][1];\n    tmat[3][2] = tmat[3][2] - (tmp * tmat[1][2]);\n    tmat[3][3] = tmat[3][3] - (tmp * tmat[1][3]);\n    tmat[3][4] = tmat[3][4] - (tmp * tmat[1][4]);\n    tv[i][j][3] = tv[i][j][3] - (tv[i][j][1] * tmp);\n    tmp = tmp1 * tmat[4][1];\n    tmat[4][2] = tmat[4][2] - (tmp * tmat[1][2]);\n    tmat[4][3] = tmat[4][3] - (tmp * tmat[1][3]);\n    tmat[4][4] = tmat[4][4] - (tmp * tmat[1][4]);\n    tv[i][j][4] = tv[i][j][4] - (tv[i][j][1] * tmp);\n    tmp1 = 1.0 / tmat[2][2];\n    tmp = tmp1 * tmat[3][2];\n    tmat[3][3] = tmat[3][3] - (tmp * tmat[2][3]);\n    tmat[3][4] = tmat[3][4] - (tmp * tmat[2][4]);\n    tv[i][j][3] = tv[i][j][3] - (tv[i][j][2] * tmp);\n    tmp = tmp1 * tmat[4][2];\n    tmat[4][3] = tmat[4][3] - (tmp * tmat[2][3]);\n    tmat[4][4] = tmat[4][4] - (tmp * tmat[2][4]);\n    tv[i][j][4] = tv[i][j][4] - (tv[i][j][2] * tmp);\n    tmp1 = 1.0 / tmat[3][3];\n    tmp = tmp1 * tmat[4][3];\n    tmat[4][4] = tmat[4][4] - (tmp * tmat[3][4]);\n    tv[i][j][4] = tv[i][j][4] - (tv[i][j][3] * tmp);\n    tv[i][j][4] = tv[i][j][4] / tmat[4][4];\n    tv[i][j][3] = tv[i][j][3] - (tmat[3][4] * tv[i][j][4]);\n    tv[i][j][3] = tv[i][j][3] / tmat[3][3];\n    tv[i][j][2] = (tv[i][j][2] - (tmat[2][3] * tv[i][j][3])) - (tmat[2][4] * tv[i][j][4]);\n    tv[i][j][2] = tv[i][j][2] / tmat[2][2];\n    tv[i][j][1] = ((tv[i][j][1] - (tmat[1][2] * tv[i][j][2])) - (tmat[1][3] * tv[i][j][3])) - (tmat[1][4] * tv[i][j][4]);\n    tv[i][j][1] = tv[i][j][1] / tmat[1][1];\n    tv[i][j][0] = (((tv[i][j][0] - (tmat[0][1] * tv[i][j][1])) - (tmat[0][2] * tv[i][j][2])) - (tmat[0][3] * tv[i][j][3])) - (tmat[0][4] * tv[i][j][4]);\n    tv[i][j][0] = tv[i][j][0] / tmat[0][0];\n    v[i][j][k][0] = v[i][j][k][0] - tv[i][j][0];\n    v[i][j][k][1] = v[i][j][k][1] - tv[i][j][1];\n    v[i][j][k][2] = v[i][j][k][2] - tv[i][j][2];\n    v[i][j][k][3] = v[i][j][k][3] - tv[i][j][3];\n    v[i][j][k][4] = v[i][j][k][4] - tv[i][j][4];\n  }\n\n  if (i != iend)\n    flag[i + 1] = 0;\n\n  if (i != ist)\n    flag[i] = 1;\n\n  #pragma omp flush(flag)\n}\n", "pragma": "omp for nowait schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/3"}
{"code": "for (i = 0; i < nx; i++)\n{\n  for (j = 0; j < ny; j++)\n  {\n    for (k = 0; k < nz; k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        frct[i][j][k][m] = 0.0;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/4"}
{"code": "for (i = 0; i < nx; i++)\n{\n  iglob = i;\n  xi = ((double) iglob) / (nx0 - 1);\n  for (j = 0; j < ny; j++)\n  {\n    jglob = j;\n    eta = ((double) jglob) / (ny0 - 1);\n    for (k = 0; k < nz; k++)\n    {\n      zeta = ((double) k) / (nz - 1);\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = (((((((((((ce[m][0] + (ce[m][1] * xi)) + (ce[m][2] * eta)) + (ce[m][3] * zeta)) + ((ce[m][4] * xi) * xi)) + ((ce[m][5] * eta) * eta)) + ((ce[m][6] * zeta) * zeta)) + (((ce[m][7] * xi) * xi) * xi)) + (((ce[m][8] * eta) * eta) * eta)) + (((ce[m][9] * zeta) * zeta) * zeta)) + ((((ce[m][10] * xi) * xi) * xi) * xi)) + ((((ce[m][11] * eta) * eta) * eta) * eta)) + ((((ce[m][12] * zeta) * zeta) * zeta) * zeta);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/5"}
{"code": "for (i = L1; i <= L2; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    for (k = 1; k < (nz - 1); k++)\n    {\n      flux[i][j][k][0] = rsd[i][j][k][1];\n      u21 = rsd[i][j][k][1] / rsd[i][j][k][0];\n      q = (0.50 * (((rsd[i][j][k][1] * rsd[i][j][k][1]) + (rsd[i][j][k][2] * rsd[i][j][k][2])) + (rsd[i][j][k][3] * rsd[i][j][k][3]))) / rsd[i][j][k][0];\n      flux[i][j][k][1] = (rsd[i][j][k][1] * u21) + (C2 * (rsd[i][j][k][4] - q));\n      flux[i][j][k][2] = rsd[i][j][k][2] * u21;\n      flux[i][j][k][3] = rsd[i][j][k][3] * u21;\n      flux[i][j][k][4] = ((C1 * rsd[i][j][k][4]) - (C2 * q)) * u21;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/6"}
{"code": "for (j = jst; j <= jend; j++)\n{\n  for (k = 1; k <= (nz - 2); k++)\n  {\n    for (i = ist; i <= iend; i++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        frct[i][j][k][m] = frct[i][j][k][m] - (tx2 * (flux[i + 1][j][k][m] - flux[i - 1][j][k][m]));\n      }\n\n    }\n\n    for (i = ist; i <= L2; i++)\n    {\n      tmp = 1.0 / rsd[i][j][k][0];\n      u21i = tmp * rsd[i][j][k][1];\n      u31i = tmp * rsd[i][j][k][2];\n      u41i = tmp * rsd[i][j][k][3];\n      u51i = tmp * rsd[i][j][k][4];\n      tmp = 1.0 / rsd[i - 1][j][k][0];\n      u21im1 = tmp * rsd[i - 1][j][k][1];\n      u31im1 = tmp * rsd[i - 1][j][k][2];\n      u41im1 = tmp * rsd[i - 1][j][k][3];\n      u51im1 = tmp * rsd[i - 1][j][k][4];\n      flux[i][j][k][1] = ((4.0 / 3.0) * tx3) * (u21i - u21im1);\n      flux[i][j][k][2] = tx3 * (u31i - u31im1);\n      flux[i][j][k][3] = tx3 * (u41i - u41im1);\n      flux[i][j][k][4] = ((((0.50 * (1.0 - (C1 * C5))) * tx3) * ((((u21i * u21i) + (u31i * u31i)) + (u41i * u41i)) - (((u21im1 * u21im1) + (u31im1 * u31im1)) + (u41im1 * u41im1)))) + (((1.0 / 6.0) * tx3) * ((u21i * u21i) - (u21im1 * u21im1)))) + (((C1 * C5) * tx3) * (u51i - u51im1));\n    }\n\n    for (i = ist; i <= iend; i++)\n    {\n      frct[i][j][k][0] = frct[i][j][k][0] + ((dx1 * tx1) * ((rsd[i - 1][j][k][0] - (2.0 * rsd[i][j][k][0])) + rsd[i + 1][j][k][0]));\n      frct[i][j][k][1] = (frct[i][j][k][1] + (((tx3 * C3) * C4) * (flux[i + 1][j][k][1] - flux[i][j][k][1]))) + ((dx2 * tx1) * ((rsd[i - 1][j][k][1] - (2.0 * rsd[i][j][k][1])) + rsd[i + 1][j][k][1]));\n      frct[i][j][k][2] = (frct[i][j][k][2] + (((tx3 * C3) * C4) * (flux[i + 1][j][k][2] - flux[i][j][k][2]))) + ((dx3 * tx1) * ((rsd[i - 1][j][k][2] - (2.0 * rsd[i][j][k][2])) + rsd[i + 1][j][k][2]));\n      frct[i][j][k][3] = (frct[i][j][k][3] + (((tx3 * C3) * C4) * (flux[i + 1][j][k][3] - flux[i][j][k][3]))) + ((dx4 * tx1) * ((rsd[i - 1][j][k][3] - (2.0 * rsd[i][j][k][3])) + rsd[i + 1][j][k][3]));\n      frct[i][j][k][4] = (frct[i][j][k][4] + (((tx3 * C3) * C4) * (flux[i + 1][j][k][4] - flux[i][j][k][4]))) + ((dx5 * tx1) * ((rsd[i - 1][j][k][4] - (2.0 * rsd[i][j][k][4])) + rsd[i + 1][j][k][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      frct[1][j][k][m] = frct[1][j][k][m] - (dsspm * ((((+5.0) * rsd[1][j][k][m]) - (4.0 * rsd[2][j][k][m])) + rsd[3][j][k][m]));\n      frct[2][j][k][m] = frct[2][j][k][m] - (dsspm * (((((-4.0) * rsd[1][j][k][m]) + (6.0 * rsd[2][j][k][m])) - (4.0 * rsd[3][j][k][m])) + rsd[4][j][k][m]));\n    }\n\n    ist1 = 3;\n    iend1 = nx - 4;\n    for (i = ist1; i <= iend1; i++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        frct[i][j][k][m] = frct[i][j][k][m] - (dsspm * ((((rsd[i - 2][j][k][m] - (4.0 * rsd[i - 1][j][k][m])) + (6.0 * rsd[i][j][k][m])) - (4.0 * rsd[i + 1][j][k][m])) + rsd[i + 2][j][k][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      frct[nx - 3][j][k][m] = frct[nx - 3][j][k][m] - (dsspm * (((rsd[nx - 5][j][k][m] - (4.0 * rsd[nx - 4][j][k][m])) + (6.0 * rsd[nx - 3][j][k][m])) - (4.0 * rsd[nx - 2][j][k][m])));\n      frct[nx - 2][j][k][m] = frct[nx - 2][j][k][m] - (dsspm * ((rsd[nx - 4][j][k][m] - (4.0 * rsd[nx - 3][j][k][m])) + (5.0 * rsd[nx - 2][j][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/7"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = L1; j <= L2; j++)\n  {\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      flux[i][j][k][0] = rsd[i][j][k][2];\n      u31 = rsd[i][j][k][2] / rsd[i][j][k][0];\n      q = (0.50 * (((rsd[i][j][k][1] * rsd[i][j][k][1]) + (rsd[i][j][k][2] * rsd[i][j][k][2])) + (rsd[i][j][k][3] * rsd[i][j][k][3]))) / rsd[i][j][k][0];\n      flux[i][j][k][1] = rsd[i][j][k][1] * u31;\n      flux[i][j][k][2] = (rsd[i][j][k][2] * u31) + (C2 * (rsd[i][j][k][4] - q));\n      flux[i][j][k][3] = rsd[i][j][k][3] * u31;\n      flux[i][j][k][4] = ((C1 * rsd[i][j][k][4]) - (C2 * q)) * u31;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/8"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (k = 1; k <= (nz - 2); k++)\n  {\n    for (j = jst; j <= jend; j++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        frct[i][j][k][m] = frct[i][j][k][m] - (ty2 * (flux[i][j + 1][k][m] - flux[i][j - 1][k][m]));\n      }\n\n    }\n\n    for (j = jst; j <= L2; j++)\n    {\n      tmp = 1.0 / rsd[i][j][k][0];\n      u21j = tmp * rsd[i][j][k][1];\n      u31j = tmp * rsd[i][j][k][2];\n      u41j = tmp * rsd[i][j][k][3];\n      u51j = tmp * rsd[i][j][k][4];\n      tmp = 1.0 / rsd[i][j - 1][k][0];\n      u21jm1 = tmp * rsd[i][j - 1][k][1];\n      u31jm1 = tmp * rsd[i][j - 1][k][2];\n      u41jm1 = tmp * rsd[i][j - 1][k][3];\n      u51jm1 = tmp * rsd[i][j - 1][k][4];\n      flux[i][j][k][1] = ty3 * (u21j - u21jm1);\n      flux[i][j][k][2] = ((4.0 / 3.0) * ty3) * (u31j - u31jm1);\n      flux[i][j][k][3] = ty3 * (u41j - u41jm1);\n      flux[i][j][k][4] = ((((0.50 * (1.0 - (C1 * C5))) * ty3) * ((((u21j * u21j) + (u31j * u31j)) + (u41j * u41j)) - (((u21jm1 * u21jm1) + (u31jm1 * u31jm1)) + (u41jm1 * u41jm1)))) + (((1.0 / 6.0) * ty3) * ((u31j * u31j) - (u31jm1 * u31jm1)))) + (((C1 * C5) * ty3) * (u51j - u51jm1));\n    }\n\n    for (j = jst; j <= jend; j++)\n    {\n      frct[i][j][k][0] = frct[i][j][k][0] + ((dy1 * ty1) * ((rsd[i][j - 1][k][0] - (2.0 * rsd[i][j][k][0])) + rsd[i][j + 1][k][0]));\n      frct[i][j][k][1] = (frct[i][j][k][1] + (((ty3 * C3) * C4) * (flux[i][j + 1][k][1] - flux[i][j][k][1]))) + ((dy2 * ty1) * ((rsd[i][j - 1][k][1] - (2.0 * rsd[i][j][k][1])) + rsd[i][j + 1][k][1]));\n      frct[i][j][k][2] = (frct[i][j][k][2] + (((ty3 * C3) * C4) * (flux[i][j + 1][k][2] - flux[i][j][k][2]))) + ((dy3 * ty1) * ((rsd[i][j - 1][k][2] - (2.0 * rsd[i][j][k][2])) + rsd[i][j + 1][k][2]));\n      frct[i][j][k][3] = (frct[i][j][k][3] + (((ty3 * C3) * C4) * (flux[i][j + 1][k][3] - flux[i][j][k][3]))) + ((dy4 * ty1) * ((rsd[i][j - 1][k][3] - (2.0 * rsd[i][j][k][3])) + rsd[i][j + 1][k][3]));\n      frct[i][j][k][4] = (frct[i][j][k][4] + (((ty3 * C3) * C4) * (flux[i][j + 1][k][4] - flux[i][j][k][4]))) + ((dy5 * ty1) * ((rsd[i][j - 1][k][4] - (2.0 * rsd[i][j][k][4])) + rsd[i][j + 1][k][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      frct[i][1][k][m] = frct[i][1][k][m] - (dsspm * ((((+5.0) * rsd[i][1][k][m]) - (4.0 * rsd[i][2][k][m])) + rsd[i][3][k][m]));\n      frct[i][2][k][m] = frct[i][2][k][m] - (dsspm * (((((-4.0) * rsd[i][1][k][m]) + (6.0 * rsd[i][2][k][m])) - (4.0 * rsd[i][3][k][m])) + rsd[i][4][k][m]));\n    }\n\n    jst1 = 3;\n    jend1 = ny - 4;\n    for (j = jst1; j <= jend1; j++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        frct[i][j][k][m] = frct[i][j][k][m] - (dsspm * ((((rsd[i][j - 2][k][m] - (4.0 * rsd[i][j - 1][k][m])) + (6.0 * rsd[i][j][k][m])) - (4.0 * rsd[i][j + 1][k][m])) + rsd[i][j + 2][k][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      frct[i][ny - 3][k][m] = frct[i][ny - 3][k][m] - (dsspm * (((rsd[i][ny - 5][k][m] - (4.0 * rsd[i][ny - 4][k][m])) + (6.0 * rsd[i][ny - 3][k][m])) - (4.0 * rsd[i][ny - 2][k][m])));\n      frct[i][ny - 2][k][m] = frct[i][ny - 2][k][m] - (dsspm * ((rsd[i][ny - 4][k][m] - (4.0 * rsd[i][ny - 3][k][m])) + (5.0 * rsd[i][ny - 2][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/9"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    for (k = 0; k <= (nz - 1); k++)\n    {\n      flux[i][j][k][0] = rsd[i][j][k][3];\n      u41 = rsd[i][j][k][3] / rsd[i][j][k][0];\n      q = (0.50 * (((rsd[i][j][k][1] * rsd[i][j][k][1]) + (rsd[i][j][k][2] * rsd[i][j][k][2])) + (rsd[i][j][k][3] * rsd[i][j][k][3]))) / rsd[i][j][k][0];\n      flux[i][j][k][1] = rsd[i][j][k][1] * u41;\n      flux[i][j][k][2] = rsd[i][j][k][2] * u41;\n      flux[i][j][k][3] = (rsd[i][j][k][3] * u41) + (C2 * (rsd[i][j][k][4] - q));\n      flux[i][j][k][4] = ((C1 * rsd[i][j][k][4]) - (C2 * q)) * u41;\n    }\n\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        frct[i][j][k][m] = frct[i][j][k][m] - (tz2 * (flux[i][j][k + 1][m] - flux[i][j][k - 1][m]));\n      }\n\n    }\n\n    for (k = 1; k <= (nz - 1); k++)\n    {\n      tmp = 1.0 / rsd[i][j][k][0];\n      u21k = tmp * rsd[i][j][k][1];\n      u31k = tmp * rsd[i][j][k][2];\n      u41k = tmp * rsd[i][j][k][3];\n      u51k = tmp * rsd[i][j][k][4];\n      tmp = 1.0 / rsd[i][j][k - 1][0];\n      u21km1 = tmp * rsd[i][j][k - 1][1];\n      u31km1 = tmp * rsd[i][j][k - 1][2];\n      u41km1 = tmp * rsd[i][j][k - 1][3];\n      u51km1 = tmp * rsd[i][j][k - 1][4];\n      flux[i][j][k][1] = tz3 * (u21k - u21km1);\n      flux[i][j][k][2] = tz3 * (u31k - u31km1);\n      flux[i][j][k][3] = ((4.0 / 3.0) * tz3) * (u41k - u41km1);\n      flux[i][j][k][4] = ((((0.50 * (1.0 - (C1 * C5))) * tz3) * ((((u21k * u21k) + (u31k * u31k)) + (u41k * u41k)) - (((u21km1 * u21km1) + (u31km1 * u31km1)) + (u41km1 * u41km1)))) + (((1.0 / 6.0) * tz3) * ((u41k * u41k) - (u41km1 * u41km1)))) + (((C1 * C5) * tz3) * (u51k - u51km1));\n    }\n\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      frct[i][j][k][0] = frct[i][j][k][0] + ((dz1 * tz1) * ((rsd[i][j][k + 1][0] - (2.0 * rsd[i][j][k][0])) + rsd[i][j][k - 1][0]));\n      frct[i][j][k][1] = (frct[i][j][k][1] + (((tz3 * C3) * C4) * (flux[i][j][k + 1][1] - flux[i][j][k][1]))) + ((dz2 * tz1) * ((rsd[i][j][k + 1][1] - (2.0 * rsd[i][j][k][1])) + rsd[i][j][k - 1][1]));\n      frct[i][j][k][2] = (frct[i][j][k][2] + (((tz3 * C3) * C4) * (flux[i][j][k + 1][2] - flux[i][j][k][2]))) + ((dz3 * tz1) * ((rsd[i][j][k + 1][2] - (2.0 * rsd[i][j][k][2])) + rsd[i][j][k - 1][2]));\n      frct[i][j][k][3] = (frct[i][j][k][3] + (((tz3 * C3) * C4) * (flux[i][j][k + 1][3] - flux[i][j][k][3]))) + ((dz4 * tz1) * ((rsd[i][j][k + 1][3] - (2.0 * rsd[i][j][k][3])) + rsd[i][j][k - 1][3]));\n      frct[i][j][k][4] = (frct[i][j][k][4] + (((tz3 * C3) * C4) * (flux[i][j][k + 1][4] - flux[i][j][k][4]))) + ((dz5 * tz1) * ((rsd[i][j][k + 1][4] - (2.0 * rsd[i][j][k][4])) + rsd[i][j][k - 1][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      frct[i][j][1][m] = frct[i][j][1][m] - (dsspm * ((((+5.0) * rsd[i][j][1][m]) - (4.0 * rsd[i][j][2][m])) + rsd[i][j][3][m]));\n      frct[i][j][2][m] = frct[i][j][2][m] - (dsspm * (((((-4.0) * rsd[i][j][1][m]) + (6.0 * rsd[i][j][2][m])) - (4.0 * rsd[i][j][3][m])) + rsd[i][j][4][m]));\n    }\n\n    for (k = 3; k <= (nz - 4); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        frct[i][j][k][m] = frct[i][j][k][m] - (dsspm * ((((rsd[i][j][k - 2][m] - (4.0 * rsd[i][j][k - 1][m])) + (6.0 * rsd[i][j][k][m])) - (4.0 * rsd[i][j][k + 1][m])) + rsd[i][j][k + 2][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      frct[i][j][nz - 3][m] = frct[i][j][nz - 3][m] - (dsspm * (((rsd[i][j][nz - 5][m] - (4.0 * rsd[i][j][nz - 4][m])) + (6.0 * rsd[i][j][nz - 3][m])) - (4.0 * rsd[i][j][nz - 2][m])));\n      frct[i][j][nz - 2][m] = frct[i][j][nz - 2][m] - (dsspm * ((rsd[i][j][nz - 4][m] - (4.0 * rsd[i][j][nz - 3][m])) + (5.0 * rsd[i][j][nz - 2][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/10"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    tmp1 = 1.0 / u[i][j][k][0];\n    tmp2 = tmp1 * tmp1;\n    tmp3 = tmp1 * tmp2;\n    d[i][j][0][0] = 1.0 + ((dt * 2.0) * (((tx1 * dx1) + (ty1 * dy1)) + (tz1 * dz1)));\n    d[i][j][0][1] = 0.0;\n    d[i][j][0][2] = 0.0;\n    d[i][j][0][3] = 0.0;\n    d[i][j][0][4] = 0.0;\n    d[i][j][1][0] = (dt * 2.0) * (((tx1 * ((((-r43) * c34) * tmp2) * u[i][j][k][1])) + (ty1 * (((-c34) * tmp2) * u[i][j][k][1]))) + (tz1 * (((-c34) * tmp2) * u[i][j][k][1])));\n    d[i][j][1][1] = (1.0 + ((dt * 2.0) * (((((tx1 * r43) * c34) * tmp1) + ((ty1 * c34) * tmp1)) + ((tz1 * c34) * tmp1)))) + ((dt * 2.0) * (((tx1 * dx2) + (ty1 * dy2)) + (tz1 * dz2)));\n    d[i][j][1][2] = 0.0;\n    d[i][j][1][3] = 0.0;\n    d[i][j][1][4] = 0.0;\n    d[i][j][2][0] = (dt * 2.0) * (((tx1 * (((-c34) * tmp2) * u[i][j][k][2])) + (ty1 * ((((-r43) * c34) * tmp2) * u[i][j][k][2]))) + (tz1 * (((-c34) * tmp2) * u[i][j][k][2])));\n    d[i][j][2][1] = 0.0;\n    d[i][j][2][2] = (1.0 + ((dt * 2.0) * ((((tx1 * c34) * tmp1) + (((ty1 * r43) * c34) * tmp1)) + ((tz1 * c34) * tmp1)))) + ((dt * 2.0) * (((tx1 * dx3) + (ty1 * dy3)) + (tz1 * dz3)));\n    d[i][j][2][3] = 0.0;\n    d[i][j][2][4] = 0.0;\n    d[i][j][3][0] = (dt * 2.0) * (((tx1 * (((-c34) * tmp2) * u[i][j][k][3])) + (ty1 * (((-c34) * tmp2) * u[i][j][k][3]))) + (tz1 * ((((-r43) * c34) * tmp2) * u[i][j][k][3])));\n    d[i][j][3][1] = 0.0;\n    d[i][j][3][2] = 0.0;\n    d[i][j][3][3] = (1.0 + ((dt * 2.0) * ((((tx1 * c34) * tmp1) + ((ty1 * c34) * tmp1)) + (((tz1 * r43) * c34) * tmp1)))) + ((dt * 2.0) * (((tx1 * dx4) + (ty1 * dy4)) + (tz1 * dz4)));\n    d[i][j][3][4] = 0.0;\n    d[i][j][4][0] = (dt * 2.0) * (((tx1 * ((((((-((r43 * c34) - c1345)) * tmp3) * pow2(u[i][j][k][1])) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k][2]))) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4]))) + (ty1 * ((((((-(c34 - c1345)) * tmp3) * pow2(u[i][j][k][1])) - ((((r43 * c34) - c1345) * tmp3) * pow2(u[i][j][k][2]))) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4])))) + (tz1 * ((((((-(c34 - c1345)) * tmp3) * pow2(u[i][j][k][1])) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k][2]))) - ((((r43 * c34) - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4]))));\n    d[i][j][4][1] = (dt * 2.0) * (((((tx1 * ((r43 * c34) - c1345)) * tmp2) * u[i][j][k][1]) + (((ty1 * (c34 - c1345)) * tmp2) * u[i][j][k][1])) + (((tz1 * (c34 - c1345)) * tmp2) * u[i][j][k][1]));\n    d[i][j][4][2] = (dt * 2.0) * (((((tx1 * (c34 - c1345)) * tmp2) * u[i][j][k][2]) + (((ty1 * ((r43 * c34) - c1345)) * tmp2) * u[i][j][k][2])) + (((tz1 * (c34 - c1345)) * tmp2) * u[i][j][k][2]));\n    d[i][j][4][3] = (dt * 2.0) * (((((tx1 * (c34 - c1345)) * tmp2) * u[i][j][k][3]) + (((ty1 * (c34 - c1345)) * tmp2) * u[i][j][k][3])) + (((tz1 * ((r43 * c34) - c1345)) * tmp2) * u[i][j][k][3]));\n    d[i][j][4][4] = (1.0 + ((dt * 2.0) * ((((tx1 * c1345) * tmp1) + ((ty1 * c1345) * tmp1)) + ((tz1 * c1345) * tmp1)))) + ((dt * 2.0) * (((tx1 * dx5) + (ty1 * dy5)) + (tz1 * dz5)));\n    tmp1 = 1.0 / u[i][j][k - 1][0];\n    tmp2 = tmp1 * tmp1;\n    tmp3 = tmp1 * tmp2;\n    a[i][j][0][0] = ((-dt) * tz1) * dz1;\n    a[i][j][0][1] = 0.0;\n    a[i][j][0][2] = 0.0;\n    a[i][j][0][3] = (-dt) * tz2;\n    a[i][j][0][4] = 0.0;\n    a[i][j][1][0] = (((-dt) * tz2) * ((-(u[i][j][k - 1][1] * u[i][j][k - 1][3])) * tmp2)) - ((dt * tz1) * (((-c34) * tmp2) * u[i][j][k - 1][1]));\n    a[i][j][1][1] = ((((-dt) * tz2) * (u[i][j][k - 1][3] * tmp1)) - (((dt * tz1) * c34) * tmp1)) - ((dt * tz1) * dz2);\n    a[i][j][1][2] = 0.0;\n    a[i][j][1][3] = ((-dt) * tz2) * (u[i][j][k - 1][1] * tmp1);\n    a[i][j][1][4] = 0.0;\n    a[i][j][2][0] = (((-dt) * tz2) * ((-(u[i][j][k - 1][2] * u[i][j][k - 1][3])) * tmp2)) - ((dt * tz1) * (((-c34) * tmp2) * u[i][j][k - 1][2]));\n    a[i][j][2][1] = 0.0;\n    a[i][j][2][2] = ((((-dt) * tz2) * (u[i][j][k - 1][3] * tmp1)) - ((dt * tz1) * (c34 * tmp1))) - ((dt * tz1) * dz3);\n    a[i][j][2][3] = ((-dt) * tz2) * (u[i][j][k - 1][2] * tmp1);\n    a[i][j][2][4] = 0.0;\n    a[i][j][3][0] = (((-dt) * tz2) * (((-(u[i][j][k - 1][3] * tmp1)) * (u[i][j][k - 1][3] * tmp1)) + ((0.50 * C2) * ((((u[i][j][k - 1][1] * u[i][j][k - 1][1]) + (u[i][j][k - 1][2] * u[i][j][k - 1][2])) + (u[i][j][k - 1][3] * u[i][j][k - 1][3])) * tmp2)))) - ((dt * tz1) * ((((-r43) * c34) * tmp2) * u[i][j][k - 1][3]));\n    a[i][j][3][1] = ((-dt) * tz2) * ((-C2) * (u[i][j][k - 1][1] * tmp1));\n    a[i][j][3][2] = ((-dt) * tz2) * ((-C2) * (u[i][j][k - 1][2] * tmp1));\n    a[i][j][3][3] = (((((-dt) * tz2) * (2.0 - C2)) * (u[i][j][k - 1][3] * tmp1)) - ((dt * tz1) * ((r43 * c34) * tmp1))) - ((dt * tz1) * dz4);\n    a[i][j][3][4] = ((-dt) * tz2) * C2;\n    a[i][j][4][0] = (((-dt) * tz2) * ((((C2 * (((u[i][j][k - 1][1] * u[i][j][k - 1][1]) + (u[i][j][k - 1][2] * u[i][j][k - 1][2])) + (u[i][j][k - 1][3] * u[i][j][k - 1][3]))) * tmp2) - (C1 * (u[i][j][k - 1][4] * tmp1))) * (u[i][j][k - 1][3] * tmp1))) - ((dt * tz1) * ((((((-(c34 - c1345)) * tmp3) * (u[i][j][k - 1][1] * u[i][j][k - 1][1])) - (((c34 - c1345) * tmp3) * (u[i][j][k - 1][2] * u[i][j][k - 1][2]))) - ((((r43 * c34) - c1345) * tmp3) * (u[i][j][k - 1][3] * u[i][j][k - 1][3]))) - ((c1345 * tmp2) * u[i][j][k - 1][4])));\n    a[i][j][4][1] = (((-dt) * tz2) * (((-C2) * (u[i][j][k - 1][1] * u[i][j][k - 1][3])) * tmp2)) - ((((dt * tz1) * (c34 - c1345)) * tmp2) * u[i][j][k - 1][1]);\n    a[i][j][4][2] = (((-dt) * tz2) * (((-C2) * (u[i][j][k - 1][2] * u[i][j][k - 1][3])) * tmp2)) - ((((dt * tz1) * (c34 - c1345)) * tmp2) * u[i][j][k - 1][2]);\n    a[i][j][4][3] = (((-dt) * tz2) * ((C1 * (u[i][j][k - 1][4] * tmp1)) - ((0.50 * C2) * ((((u[i][j][k - 1][1] * u[i][j][k - 1][1]) + (u[i][j][k - 1][2] * u[i][j][k - 1][2])) + ((3.0 * u[i][j][k - 1][3]) * u[i][j][k - 1][3])) * tmp2)))) - ((((dt * tz1) * ((r43 * c34) - c1345)) * tmp2) * u[i][j][k - 1][3]);\n    a[i][j][4][4] = ((((-dt) * tz2) * (C1 * (u[i][j][k - 1][3] * tmp1))) - (((dt * tz1) * c1345) * tmp1)) - ((dt * tz1) * dz5);\n    tmp1 = 1.0 / u[i][j - 1][k][0];\n    tmp2 = tmp1 * tmp1;\n    tmp3 = tmp1 * tmp2;\n    b[i][j][0][0] = ((-dt) * ty1) * dy1;\n    b[i][j][0][1] = 0.0;\n    b[i][j][0][2] = (-dt) * ty2;\n    b[i][j][0][3] = 0.0;\n    b[i][j][0][4] = 0.0;\n    b[i][j][1][0] = (((-dt) * ty2) * ((-(u[i][j - 1][k][1] * u[i][j - 1][k][2])) * tmp2)) - ((dt * ty1) * (((-c34) * tmp2) * u[i][j - 1][k][1]));\n    b[i][j][1][1] = ((((-dt) * ty2) * (u[i][j - 1][k][2] * tmp1)) - ((dt * ty1) * (c34 * tmp1))) - ((dt * ty1) * dy2);\n    b[i][j][1][2] = ((-dt) * ty2) * (u[i][j - 1][k][1] * tmp1);\n    b[i][j][1][3] = 0.0;\n    b[i][j][1][4] = 0.0;\n    b[i][j][2][0] = (((-dt) * ty2) * (((-(u[i][j - 1][k][2] * tmp1)) * (u[i][j - 1][k][2] * tmp1)) + ((0.50 * C2) * ((((u[i][j - 1][k][1] * u[i][j - 1][k][1]) + (u[i][j - 1][k][2] * u[i][j - 1][k][2])) + (u[i][j - 1][k][3] * u[i][j - 1][k][3])) * tmp2)))) - ((dt * ty1) * ((((-r43) * c34) * tmp2) * u[i][j - 1][k][2]));\n    b[i][j][2][1] = ((-dt) * ty2) * ((-C2) * (u[i][j - 1][k][1] * tmp1));\n    b[i][j][2][2] = ((((-dt) * ty2) * ((2.0 - C2) * (u[i][j - 1][k][2] * tmp1))) - ((dt * ty1) * ((r43 * c34) * tmp1))) - ((dt * ty1) * dy3);\n    b[i][j][2][3] = ((-dt) * ty2) * ((-C2) * (u[i][j - 1][k][3] * tmp1));\n    b[i][j][2][4] = ((-dt) * ty2) * C2;\n    b[i][j][3][0] = (((-dt) * ty2) * ((-(u[i][j - 1][k][2] * u[i][j - 1][k][3])) * tmp2)) - ((dt * ty1) * (((-c34) * tmp2) * u[i][j - 1][k][3]));\n    b[i][j][3][1] = 0.0;\n    b[i][j][3][2] = ((-dt) * ty2) * (u[i][j - 1][k][3] * tmp1);\n    b[i][j][3][3] = ((((-dt) * ty2) * (u[i][j - 1][k][2] * tmp1)) - ((dt * ty1) * (c34 * tmp1))) - ((dt * ty1) * dy4);\n    b[i][j][3][4] = 0.0;\n    b[i][j][4][0] = (((-dt) * ty2) * ((((C2 * (((u[i][j - 1][k][1] * u[i][j - 1][k][1]) + (u[i][j - 1][k][2] * u[i][j - 1][k][2])) + (u[i][j - 1][k][3] * u[i][j - 1][k][3]))) * tmp2) - (C1 * (u[i][j - 1][k][4] * tmp1))) * (u[i][j - 1][k][2] * tmp1))) - ((dt * ty1) * ((((((-(c34 - c1345)) * tmp3) * pow2(u[i][j - 1][k][1])) - ((((r43 * c34) - c1345) * tmp3) * pow2(u[i][j - 1][k][2]))) - (((c34 - c1345) * tmp3) * pow2(u[i][j - 1][k][3]))) - ((c1345 * tmp2) * u[i][j - 1][k][4])));\n    b[i][j][4][1] = (((-dt) * ty2) * (((-C2) * (u[i][j - 1][k][1] * u[i][j - 1][k][2])) * tmp2)) - ((((dt * ty1) * (c34 - c1345)) * tmp2) * u[i][j - 1][k][1]);\n    b[i][j][4][2] = (((-dt) * ty2) * ((C1 * (u[i][j - 1][k][4] * tmp1)) - ((0.50 * C2) * ((((u[i][j - 1][k][1] * u[i][j - 1][k][1]) + ((3.0 * u[i][j - 1][k][2]) * u[i][j - 1][k][2])) + (u[i][j - 1][k][3] * u[i][j - 1][k][3])) * tmp2)))) - ((((dt * ty1) * ((r43 * c34) - c1345)) * tmp2) * u[i][j - 1][k][2]);\n    b[i][j][4][3] = (((-dt) * ty2) * (((-C2) * (u[i][j - 1][k][2] * u[i][j - 1][k][3])) * tmp2)) - ((((dt * ty1) * (c34 - c1345)) * tmp2) * u[i][j - 1][k][3]);\n    b[i][j][4][4] = ((((-dt) * ty2) * (C1 * (u[i][j - 1][k][2] * tmp1))) - (((dt * ty1) * c1345) * tmp1)) - ((dt * ty1) * dy5);\n    tmp1 = 1.0 / u[i - 1][j][k][0];\n    tmp2 = tmp1 * tmp1;\n    tmp3 = tmp1 * tmp2;\n    c[i][j][0][0] = ((-dt) * tx1) * dx1;\n    c[i][j][0][1] = (-dt) * tx2;\n    c[i][j][0][2] = 0.0;\n    c[i][j][0][3] = 0.0;\n    c[i][j][0][4] = 0.0;\n    c[i][j][1][0] = (((-dt) * tx2) * (((-(u[i - 1][j][k][1] * tmp1)) * (u[i - 1][j][k][1] * tmp1)) + (((C2 * 0.50) * (((u[i - 1][j][k][1] * u[i - 1][j][k][1]) + (u[i - 1][j][k][2] * u[i - 1][j][k][2])) + (u[i - 1][j][k][3] * u[i - 1][j][k][3]))) * tmp2))) - ((dt * tx1) * ((((-r43) * c34) * tmp2) * u[i - 1][j][k][1]));\n    c[i][j][1][1] = ((((-dt) * tx2) * ((2.0 - C2) * (u[i - 1][j][k][1] * tmp1))) - ((dt * tx1) * ((r43 * c34) * tmp1))) - ((dt * tx1) * dx2);\n    c[i][j][1][2] = ((-dt) * tx2) * ((-C2) * (u[i - 1][j][k][2] * tmp1));\n    c[i][j][1][3] = ((-dt) * tx2) * ((-C2) * (u[i - 1][j][k][3] * tmp1));\n    c[i][j][1][4] = ((-dt) * tx2) * C2;\n    c[i][j][2][0] = (((-dt) * tx2) * ((-(u[i - 1][j][k][1] * u[i - 1][j][k][2])) * tmp2)) - ((dt * tx1) * (((-c34) * tmp2) * u[i - 1][j][k][2]));\n    c[i][j][2][1] = ((-dt) * tx2) * (u[i - 1][j][k][2] * tmp1);\n    c[i][j][2][2] = ((((-dt) * tx2) * (u[i - 1][j][k][1] * tmp1)) - ((dt * tx1) * (c34 * tmp1))) - ((dt * tx1) * dx3);\n    c[i][j][2][3] = 0.0;\n    c[i][j][2][4] = 0.0;\n    c[i][j][3][0] = (((-dt) * tx2) * ((-(u[i - 1][j][k][1] * u[i - 1][j][k][3])) * tmp2)) - ((dt * tx1) * (((-c34) * tmp2) * u[i - 1][j][k][3]));\n    c[i][j][3][1] = ((-dt) * tx2) * (u[i - 1][j][k][3] * tmp1);\n    c[i][j][3][2] = 0.0;\n    c[i][j][3][3] = ((((-dt) * tx2) * (u[i - 1][j][k][1] * tmp1)) - ((dt * tx1) * (c34 * tmp1))) - ((dt * tx1) * dx4);\n    c[i][j][3][4] = 0.0;\n    c[i][j][4][0] = (((-dt) * tx2) * ((((C2 * (((u[i - 1][j][k][1] * u[i - 1][j][k][1]) + (u[i - 1][j][k][2] * u[i - 1][j][k][2])) + (u[i - 1][j][k][3] * u[i - 1][j][k][3]))) * tmp2) - (C1 * (u[i - 1][j][k][4] * tmp1))) * (u[i - 1][j][k][1] * tmp1))) - ((dt * tx1) * ((((((-((r43 * c34) - c1345)) * tmp3) * pow2(u[i - 1][j][k][1])) - (((c34 - c1345) * tmp3) * pow2(u[i - 1][j][k][2]))) - (((c34 - c1345) * tmp3) * pow2(u[i - 1][j][k][3]))) - ((c1345 * tmp2) * u[i - 1][j][k][4])));\n    c[i][j][4][1] = (((-dt) * tx2) * ((C1 * (u[i - 1][j][k][4] * tmp1)) - ((0.50 * C2) * (((((3.0 * u[i - 1][j][k][1]) * u[i - 1][j][k][1]) + (u[i - 1][j][k][2] * u[i - 1][j][k][2])) + (u[i - 1][j][k][3] * u[i - 1][j][k][3])) * tmp2)))) - ((((dt * tx1) * ((r43 * c34) - c1345)) * tmp2) * u[i - 1][j][k][1]);\n    c[i][j][4][2] = (((-dt) * tx2) * (((-C2) * (u[i - 1][j][k][2] * u[i - 1][j][k][1])) * tmp2)) - ((((dt * tx1) * (c34 - c1345)) * tmp2) * u[i - 1][j][k][2]);\n    c[i][j][4][3] = (((-dt) * tx2) * (((-C2) * (u[i - 1][j][k][3] * u[i - 1][j][k][1])) * tmp2)) - ((((dt * tx1) * (c34 - c1345)) * tmp2) * u[i - 1][j][k][3]);\n    c[i][j][4][4] = ((((-dt) * tx2) * (C1 * (u[i - 1][j][k][1] * tmp1))) - (((dt * tx1) * c1345) * tmp1)) - ((dt * tx1) * dx5);\n  }\n\n}\n", "pragma": "omp for nowait schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/11"}
{"code": "for (i = iend; i >= ist; i--)\n{\n  for (j = jend; j >= jst; j--)\n  {\n    tmp1 = 1.0 / u[i][j][k][0];\n    tmp2 = tmp1 * tmp1;\n    tmp3 = tmp1 * tmp2;\n    d[i][j][0][0] = 1.0 + ((dt * 2.0) * (((tx1 * dx1) + (ty1 * dy1)) + (tz1 * dz1)));\n    d[i][j][0][1] = 0.0;\n    d[i][j][0][2] = 0.0;\n    d[i][j][0][3] = 0.0;\n    d[i][j][0][4] = 0.0;\n    d[i][j][1][0] = (dt * 2.0) * (((tx1 * ((((-r43) * c34) * tmp2) * u[i][j][k][1])) + (ty1 * (((-c34) * tmp2) * u[i][j][k][1]))) + (tz1 * (((-c34) * tmp2) * u[i][j][k][1])));\n    d[i][j][1][1] = (1.0 + ((dt * 2.0) * (((((tx1 * r43) * c34) * tmp1) + ((ty1 * c34) * tmp1)) + ((tz1 * c34) * tmp1)))) + ((dt * 2.0) * (((tx1 * dx2) + (ty1 * dy2)) + (tz1 * dz2)));\n    d[i][j][1][2] = 0.0;\n    d[i][j][1][3] = 0.0;\n    d[i][j][1][4] = 0.0;\n    d[i][j][2][0] = (dt * 2.0) * (((tx1 * (((-c34) * tmp2) * u[i][j][k][2])) + (ty1 * ((((-r43) * c34) * tmp2) * u[i][j][k][2]))) + (tz1 * (((-c34) * tmp2) * u[i][j][k][2])));\n    d[i][j][2][1] = 0.0;\n    d[i][j][2][2] = (1.0 + ((dt * 2.0) * ((((tx1 * c34) * tmp1) + (((ty1 * r43) * c34) * tmp1)) + ((tz1 * c34) * tmp1)))) + ((dt * 2.0) * (((tx1 * dx3) + (ty1 * dy3)) + (tz1 * dz3)));\n    d[i][j][2][3] = 0.0;\n    d[i][j][2][4] = 0.0;\n    d[i][j][3][0] = (dt * 2.0) * (((tx1 * (((-c34) * tmp2) * u[i][j][k][3])) + (ty1 * (((-c34) * tmp2) * u[i][j][k][3]))) + (tz1 * ((((-r43) * c34) * tmp2) * u[i][j][k][3])));\n    d[i][j][3][1] = 0.0;\n    d[i][j][3][2] = 0.0;\n    d[i][j][3][3] = (1.0 + ((dt * 2.0) * ((((tx1 * c34) * tmp1) + ((ty1 * c34) * tmp1)) + (((tz1 * r43) * c34) * tmp1)))) + ((dt * 2.0) * (((tx1 * dx4) + (ty1 * dy4)) + (tz1 * dz4)));\n    d[i][j][3][4] = 0.0;\n    d[i][j][4][0] = (dt * 2.0) * (((tx1 * ((((((-((r43 * c34) - c1345)) * tmp3) * pow2(u[i][j][k][1])) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k][2]))) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4]))) + (ty1 * ((((((-(c34 - c1345)) * tmp3) * pow2(u[i][j][k][1])) - ((((r43 * c34) - c1345) * tmp3) * pow2(u[i][j][k][2]))) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4])))) + (tz1 * ((((((-(c34 - c1345)) * tmp3) * pow2(u[i][j][k][1])) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k][2]))) - ((((r43 * c34) - c1345) * tmp3) * pow2(u[i][j][k][3]))) - ((c1345 * tmp2) * u[i][j][k][4]))));\n    d[i][j][4][1] = (dt * 2.0) * (((((tx1 * ((r43 * c34) - c1345)) * tmp2) * u[i][j][k][1]) + (((ty1 * (c34 - c1345)) * tmp2) * u[i][j][k][1])) + (((tz1 * (c34 - c1345)) * tmp2) * u[i][j][k][1]));\n    d[i][j][4][2] = (dt * 2.0) * (((((tx1 * (c34 - c1345)) * tmp2) * u[i][j][k][2]) + (((ty1 * ((r43 * c34) - c1345)) * tmp2) * u[i][j][k][2])) + (((tz1 * (c34 - c1345)) * tmp2) * u[i][j][k][2]));\n    d[i][j][4][3] = (dt * 2.0) * (((((tx1 * (c34 - c1345)) * tmp2) * u[i][j][k][3]) + (((ty1 * (c34 - c1345)) * tmp2) * u[i][j][k][3])) + (((tz1 * ((r43 * c34) - c1345)) * tmp2) * u[i][j][k][3]));\n    d[i][j][4][4] = (1.0 + ((dt * 2.0) * ((((tx1 * c1345) * tmp1) + ((ty1 * c1345) * tmp1)) + ((tz1 * c1345) * tmp1)))) + ((dt * 2.0) * (((tx1 * dx5) + (ty1 * dy5)) + (tz1 * dz5)));\n    tmp1 = 1.0 / u[i + 1][j][k][0];\n    tmp2 = tmp1 * tmp1;\n    tmp3 = tmp1 * tmp2;\n    a[i][j][0][0] = ((-dt) * tx1) * dx1;\n    a[i][j][0][1] = dt * tx2;\n    a[i][j][0][2] = 0.0;\n    a[i][j][0][3] = 0.0;\n    a[i][j][0][4] = 0.0;\n    a[i][j][1][0] = ((dt * tx2) * (((-(u[i + 1][j][k][1] * tmp1)) * (u[i + 1][j][k][1] * tmp1)) + (((C2 * 0.50) * (((u[i + 1][j][k][1] * u[i + 1][j][k][1]) + (u[i + 1][j][k][2] * u[i + 1][j][k][2])) + (u[i + 1][j][k][3] * u[i + 1][j][k][3]))) * tmp2))) - ((dt * tx1) * ((((-r43) * c34) * tmp2) * u[i + 1][j][k][1]));\n    a[i][j][1][1] = (((dt * tx2) * ((2.0 - C2) * (u[i + 1][j][k][1] * tmp1))) - ((dt * tx1) * ((r43 * c34) * tmp1))) - ((dt * tx1) * dx2);\n    a[i][j][1][2] = (dt * tx2) * ((-C2) * (u[i + 1][j][k][2] * tmp1));\n    a[i][j][1][3] = (dt * tx2) * ((-C2) * (u[i + 1][j][k][3] * tmp1));\n    a[i][j][1][4] = (dt * tx2) * C2;\n    a[i][j][2][0] = ((dt * tx2) * ((-(u[i + 1][j][k][1] * u[i + 1][j][k][2])) * tmp2)) - ((dt * tx1) * (((-c34) * tmp2) * u[i + 1][j][k][2]));\n    a[i][j][2][1] = (dt * tx2) * (u[i + 1][j][k][2] * tmp1);\n    a[i][j][2][2] = (((dt * tx2) * (u[i + 1][j][k][1] * tmp1)) - ((dt * tx1) * (c34 * tmp1))) - ((dt * tx1) * dx3);\n    a[i][j][2][3] = 0.0;\n    a[i][j][2][4] = 0.0;\n    a[i][j][3][0] = ((dt * tx2) * ((-(u[i + 1][j][k][1] * u[i + 1][j][k][3])) * tmp2)) - ((dt * tx1) * (((-c34) * tmp2) * u[i + 1][j][k][3]));\n    a[i][j][3][1] = (dt * tx2) * (u[i + 1][j][k][3] * tmp1);\n    a[i][j][3][2] = 0.0;\n    a[i][j][3][3] = (((dt * tx2) * (u[i + 1][j][k][1] * tmp1)) - ((dt * tx1) * (c34 * tmp1))) - ((dt * tx1) * dx4);\n    a[i][j][3][4] = 0.0;\n    a[i][j][4][0] = ((dt * tx2) * ((((C2 * (((u[i + 1][j][k][1] * u[i + 1][j][k][1]) + (u[i + 1][j][k][2] * u[i + 1][j][k][2])) + (u[i + 1][j][k][3] * u[i + 1][j][k][3]))) * tmp2) - (C1 * (u[i + 1][j][k][4] * tmp1))) * (u[i + 1][j][k][1] * tmp1))) - ((dt * tx1) * ((((((-((r43 * c34) - c1345)) * tmp3) * pow2(u[i + 1][j][k][1])) - (((c34 - c1345) * tmp3) * pow2(u[i + 1][j][k][2]))) - (((c34 - c1345) * tmp3) * pow2(u[i + 1][j][k][3]))) - ((c1345 * tmp2) * u[i + 1][j][k][4])));\n    a[i][j][4][1] = ((dt * tx2) * ((C1 * (u[i + 1][j][k][4] * tmp1)) - ((0.50 * C2) * (((((3.0 * u[i + 1][j][k][1]) * u[i + 1][j][k][1]) + (u[i + 1][j][k][2] * u[i + 1][j][k][2])) + (u[i + 1][j][k][3] * u[i + 1][j][k][3])) * tmp2)))) - ((((dt * tx1) * ((r43 * c34) - c1345)) * tmp2) * u[i + 1][j][k][1]);\n    a[i][j][4][2] = ((dt * tx2) * (((-C2) * (u[i + 1][j][k][2] * u[i + 1][j][k][1])) * tmp2)) - ((((dt * tx1) * (c34 - c1345)) * tmp2) * u[i + 1][j][k][2]);\n    a[i][j][4][3] = ((dt * tx2) * (((-C2) * (u[i + 1][j][k][3] * u[i + 1][j][k][1])) * tmp2)) - ((((dt * tx1) * (c34 - c1345)) * tmp2) * u[i + 1][j][k][3]);\n    a[i][j][4][4] = (((dt * tx2) * (C1 * (u[i + 1][j][k][1] * tmp1))) - (((dt * tx1) * c1345) * tmp1)) - ((dt * tx1) * dx5);\n    tmp1 = 1.0 / u[i][j + 1][k][0];\n    tmp2 = tmp1 * tmp1;\n    tmp3 = tmp1 * tmp2;\n    b[i][j][0][0] = ((-dt) * ty1) * dy1;\n    b[i][j][0][1] = 0.0;\n    b[i][j][0][2] = dt * ty2;\n    b[i][j][0][3] = 0.0;\n    b[i][j][0][4] = 0.0;\n    b[i][j][1][0] = ((dt * ty2) * ((-(u[i][j + 1][k][1] * u[i][j + 1][k][2])) * tmp2)) - ((dt * ty1) * (((-c34) * tmp2) * u[i][j + 1][k][1]));\n    b[i][j][1][1] = (((dt * ty2) * (u[i][j + 1][k][2] * tmp1)) - ((dt * ty1) * (c34 * tmp1))) - ((dt * ty1) * dy2);\n    b[i][j][1][2] = (dt * ty2) * (u[i][j + 1][k][1] * tmp1);\n    b[i][j][1][3] = 0.0;\n    b[i][j][1][4] = 0.0;\n    b[i][j][2][0] = ((dt * ty2) * (((-(u[i][j + 1][k][2] * tmp1)) * (u[i][j + 1][k][2] * tmp1)) + ((0.50 * C2) * ((((u[i][j + 1][k][1] * u[i][j + 1][k][1]) + (u[i][j + 1][k][2] * u[i][j + 1][k][2])) + (u[i][j + 1][k][3] * u[i][j + 1][k][3])) * tmp2)))) - ((dt * ty1) * ((((-r43) * c34) * tmp2) * u[i][j + 1][k][2]));\n    b[i][j][2][1] = (dt * ty2) * ((-C2) * (u[i][j + 1][k][1] * tmp1));\n    b[i][j][2][2] = (((dt * ty2) * ((2.0 - C2) * (u[i][j + 1][k][2] * tmp1))) - ((dt * ty1) * ((r43 * c34) * tmp1))) - ((dt * ty1) * dy3);\n    b[i][j][2][3] = (dt * ty2) * ((-C2) * (u[i][j + 1][k][3] * tmp1));\n    b[i][j][2][4] = (dt * ty2) * C2;\n    b[i][j][3][0] = ((dt * ty2) * ((-(u[i][j + 1][k][2] * u[i][j + 1][k][3])) * tmp2)) - ((dt * ty1) * (((-c34) * tmp2) * u[i][j + 1][k][3]));\n    b[i][j][3][1] = 0.0;\n    b[i][j][3][2] = (dt * ty2) * (u[i][j + 1][k][3] * tmp1);\n    b[i][j][3][3] = (((dt * ty2) * (u[i][j + 1][k][2] * tmp1)) - ((dt * ty1) * (c34 * tmp1))) - ((dt * ty1) * dy4);\n    b[i][j][3][4] = 0.0;\n    b[i][j][4][0] = ((dt * ty2) * ((((C2 * (((u[i][j + 1][k][1] * u[i][j + 1][k][1]) + (u[i][j + 1][k][2] * u[i][j + 1][k][2])) + (u[i][j + 1][k][3] * u[i][j + 1][k][3]))) * tmp2) - (C1 * (u[i][j + 1][k][4] * tmp1))) * (u[i][j + 1][k][2] * tmp1))) - ((dt * ty1) * ((((((-(c34 - c1345)) * tmp3) * pow2(u[i][j + 1][k][1])) - ((((r43 * c34) - c1345) * tmp3) * pow2(u[i][j + 1][k][2]))) - (((c34 - c1345) * tmp3) * pow2(u[i][j + 1][k][3]))) - ((c1345 * tmp2) * u[i][j + 1][k][4])));\n    b[i][j][4][1] = ((dt * ty2) * (((-C2) * (u[i][j + 1][k][1] * u[i][j + 1][k][2])) * tmp2)) - ((((dt * ty1) * (c34 - c1345)) * tmp2) * u[i][j + 1][k][1]);\n    b[i][j][4][2] = ((dt * ty2) * ((C1 * (u[i][j + 1][k][4] * tmp1)) - ((0.50 * C2) * ((((u[i][j + 1][k][1] * u[i][j + 1][k][1]) + ((3.0 * u[i][j + 1][k][2]) * u[i][j + 1][k][2])) + (u[i][j + 1][k][3] * u[i][j + 1][k][3])) * tmp2)))) - ((((dt * ty1) * ((r43 * c34) - c1345)) * tmp2) * u[i][j + 1][k][2]);\n    b[i][j][4][3] = ((dt * ty2) * (((-C2) * (u[i][j + 1][k][2] * u[i][j + 1][k][3])) * tmp2)) - ((((dt * ty1) * (c34 - c1345)) * tmp2) * u[i][j + 1][k][3]);\n    b[i][j][4][4] = (((dt * ty2) * (C1 * (u[i][j + 1][k][2] * tmp1))) - (((dt * ty1) * c1345) * tmp1)) - ((dt * ty1) * dy5);\n    tmp1 = 1.0 / u[i][j][k + 1][0];\n    tmp2 = tmp1 * tmp1;\n    tmp3 = tmp1 * tmp2;\n    c[i][j][0][0] = ((-dt) * tz1) * dz1;\n    c[i][j][0][1] = 0.0;\n    c[i][j][0][2] = 0.0;\n    c[i][j][0][3] = dt * tz2;\n    c[i][j][0][4] = 0.0;\n    c[i][j][1][0] = ((dt * tz2) * ((-(u[i][j][k + 1][1] * u[i][j][k + 1][3])) * tmp2)) - ((dt * tz1) * (((-c34) * tmp2) * u[i][j][k + 1][1]));\n    c[i][j][1][1] = (((dt * tz2) * (u[i][j][k + 1][3] * tmp1)) - (((dt * tz1) * c34) * tmp1)) - ((dt * tz1) * dz2);\n    c[i][j][1][2] = 0.0;\n    c[i][j][1][3] = (dt * tz2) * (u[i][j][k + 1][1] * tmp1);\n    c[i][j][1][4] = 0.0;\n    c[i][j][2][0] = ((dt * tz2) * ((-(u[i][j][k + 1][2] * u[i][j][k + 1][3])) * tmp2)) - ((dt * tz1) * (((-c34) * tmp2) * u[i][j][k + 1][2]));\n    c[i][j][2][1] = 0.0;\n    c[i][j][2][2] = (((dt * tz2) * (u[i][j][k + 1][3] * tmp1)) - ((dt * tz1) * (c34 * tmp1))) - ((dt * tz1) * dz3);\n    c[i][j][2][3] = (dt * tz2) * (u[i][j][k + 1][2] * tmp1);\n    c[i][j][2][4] = 0.0;\n    c[i][j][3][0] = ((dt * tz2) * (((-(u[i][j][k + 1][3] * tmp1)) * (u[i][j][k + 1][3] * tmp1)) + ((0.50 * C2) * ((((u[i][j][k + 1][1] * u[i][j][k + 1][1]) + (u[i][j][k + 1][2] * u[i][j][k + 1][2])) + (u[i][j][k + 1][3] * u[i][j][k + 1][3])) * tmp2)))) - ((dt * tz1) * ((((-r43) * c34) * tmp2) * u[i][j][k + 1][3]));\n    c[i][j][3][1] = (dt * tz2) * ((-C2) * (u[i][j][k + 1][1] * tmp1));\n    c[i][j][3][2] = (dt * tz2) * ((-C2) * (u[i][j][k + 1][2] * tmp1));\n    c[i][j][3][3] = ((((dt * tz2) * (2.0 - C2)) * (u[i][j][k + 1][3] * tmp1)) - ((dt * tz1) * ((r43 * c34) * tmp1))) - ((dt * tz1) * dz4);\n    c[i][j][3][4] = (dt * tz2) * C2;\n    c[i][j][4][0] = ((dt * tz2) * ((((C2 * (((u[i][j][k + 1][1] * u[i][j][k + 1][1]) + (u[i][j][k + 1][2] * u[i][j][k + 1][2])) + (u[i][j][k + 1][3] * u[i][j][k + 1][3]))) * tmp2) - (C1 * (u[i][j][k + 1][4] * tmp1))) * (u[i][j][k + 1][3] * tmp1))) - ((dt * tz1) * ((((((-(c34 - c1345)) * tmp3) * pow2(u[i][j][k + 1][1])) - (((c34 - c1345) * tmp3) * pow2(u[i][j][k + 1][2]))) - ((((r43 * c34) - c1345) * tmp3) * pow2(u[i][j][k + 1][3]))) - ((c1345 * tmp2) * u[i][j][k + 1][4])));\n    c[i][j][4][1] = ((dt * tz2) * (((-C2) * (u[i][j][k + 1][1] * u[i][j][k + 1][3])) * tmp2)) - ((((dt * tz1) * (c34 - c1345)) * tmp2) * u[i][j][k + 1][1]);\n    c[i][j][4][2] = ((dt * tz2) * (((-C2) * (u[i][j][k + 1][2] * u[i][j][k + 1][3])) * tmp2)) - ((((dt * tz1) * (c34 - c1345)) * tmp2) * u[i][j][k + 1][2]);\n    c[i][j][4][3] = ((dt * tz2) * ((C1 * (u[i][j][k + 1][4] * tmp1)) - ((0.50 * C2) * ((((u[i][j][k + 1][1] * u[i][j][k + 1][1]) + (u[i][j][k + 1][2] * u[i][j][k + 1][2])) + ((3.0 * u[i][j][k + 1][3]) * u[i][j][k + 1][3])) * tmp2)))) - ((((dt * tz1) * ((r43 * c34) - c1345)) * tmp2) * u[i][j][k + 1][3]);\n    c[i][j][4][4] = (((dt * tz2) * (C1 * (u[i][j][k + 1][3] * tmp1))) - (((dt * tz1) * c1345) * tmp1)) - ((dt * tz1) * dz5);\n  }\n\n}\n", "pragma": "omp for nowait schedule(static)", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/12"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    for (k = 1; k <= (nz0 - 2); k++)\n    {\n      sum0 = sum0 + (v[i][j][k][0] * v[i][j][k][0]);\n      sum1 = sum1 + (v[i][j][k][1] * v[i][j][k][1]);\n      sum2 = sum2 + (v[i][j][k][2] * v[i][j][k][2]);\n      sum3 = sum3 + (v[i][j][k][3] * v[i][j][k][3]);\n      sum4 = sum4 + (v[i][j][k][4] * v[i][j][k][4]);\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/13"}
{"code": "for (i = 0; i <= (nx - 1); i++)\n{\n  for (j = 0; j <= (ny - 1); j++)\n  {\n    for (k = 0; k <= (nz - 1); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = -frct[i][j][k][m];\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/14"}
{"code": "for (i = L1; i <= L2; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      flux[i][j][k][0] = u[i][j][k][1];\n      u21 = u[i][j][k][1] / u[i][j][k][0];\n      q = (0.50 * (((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) / u[i][j][k][0];\n      flux[i][j][k][1] = (u[i][j][k][1] * u21) + (C2 * (u[i][j][k][4] - q));\n      flux[i][j][k][2] = u[i][j][k][2] * u21;\n      flux[i][j][k][3] = u[i][j][k][3] * u21;\n      flux[i][j][k][4] = ((C1 * u[i][j][k][4]) - (C2 * q)) * u21;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/15"}
{"code": "for (j = jst; j <= jend; j++)\n{\n  for (k = 1; k <= (nz - 2); k++)\n  {\n    for (i = ist; i <= iend; i++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = rsd[i][j][k][m] - (tx2 * (flux[i + 1][j][k][m] - flux[i - 1][j][k][m]));\n      }\n\n    }\n\n    L2 = nx - 1;\n    for (i = ist; i <= L2; i++)\n    {\n      tmp = 1.0 / u[i][j][k][0];\n      u21i = tmp * u[i][j][k][1];\n      u31i = tmp * u[i][j][k][2];\n      u41i = tmp * u[i][j][k][3];\n      u51i = tmp * u[i][j][k][4];\n      tmp = 1.0 / u[i - 1][j][k][0];\n      u21im1 = tmp * u[i - 1][j][k][1];\n      u31im1 = tmp * u[i - 1][j][k][2];\n      u41im1 = tmp * u[i - 1][j][k][3];\n      u51im1 = tmp * u[i - 1][j][k][4];\n      flux[i][j][k][1] = ((4.0 / 3.0) * tx3) * (u21i - u21im1);\n      flux[i][j][k][2] = tx3 * (u31i - u31im1);\n      flux[i][j][k][3] = tx3 * (u41i - u41im1);\n      flux[i][j][k][4] = ((((0.50 * (1.0 - (C1 * C5))) * tx3) * (((pow2(u21i) + pow2(u31i)) + pow2(u41i)) - ((pow2(u21im1) + pow2(u31im1)) + pow2(u41im1)))) + (((1.0 / 6.0) * tx3) * (pow2(u21i) - pow2(u21im1)))) + (((C1 * C5) * tx3) * (u51i - u51im1));\n    }\n\n    for (i = ist; i <= iend; i++)\n    {\n      rsd[i][j][k][0] = rsd[i][j][k][0] + ((dx1 * tx1) * ((u[i - 1][j][k][0] - (2.0 * u[i][j][k][0])) + u[i + 1][j][k][0]));\n      rsd[i][j][k][1] = (rsd[i][j][k][1] + (((tx3 * C3) * C4) * (flux[i + 1][j][k][1] - flux[i][j][k][1]))) + ((dx2 * tx1) * ((u[i - 1][j][k][1] - (2.0 * u[i][j][k][1])) + u[i + 1][j][k][1]));\n      rsd[i][j][k][2] = (rsd[i][j][k][2] + (((tx3 * C3) * C4) * (flux[i + 1][j][k][2] - flux[i][j][k][2]))) + ((dx3 * tx1) * ((u[i - 1][j][k][2] - (2.0 * u[i][j][k][2])) + u[i + 1][j][k][2]));\n      rsd[i][j][k][3] = (rsd[i][j][k][3] + (((tx3 * C3) * C4) * (flux[i + 1][j][k][3] - flux[i][j][k][3]))) + ((dx4 * tx1) * ((u[i - 1][j][k][3] - (2.0 * u[i][j][k][3])) + u[i + 1][j][k][3]));\n      rsd[i][j][k][4] = (rsd[i][j][k][4] + (((tx3 * C3) * C4) * (flux[i + 1][j][k][4] - flux[i][j][k][4]))) + ((dx5 * tx1) * ((u[i - 1][j][k][4] - (2.0 * u[i][j][k][4])) + u[i + 1][j][k][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      rsd[1][j][k][m] = rsd[1][j][k][m] - (dssp * ((((+5.0) * u[1][j][k][m]) - (4.0 * u[2][j][k][m])) + u[3][j][k][m]));\n      rsd[2][j][k][m] = rsd[2][j][k][m] - (dssp * (((((-4.0) * u[1][j][k][m]) + (6.0 * u[2][j][k][m])) - (4.0 * u[3][j][k][m])) + u[4][j][k][m]));\n    }\n\n    ist1 = 3;\n    iend1 = nx - 4;\n    for (i = ist1; i <= iend1; i++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = rsd[i][j][k][m] - (dssp * ((((u[i - 2][j][k][m] - (4.0 * u[i - 1][j][k][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i + 1][j][k][m])) + u[i + 2][j][k][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      rsd[nx - 3][j][k][m] = rsd[nx - 3][j][k][m] - (dssp * (((u[nx - 5][j][k][m] - (4.0 * u[nx - 4][j][k][m])) + (6.0 * u[nx - 3][j][k][m])) - (4.0 * u[nx - 2][j][k][m])));\n      rsd[nx - 2][j][k][m] = rsd[nx - 2][j][k][m] - (dssp * ((u[nx - 4][j][k][m] - (4.0 * u[nx - 3][j][k][m])) + (5.0 * u[nx - 2][j][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/16"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = L1; j <= L2; j++)\n  {\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      flux[i][j][k][0] = u[i][j][k][2];\n      u31 = u[i][j][k][2] / u[i][j][k][0];\n      q = (0.50 * (((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) / u[i][j][k][0];\n      flux[i][j][k][1] = u[i][j][k][1] * u31;\n      flux[i][j][k][2] = (u[i][j][k][2] * u31) + (C2 * (u[i][j][k][4] - q));\n      flux[i][j][k][3] = u[i][j][k][3] * u31;\n      flux[i][j][k][4] = ((C1 * u[i][j][k][4]) - (C2 * q)) * u31;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/17"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (k = 1; k <= (nz - 2); k++)\n  {\n    for (j = jst; j <= jend; j++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = rsd[i][j][k][m] - (ty2 * (flux[i][j + 1][k][m] - flux[i][j - 1][k][m]));\n      }\n\n    }\n\n    L2 = ny - 1;\n    for (j = jst; j <= L2; j++)\n    {\n      tmp = 1.0 / u[i][j][k][0];\n      u21j = tmp * u[i][j][k][1];\n      u31j = tmp * u[i][j][k][2];\n      u41j = tmp * u[i][j][k][3];\n      u51j = tmp * u[i][j][k][4];\n      tmp = 1.0 / u[i][j - 1][k][0];\n      u21jm1 = tmp * u[i][j - 1][k][1];\n      u31jm1 = tmp * u[i][j - 1][k][2];\n      u41jm1 = tmp * u[i][j - 1][k][3];\n      u51jm1 = tmp * u[i][j - 1][k][4];\n      flux[i][j][k][1] = ty3 * (u21j - u21jm1);\n      flux[i][j][k][2] = ((4.0 / 3.0) * ty3) * (u31j - u31jm1);\n      flux[i][j][k][3] = ty3 * (u41j - u41jm1);\n      flux[i][j][k][4] = ((((0.50 * (1.0 - (C1 * C5))) * ty3) * (((pow2(u21j) + pow2(u31j)) + pow2(u41j)) - ((pow2(u21jm1) + pow2(u31jm1)) + pow2(u41jm1)))) + (((1.0 / 6.0) * ty3) * (pow2(u31j) - pow2(u31jm1)))) + (((C1 * C5) * ty3) * (u51j - u51jm1));\n    }\n\n    for (j = jst; j <= jend; j++)\n    {\n      rsd[i][j][k][0] = rsd[i][j][k][0] + ((dy1 * ty1) * ((u[i][j - 1][k][0] - (2.0 * u[i][j][k][0])) + u[i][j + 1][k][0]));\n      rsd[i][j][k][1] = (rsd[i][j][k][1] + (((ty3 * C3) * C4) * (flux[i][j + 1][k][1] - flux[i][j][k][1]))) + ((dy2 * ty1) * ((u[i][j - 1][k][1] - (2.0 * u[i][j][k][1])) + u[i][j + 1][k][1]));\n      rsd[i][j][k][2] = (rsd[i][j][k][2] + (((ty3 * C3) * C4) * (flux[i][j + 1][k][2] - flux[i][j][k][2]))) + ((dy3 * ty1) * ((u[i][j - 1][k][2] - (2.0 * u[i][j][k][2])) + u[i][j + 1][k][2]));\n      rsd[i][j][k][3] = (rsd[i][j][k][3] + (((ty3 * C3) * C4) * (flux[i][j + 1][k][3] - flux[i][j][k][3]))) + ((dy4 * ty1) * ((u[i][j - 1][k][3] - (2.0 * u[i][j][k][3])) + u[i][j + 1][k][3]));\n      rsd[i][j][k][4] = (rsd[i][j][k][4] + (((ty3 * C3) * C4) * (flux[i][j + 1][k][4] - flux[i][j][k][4]))) + ((dy5 * ty1) * ((u[i][j - 1][k][4] - (2.0 * u[i][j][k][4])) + u[i][j + 1][k][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      rsd[i][1][k][m] = rsd[i][1][k][m] - (dssp * ((((+5.0) * u[i][1][k][m]) - (4.0 * u[i][2][k][m])) + u[i][3][k][m]));\n      rsd[i][2][k][m] = rsd[i][2][k][m] - (dssp * (((((-4.0) * u[i][1][k][m]) + (6.0 * u[i][2][k][m])) - (4.0 * u[i][3][k][m])) + u[i][4][k][m]));\n    }\n\n    jst1 = 3;\n    jend1 = ny - 4;\n    for (j = jst1; j <= jend1; j++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = rsd[i][j][k][m] - (dssp * ((((u[i][j - 2][k][m] - (4.0 * u[i][j - 1][k][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i][j + 1][k][m])) + u[i][j + 2][k][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      rsd[i][ny - 3][k][m] = rsd[i][ny - 3][k][m] - (dssp * (((u[i][ny - 5][k][m] - (4.0 * u[i][ny - 4][k][m])) + (6.0 * u[i][ny - 3][k][m])) - (4.0 * u[i][ny - 2][k][m])));\n      rsd[i][ny - 2][k][m] = rsd[i][ny - 2][k][m] - (dssp * ((u[i][ny - 4][k][m] - (4.0 * u[i][ny - 3][k][m])) + (5.0 * u[i][ny - 2][k][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/18"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    for (k = 0; k <= (nz - 1); k++)\n    {\n      flux[i][j][k][0] = u[i][j][k][3];\n      u41 = u[i][j][k][3] / u[i][j][k][0];\n      q = (0.50 * (((u[i][j][k][1] * u[i][j][k][1]) + (u[i][j][k][2] * u[i][j][k][2])) + (u[i][j][k][3] * u[i][j][k][3]))) / u[i][j][k][0];\n      flux[i][j][k][1] = u[i][j][k][1] * u41;\n      flux[i][j][k][2] = u[i][j][k][2] * u41;\n      flux[i][j][k][3] = (u[i][j][k][3] * u41) + (C2 * (u[i][j][k][4] - q));\n      flux[i][j][k][4] = ((C1 * u[i][j][k][4]) - (C2 * q)) * u41;\n    }\n\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = rsd[i][j][k][m] - (tz2 * (flux[i][j][k + 1][m] - flux[i][j][k - 1][m]));\n      }\n\n    }\n\n    for (k = 1; k <= (nz - 1); k++)\n    {\n      tmp = 1.0 / u[i][j][k][0];\n      u21k = tmp * u[i][j][k][1];\n      u31k = tmp * u[i][j][k][2];\n      u41k = tmp * u[i][j][k][3];\n      u51k = tmp * u[i][j][k][4];\n      tmp = 1.0 / u[i][j][k - 1][0];\n      u21km1 = tmp * u[i][j][k - 1][1];\n      u31km1 = tmp * u[i][j][k - 1][2];\n      u41km1 = tmp * u[i][j][k - 1][3];\n      u51km1 = tmp * u[i][j][k - 1][4];\n      flux[i][j][k][1] = tz3 * (u21k - u21km1);\n      flux[i][j][k][2] = tz3 * (u31k - u31km1);\n      flux[i][j][k][3] = ((4.0 / 3.0) * tz3) * (u41k - u41km1);\n      flux[i][j][k][4] = ((((0.50 * (1.0 - (C1 * C5))) * tz3) * (((pow2(u21k) + pow2(u31k)) + pow2(u41k)) - ((pow2(u21km1) + pow2(u31km1)) + pow2(u41km1)))) + (((1.0 / 6.0) * tz3) * (pow2(u41k) - pow2(u41km1)))) + (((C1 * C5) * tz3) * (u51k - u51km1));\n    }\n\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      rsd[i][j][k][0] = rsd[i][j][k][0] + ((dz1 * tz1) * ((u[i][j][k - 1][0] - (2.0 * u[i][j][k][0])) + u[i][j][k + 1][0]));\n      rsd[i][j][k][1] = (rsd[i][j][k][1] + (((tz3 * C3) * C4) * (flux[i][j][k + 1][1] - flux[i][j][k][1]))) + ((dz2 * tz1) * ((u[i][j][k - 1][1] - (2.0 * u[i][j][k][1])) + u[i][j][k + 1][1]));\n      rsd[i][j][k][2] = (rsd[i][j][k][2] + (((tz3 * C3) * C4) * (flux[i][j][k + 1][2] - flux[i][j][k][2]))) + ((dz3 * tz1) * ((u[i][j][k - 1][2] - (2.0 * u[i][j][k][2])) + u[i][j][k + 1][2]));\n      rsd[i][j][k][3] = (rsd[i][j][k][3] + (((tz3 * C3) * C4) * (flux[i][j][k + 1][3] - flux[i][j][k][3]))) + ((dz4 * tz1) * ((u[i][j][k - 1][3] - (2.0 * u[i][j][k][3])) + u[i][j][k + 1][3]));\n      rsd[i][j][k][4] = (rsd[i][j][k][4] + (((tz3 * C3) * C4) * (flux[i][j][k + 1][4] - flux[i][j][k][4]))) + ((dz5 * tz1) * ((u[i][j][k - 1][4] - (2.0 * u[i][j][k][4])) + u[i][j][k + 1][4]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      rsd[i][j][1][m] = rsd[i][j][1][m] - (dssp * ((((+5.0) * u[i][j][1][m]) - (4.0 * u[i][j][2][m])) + u[i][j][3][m]));\n      rsd[i][j][2][m] = rsd[i][j][2][m] - (dssp * (((((-4.0) * u[i][j][1][m]) + (6.0 * u[i][j][2][m])) - (4.0 * u[i][j][3][m])) + u[i][j][4][m]));\n    }\n\n    for (k = 3; k <= (nz - 4); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = rsd[i][j][k][m] - (dssp * ((((u[i][j][k - 2][m] - (4.0 * u[i][j][k - 1][m])) + (6.0 * u[i][j][k][m])) - (4.0 * u[i][j][k + 1][m])) + u[i][j][k + 2][m]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      rsd[i][j][nz - 3][m] = rsd[i][j][nz - 3][m] - (dssp * (((u[i][j][nz - 5][m] - (4.0 * u[i][j][nz - 4][m])) + (6.0 * u[i][j][nz - 3][m])) - (4.0 * u[i][j][nz - 2][m])));\n      rsd[i][j][nz - 2][m] = rsd[i][j][nz - 2][m] - (dssp * ((u[i][j][nz - 4][m] - (4.0 * u[i][j][nz - 3][m])) + (5.0 * u[i][j][nz - 2][m])));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/19"}
{"code": "for (i = 0; i < nx; i++)\n{\n  iglob = i;\n  for (j = 0; j < ny; j++)\n  {\n    jglob = j;\n    exact(iglob, jglob, 0, &u[i][j][0][0]);\n    exact(iglob, jglob, nz - 1, &u[i][j][nz - 1][0]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/20"}
{"code": "for (i = 0; i < nx; i++)\n{\n  iglob = i;\n  for (k = 0; k < nz; k++)\n  {\n    exact(iglob, 0, k, &u[i][0][k][0]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/21"}
{"code": "for (i = 0; i < nx; i++)\n{\n  iglob = i;\n  for (k = 0; k < nz; k++)\n  {\n    exact(iglob, ny0 - 1, k, &u[i][ny - 1][k][0]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/22"}
{"code": "for (j = 0; j < ny; j++)\n{\n  jglob = j;\n  for (k = 0; k < nz; k++)\n  {\n    exact(0, jglob, k, &u[0][j][k][0]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/23"}
{"code": "for (j = 0; j < ny; j++)\n{\n  jglob = j;\n  for (k = 0; k < nz; k++)\n  {\n    exact(nx0 - 1, jglob, k, &u[nx - 1][j][k][0]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/24"}
{"code": "for (j = 0; j < ny; j++)\n{\n  jglob = j;\n  for (k = 1; k < (nz - 1); k++)\n  {\n    zeta = ((double) k) / (nz - 1);\n    if ((jglob != 0) && (jglob != (ny0 - 1)))\n    {\n      eta = ((double) jglob) / (ny0 - 1);\n      for (i = 0; i < nx; i++)\n      {\n        iglob = i;\n        if ((iglob != 0) && (iglob != (nx0 - 1)))\n        {\n          xi = ((double) iglob) / (nx0 - 1);\n          exact(0, jglob, k, ue_1jk);\n          exact(nx0 - 1, jglob, k, ue_nx0jk);\n          exact(iglob, 0, k, ue_i1k);\n          exact(iglob, ny0 - 1, k, ue_iny0k);\n          exact(iglob, jglob, 0, ue_ij1);\n          exact(iglob, jglob, nz - 1, ue_ijnz);\n          for (m = 0; m < 5; m++)\n          {\n            pxi = ((1.0 - xi) * ue_1jk[m]) + (xi * ue_nx0jk[m]);\n            peta = ((1.0 - eta) * ue_i1k[m]) + (eta * ue_iny0k[m]);\n            pzeta = ((1.0 - zeta) * ue_ij1[m]) + (zeta * ue_ijnz[m]);\n            u[i][j][k][m] = (((((pxi + peta) + pzeta) - (pxi * peta)) - (peta * pzeta)) - (pzeta * pxi)) + ((pxi * peta) * pzeta);\n          }\n\n        }\n\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/25"}
{"code": "for (i = 0; i < ISIZ1; i++)\n{\n  for (j = 0; j < ISIZ2; j++)\n  {\n    for (k = 0; k < 5; k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        a[i][j][k][m] = 0.0;\n        b[i][j][k][m] = 0.0;\n        c[i][j][k][m] = 0.0;\n        d[i][j][k][m] = 0.0;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/26"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        rsd[i][j][k][m] = dt * rsd[i][j][k][m];\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/27"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  for (j = jst; j <= jend; j++)\n  {\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        u[i][j][k][m] = u[i][j][k][m] + (tmp * rsd[i][j][k][m]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/28"}
{"code": "for (m = 0; m < 5; m++)\n{\n  errnm[m] = 0.0;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/29"}
{"code": "for (i = ist; i <= iend; i++)\n{\n  iglob = i;\n  for (j = jst; j <= jend; j++)\n  {\n    jglob = j;\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      exact(iglob, jglob, k, u000ijk);\n      for (m = 0; m < 5; m++)\n      {\n        tmp = u000ijk[m] - u[i][j][k][m];\n        errnm[m] = errnm[m] + (tmp * tmp);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/30"}
{"code": "for (m = 0; m < 5; m++)\n{\n  errnm[m] = sqrt(errnm[m] / (((nx0 - 2) * (ny0 - 2)) * (nz0 - 2)));\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/31"}
{"code": "for (m = 0; m < 5; m++)\n{\n  u000ijk[m] = (((((((((((ce[m][0] + (ce[m][1] * xi)) + (ce[m][2] * eta)) + (ce[m][3] * zeta)) + ((ce[m][4] * xi) * xi)) + ((ce[m][5] * eta) * eta)) + ((ce[m][6] * zeta) * zeta)) + (((ce[m][7] * xi) * xi) * xi)) + (((ce[m][8] * eta) * eta) * eta)) + (((ce[m][9] * zeta) * zeta) * zeta)) + ((((ce[m][10] * xi) * xi) * xi) * xi)) + ((((ce[m][11] * eta) * eta) * eta) * eta)) + ((((ce[m][12] * zeta) * zeta) * zeta) * zeta);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/32"}
{"code": "for (m = 0; m < 5; m++)\n{\n  sum[m] = 0.0;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/33"}
{"code": "for (m = 0; m < 5; m++)\n{\n  sum[m] = sqrt(sum[m] / (((nx0 - 2) * (ny0 - 2)) * (nz0 - 2)));\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/34"}
{"code": "for (i = 0; i <= (ISIZ2 + 1); i++)\n{\n  for (k = 0; k <= (ISIZ3 + 1); k++)\n  {\n    phi1[i][k] = 0.0;\n    phi2[i][k] = 0.0;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/35"}
{"code": "for (i = ibeg; i <= ifin; i++)\n{\n  iglob = i;\n  for (j = jbeg; j <= jfin; j++)\n  {\n    jglob = j;\n    k = ki1;\n    phi1[i][j] = C2 * (u[i][j][k][4] - ((0.50 * ((pow2(u[i][j][k][1]) + pow2(u[i][j][k][2])) + pow2(u[i][j][k][3]))) / u[i][j][k][0]));\n    k = ki2;\n    phi2[i][j] = C2 * (u[i][j][k][4] - ((0.50 * ((pow2(u[i][j][k][1]) + pow2(u[i][j][k][2])) + pow2(u[i][j][k][3]))) / u[i][j][k][0]));\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/36"}
{"code": "for (i = ibeg; i <= ifin1; i++)\n{\n  for (j = jbeg; j <= jfin1; j++)\n  {\n    frc1 = frc1 + (((((((phi1[i][j] + phi1[i + 1][j]) + phi1[i][j + 1]) + phi1[i + 1][j + 1]) + phi2[i][j]) + phi2[i + 1][j]) + phi2[i][j + 1]) + phi2[i + 1][j + 1]);\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/37"}
{"code": "for (i = ibeg; i <= ifin; i++)\n{\n  iglob = i;\n  for (k = ki1; k <= ki2; k++)\n  {\n    phi1[i][k] = C2 * (u[i][jbeg][k][4] - ((0.50 * ((pow2(u[i][jbeg][k][1]) + pow2(u[i][jbeg][k][2])) + pow2(u[i][jbeg][k][3]))) / u[i][jbeg][k][0]));\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/38"}
{"code": "for (i = ibeg; i <= ifin; i++)\n{\n  iglob = i;\n  for (k = ki1; k <= ki2; k++)\n  {\n    phi2[i][k] = C2 * (u[i][jfin][k][4] - ((0.50 * ((pow2(u[i][jfin][k][1]) + pow2(u[i][jfin][k][2])) + pow2(u[i][jfin][k][3]))) / u[i][jfin][k][0]));\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/39"}
{"code": "for (i = ibeg; i <= ifin1; i++)\n{\n  for (k = ki1; k <= (ki2 - 1); k++)\n  {\n    frc2 = frc2 + (((((((phi1[i][k] + phi1[i + 1][k]) + phi1[i][k + 1]) + phi1[i + 1][k + 1]) + phi2[i][k]) + phi2[i + 1][k]) + phi2[i][k + 1]) + phi2[i + 1][k + 1]);\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/40"}
{"code": "for (j = jbeg; j <= jfin; j++)\n{\n  jglob = j;\n  for (k = ki1; k <= ki2; k++)\n  {\n    phi1[j][k] = C2 * (u[ibeg][j][k][4] - ((0.50 * ((pow2(u[ibeg][j][k][1]) + pow2(u[ibeg][j][k][2])) + pow2(u[ibeg][j][k][3]))) / u[ibeg][j][k][0]));\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/41"}
{"code": "for (j = jbeg; j <= jfin; j++)\n{\n  jglob = j;\n  for (k = ki1; k <= ki2; k++)\n  {\n    phi2[j][k] = C2 * (u[ifin][j][k][4] - ((0.50 * ((pow2(u[ifin][j][k][1]) + pow2(u[ifin][j][k][2])) + pow2(u[ifin][j][k][3]))) / u[ifin][j][k][0]));\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/42"}
{"code": "for (j = jbeg; j <= jfin1; j++)\n{\n  for (k = ki1; k <= (ki2 - 1); k++)\n  {\n    frc3 = frc3 + (((((((phi1[j][k] + phi1[j + 1][k]) + phi1[j][k + 1]) + phi1[j + 1][k + 1]) + phi2[j][k]) + phi2[j + 1][k]) + phi2[j][k + 1]) + phi2[j + 1][k + 1]);\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/43"}
{"code": "for (istep = 1; istep <= itmax; istep++)\n{\n  if ((((istep % 20) == 0) || (istep == itmax)) || (istep == 1))\n  {\n    #pragma omp master\n    printf(\" Time step %4d\\n\", istep);\n  }\n\n  #pragma omp parallel private(istep,i,j,k,m)\n  {\n    #pragma omp for\n    for (i = ist; i <= iend; i++)\n    {\n      for (j = jst; j <= jend; j++)\n      {\n        for (k = 1; k <= (nz - 2); k++)\n        {\n          for (m = 0; m < 5; m++)\n          {\n            rsd[i][j][k][m] = dt * rsd[i][j][k][m];\n          }\n\n        }\n\n      }\n\n    }\n\n    for (k = 1; k <= (nz - 2); k++)\n    {\n      jacld(k);\n      blts(nx, ny, nz, k, omega, rsd, a, b, c, d, ist, iend, jst, jend, nx0, ny0);\n    }\n\n    #pragma omp barrier\n    for (k = nz - 2; k >= 1; k--)\n    {\n      jacu(k);\n      buts(nx, ny, nz, k, omega, rsd, tv, d, a, b, c, ist, iend, jst, jend, nx0, ny0);\n    }\n\n    #pragma omp barrier\n    #pragma omp for\n    for (i = ist; i <= iend; i++)\n    {\n      for (j = jst; j <= jend; j++)\n      {\n        for (k = 1; k <= (nz - 2); k++)\n        {\n          for (m = 0; m < 5; m++)\n          {\n            u[i][j][k][m] = u[i][j][k][m] + (tmp * rsd[i][j][k][m]);\n          }\n\n        }\n\n      }\n\n    }\n\n  }\n  if ((istep % inorm) == 0)\n  {\n    l2norm(nx0, ny0, nz0, ist, iend, jst, jend, rsd, delunm);\n  }\n\n  rhs();\n  if (((istep % inorm) == 0) || (istep == itmax))\n  {\n    l2norm(nx0, ny0, nz0, ist, iend, jst, jend, rsd, rsdnm);\n  }\n\n  if (((((rsdnm[0] < tolrsd[0]) && (rsdnm[1] < tolrsd[1])) && (rsdnm[2] < tolrsd[2])) && (rsdnm[3] < tolrsd[3])) && (rsdnm[4] < tolrsd[4]))\n  {\n    exit(1);\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/44"}
{"code": "for (m = 0; m < 5; m++)\n{\n  if ((*class) == 'U')\n  {\n    printf(\"          %2d  %20.13e\\n\", m, xcr[m]);\n  }\n  else\n    if (xcrdif[m] > epsilon)\n  {\n    *verified = FALSE;\n    printf(\" FAILURE: %2d  %20.13e%20.13e%20.13e\\n\", m, xcr[m], xcrref[m], xcrdif[m]);\n  }\n  else\n  {\n    printf(\"          %2d  %20.13e%20.13e%20.13e\\n\", m, xcr[m], xcrref[m], xcrdif[m]);\n  }\n\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/45"}
{"code": "for (m = 0; m < 5; m++)\n{\n  if ((*class) == 'U')\n  {\n    printf(\"          %2d  %20.13e\\n\", m, xce[m]);\n  }\n  else\n    if (xcedif[m] > epsilon)\n  {\n    *verified = FALSE;\n    printf(\" FAILURE: %2d  %20.13e%20.13e%20.13e\\n\", m, xce[m], xceref[m], xcedif[m]);\n  }\n  else\n  {\n    printf(\"          %2d  %20.13e%20.13e%20.13e\\n\", m, xce[m], xceref[m], xcedif[m]);\n  }\n\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/LU/lu/46"}
{"code": "for (i3 = 1; i3 < (n3 - 1); i3++)\n{\n  for (i2 = 1; i2 < (n2 - 1); i2++)\n  {\n    for (i1 = 0; i1 < n1; i1++)\n    {\n      r1[i1] = ((r[i3][i2 - 1][i1] + r[i3][i2 + 1][i1]) + r[i3 - 1][i2][i1]) + r[i3 + 1][i2][i1];\n      r2[i1] = ((r[i3 - 1][i2 - 1][i1] + r[i3 - 1][i2 + 1][i1]) + r[i3 + 1][i2 - 1][i1]) + r[i3 + 1][i2 + 1][i1];\n    }\n\n    for (i1 = 1; i1 < (n1 - 1); i1++)\n    {\n      u[i3][i2][i1] = ((u[i3][i2][i1] + (c[0] * r[i3][i2][i1])) + (c[1] * ((r[i3][i2][i1 - 1] + r[i3][i2][i1 + 1]) + r1[i1]))) + (c[2] * ((r2[i1] + r1[i1 - 1]) + r1[i1 + 1]));\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(i1,i2,i3,r1,r2)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/0"}
{"code": "for (i3 = 1; i3 < (n3 - 1); i3++)\n{\n  for (i2 = 1; i2 < (n2 - 1); i2++)\n  {\n    for (i1 = 0; i1 < n1; i1++)\n    {\n      u1[i1] = ((u[i3][i2 - 1][i1] + u[i3][i2 + 1][i1]) + u[i3 - 1][i2][i1]) + u[i3 + 1][i2][i1];\n      u2[i1] = ((u[i3 - 1][i2 - 1][i1] + u[i3 - 1][i2 + 1][i1]) + u[i3 + 1][i2 - 1][i1]) + u[i3 + 1][i2 + 1][i1];\n    }\n\n    for (i1 = 1; i1 < (n1 - 1); i1++)\n    {\n      r[i3][i2][i1] = ((v[i3][i2][i1] - (a[0] * u[i3][i2][i1])) - (a[2] * ((u2[i1] + u1[i1 - 1]) + u1[i1 + 1]))) - (a[3] * (u2[i1 - 1] + u2[i1 + 1]));\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(i1,i2,i3,u1,u2)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/1"}
{"code": "for (j3 = 1; j3 < (m3j - 1); j3++)\n{\n  i3 = (2 * j3) - d3;\n  for (j2 = 1; j2 < (m2j - 1); j2++)\n  {\n    i2 = (2 * j2) - d2;\n    for (j1 = 1; j1 < m1j; j1++)\n    {\n      i1 = (2 * j1) - d1;\n      x1[i1] = ((r[i3 + 1][i2][i1] + r[i3 + 1][i2 + 2][i1]) + r[i3][i2 + 1][i1]) + r[i3 + 2][i2 + 1][i1];\n      y1[i1] = ((r[i3][i2][i1] + r[i3 + 2][i2][i1]) + r[i3][i2 + 2][i1]) + r[i3 + 2][i2 + 2][i1];\n    }\n\n    for (j1 = 1; j1 < (m1j - 1); j1++)\n    {\n      i1 = (2 * j1) - d1;\n      y2 = ((r[i3][i2][i1 + 1] + r[i3 + 2][i2][i1 + 1]) + r[i3][i2 + 2][i1 + 1]) + r[i3 + 2][i2 + 2][i1 + 1];\n      x2 = ((r[i3 + 1][i2][i1 + 1] + r[i3 + 1][i2 + 2][i1 + 1]) + r[i3][i2 + 1][i1 + 1]) + r[i3 + 2][i2 + 1][i1 + 1];\n      s[j3][j2][j1] = (((0.5 * r[i3 + 1][i2 + 1][i1 + 1]) + (0.25 * ((r[i3 + 1][i2 + 1][i1] + r[i3 + 1][i2 + 1][i1 + 2]) + x2))) + (0.125 * ((x1[i1] + x1[i1 + 2]) + y2))) + (0.0625 * (y1[i1] + y1[i1 + 2]));\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(j1,j2,j3,i1,i2,i3,x1,y1,x2,y2)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/2"}
{"code": "for (i3 = 0; i3 < (mm3 - 1); i3++)\n{\n  for (i2 = 0; i2 < (mm2 - 1); i2++)\n  {\n    for (i1 = 0; i1 < mm1; i1++)\n    {\n      z1[i1] = z[i3][i2 + 1][i1] + z[i3][i2][i1];\n      z2[i1] = z[i3 + 1][i2][i1] + z[i3][i2][i1];\n      z3[i1] = (z[i3 + 1][i2 + 1][i1] + z[i3 + 1][i2][i1]) + z1[i1];\n    }\n\n    for (i1 = 0; i1 < (mm1 - 1); i1++)\n    {\n      u[2 * i3][2 * i2][2 * i1] = u[2 * i3][2 * i2][2 * i1] + z[i3][i2][i1];\n      u[2 * i3][2 * i2][(2 * i1) + 1] = u[2 * i3][2 * i2][(2 * i1) + 1] + (0.5 * (z[i3][i2][i1 + 1] + z[i3][i2][i1]));\n    }\n\n    for (i1 = 0; i1 < (mm1 - 1); i1++)\n    {\n      u[2 * i3][(2 * i2) + 1][2 * i1] = u[2 * i3][(2 * i2) + 1][2 * i1] + (0.5 * z1[i1]);\n      u[2 * i3][(2 * i2) + 1][(2 * i1) + 1] = u[2 * i3][(2 * i2) + 1][(2 * i1) + 1] + (0.25 * (z1[i1] + z1[i1 + 1]));\n    }\n\n    for (i1 = 0; i1 < (mm1 - 1); i1++)\n    {\n      u[(2 * i3) + 1][2 * i2][2 * i1] = u[(2 * i3) + 1][2 * i2][2 * i1] + (0.5 * z2[i1]);\n      u[(2 * i3) + 1][2 * i2][(2 * i1) + 1] = u[(2 * i3) + 1][2 * i2][(2 * i1) + 1] + (0.25 * (z2[i1] + z2[i1 + 1]));\n    }\n\n    for (i1 = 0; i1 < (mm1 - 1); i1++)\n    {\n      u[(2 * i3) + 1][(2 * i2) + 1][2 * i1] = u[(2 * i3) + 1][(2 * i2) + 1][2 * i1] + (0.25 * z3[i1]);\n      u[(2 * i3) + 1][(2 * i2) + 1][(2 * i1) + 1] = u[(2 * i3) + 1][(2 * i2) + 1][(2 * i1) + 1] + (0.125 * (z3[i1] + z3[i1 + 1]));\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(i1,i2,i3,z1,z2,z3)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/3"}
{"code": "for (i3 = d3; i3 <= (mm3 - 1); i3++)\n{\n  for (i2 = d2; i2 <= (mm2 - 1); i2++)\n  {\n    for (i1 = d1; i1 <= (mm1 - 1); i1++)\n    {\n      u[((2 * i3) - d3) - 1][((2 * i2) - d2) - 1][((2 * i1) - d1) - 1] = u[((2 * i3) - d3) - 1][((2 * i2) - d2) - 1][((2 * i1) - d1) - 1] + z[i3 - 1][i2 - 1][i1 - 1];\n    }\n\n    for (i1 = 1; i1 <= (mm1 - 1); i1++)\n    {\n      u[((2 * i3) - d3) - 1][((2 * i2) - d2) - 1][((2 * i1) - t1) - 1] = u[((2 * i3) - d3) - 1][((2 * i2) - d2) - 1][((2 * i1) - t1) - 1] + (0.5 * (z[i3 - 1][i2 - 1][i1] + z[i3 - 1][i2 - 1][i1 - 1]));\n    }\n\n  }\n\n  for (i2 = 1; i2 <= (mm2 - 1); i2++)\n  {\n    for (i1 = d1; i1 <= (mm1 - 1); i1++)\n    {\n      u[((2 * i3) - d3) - 1][((2 * i2) - t2) - 1][((2 * i1) - d1) - 1] = u[((2 * i3) - d3) - 1][((2 * i2) - t2) - 1][((2 * i1) - d1) - 1] + (0.5 * (z[i3 - 1][i2][i1 - 1] + z[i3 - 1][i2 - 1][i1 - 1]));\n    }\n\n    for (i1 = 1; i1 <= (mm1 - 1); i1++)\n    {\n      u[((2 * i3) - d3) - 1][((2 * i2) - t2) - 1][((2 * i1) - t1) - 1] = u[((2 * i3) - d3) - 1][((2 * i2) - t2) - 1][((2 * i1) - t1) - 1] + (0.25 * (((z[i3 - 1][i2][i1] + z[i3 - 1][i2 - 1][i1]) + z[i3 - 1][i2][i1 - 1]) + z[i3 - 1][i2 - 1][i1 - 1]));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/4"}
{"code": "for (i3 = 1; i3 <= (mm3 - 1); i3++)\n{\n  for (i2 = d2; i2 <= (mm2 - 1); i2++)\n  {\n    for (i1 = d1; i1 <= (mm1 - 1); i1++)\n    {\n      u[((2 * i3) - t3) - 1][((2 * i2) - d2) - 1][((2 * i1) - d1) - 1] = u[((2 * i3) - t3) - 1][((2 * i2) - d2) - 1][((2 * i1) - d1) - 1] + (0.5 * (z[i3][i2 - 1][i1 - 1] + z[i3 - 1][i2 - 1][i1 - 1]));\n    }\n\n    for (i1 = 1; i1 <= (mm1 - 1); i1++)\n    {\n      u[((2 * i3) - t3) - 1][((2 * i2) - d2) - 1][((2 * i1) - t1) - 1] = u[((2 * i3) - t3) - 1][((2 * i2) - d2) - 1][((2 * i1) - t1) - 1] + (0.25 * (((z[i3][i2 - 1][i1] + z[i3][i2 - 1][i1 - 1]) + z[i3 - 1][i2 - 1][i1]) + z[i3 - 1][i2 - 1][i1 - 1]));\n    }\n\n  }\n\n  for (i2 = 1; i2 <= (mm2 - 1); i2++)\n  {\n    for (i1 = d1; i1 <= (mm1 - 1); i1++)\n    {\n      u[((2 * i3) - t3) - 1][((2 * i2) - t2) - 1][((2 * i1) - d1) - 1] = u[((2 * i3) - t3) - 1][((2 * i2) - t2) - 1][((2 * i1) - d1) - 1] + (0.25 * (((z[i3][i2][i1 - 1] + z[i3][i2 - 1][i1 - 1]) + z[i3 - 1][i2][i1 - 1]) + z[i3 - 1][i2 - 1][i1 - 1]));\n    }\n\n    for (i1 = 1; i1 <= (mm1 - 1); i1++)\n    {\n      u[((2 * i3) - t3) - 1][((2 * i2) - t2) - 1][((2 * i1) - t1) - 1] = u[((2 * i3) - t3) - 1][((2 * i2) - t2) - 1][((2 * i1) - t1) - 1] + (0.125 * (((((((z[i3][i2][i1] + z[i3][i2 - 1][i1]) + z[i3][i2][i1 - 1]) + z[i3][i2 - 1][i1 - 1]) + z[i3 - 1][i2][i1]) + z[i3 - 1][i2 - 1][i1]) + z[i3 - 1][i2][i1 - 1]) + z[i3 - 1][i2 - 1][i1 - 1]));\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/5"}
{"code": "for (i3 = 1; i3 < (n3 - 1); i3++)\n{\n  for (i2 = 1; i2 < (n2 - 1); i2++)\n  {\n    for (i1 = 1; i1 < (n1 - 1); i1++)\n    {\n      s = s + (r[i3][i2][i1] * r[i3][i2][i1]);\n      a = fabs(r[i3][i2][i1]);\n      if (a > tmp)\n        tmp = a;\n\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(i1,i2,i3,a) reduction(+:s) reduction(max:tmp)", "exist": 1, "private": 1, "reduction": 1, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/6"}
{"code": "for (i3 = 1; i3 < (n3 - 1); i3++)\n{\n  for (i2 = 1; i2 < (n2 - 1); i2++)\n  {\n    u[i3][i2][n1 - 1] = u[i3][i2][1];\n    u[i3][i2][0] = u[i3][i2][n1 - 2];\n  }\n\n  for (i1 = 0; i1 < n1; i1++)\n  {\n    u[i3][n2 - 1][i1] = u[i3][1][i1];\n    u[i3][0][i1] = u[i3][n2 - 2][i1];\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/7"}
{"code": "for (i2 = 0; i2 < n2; i2++)\n{\n  for (i1 = 0; i1 < n1; i1++)\n  {\n    u[n3 - 1][i2][i1] = u[1][i2][i1];\n    u[0][i2][i1] = u[n3 - 2][i2][i1];\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/8"}
{"code": "for (i3 = 0; i3 < n3; i3++)\n{\n  for (i2 = 0; i2 < n2; i2++)\n  {\n    for (i1 = 0; i1 < n1; i1++)\n    {\n      z[i3][i2][i1] = 0.0;\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for private(i2, i1)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/9"}
{"code": "for (i = 0; i <= 7; i++)\n{\n  fscanf(fp, \"%d\", &debug_vec[i]);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/10"}
{"code": "for (i = 0; i <= 7; i++)\n{\n  debug_vec[i] = DEBUG_DEFAULT;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/11"}
{"code": "for (l = lt; l >= 1; l--)\n{\n  u[l] = (double ***) malloc(m3[l] * (sizeof(double **)));\n  for (k = 0; k < m3[l]; k++)\n  {\n    u[l][k] = (double **) malloc(m2[l] * (sizeof(double *)));\n    for (j = 0; j < m2[l]; j++)\n    {\n      u[l][k][j] = (double *) malloc(m1[l] * (sizeof(double)));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/12"}
{"code": "for (k = 0; k < m3[lt]; k++)\n{\n  v[k] = (double **) malloc(m2[lt] * (sizeof(double *)));\n  for (j = 0; j < m2[lt]; j++)\n  {\n    v[k][j] = (double *) malloc(m1[lt] * (sizeof(double)));\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/13"}
{"code": "for (l = lt; l >= 1; l--)\n{\n  r[l] = (double ***) malloc(m3[l] * (sizeof(double **)));\n  for (k = 0; k < m3[l]; k++)\n  {\n    r[l][k] = (double **) malloc(m2[l] * (sizeof(double *)));\n    for (j = 0; j < m2[l]; j++)\n    {\n      r[l][k][j] = (double *) malloc(m1[l] * (sizeof(double)));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/14"}
{"code": "for (it = 1; it <= nit; it++)\n{\n  mg3P(u, v, r, a, c, n1, n2, n3, lt);\n  resid(u[lt], v, r[lt], n1, n2, n3, a, lt);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/15"}
{"code": "for (k = lt - 1; k >= 1; k--)\n{\n  nx[k] = nx[k + 1] / 2;\n  ny[k] = ny[k + 1] / 2;\n  nz[k] = nz[k + 1] / 2;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/16"}
{"code": "for (k = 1; k <= lt; k++)\n{\n  m1[k] = nx[k] + 2;\n  m2[k] = nz[k] + 2;\n  m3[k] = ny[k] + 2;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/17"}
{"code": "for (k = lt; k >= (lb + 1); k--)\n{\n  j = k - 1;\n  rprj3(r[k], m1[k], m2[k], m3[k], r[j], m1[j], m2[j], m3[j], k);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/18"}
{"code": "for (k = lb + 1; k <= (lt - 1); k++)\n{\n  j = k - 1;\n  zero3(u[k], m1[k], m2[k], m3[k]);\n  interp(u[j], m1[j], m2[j], m3[j], u[k], m1[k], m2[k], m3[k], k);\n  resid(u[k], r[k], r[k], m1[k], m2[k], m3[k], a, k);\n  psinv(r[k], u[k], m1[k], m2[k], m3[k], c, k);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/19"}
{"code": "for (i3 = 1; i3 < e3; i3++)\n{\n  x1 = x0;\n  for (i2 = 1; i2 < e2; i2++)\n  {\n    xx = x1;\n    vranlc(d1, &xx, pow(5.0, 13), &z[i3][i2][0]);\n    rdummy = randlc(&x1, a1);\n  }\n\n  rdummy = randlc(&x0, a2);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/20"}
{"code": "for (i = 0; i < 10; i++)\n{\n  ten[i][1] = 0.0;\n  j1[i][1] = 0;\n  j2[i][1] = 0;\n  j3[i][1] = 0;\n  ten[i][0] = 1.0;\n  j1[i][0] = 0;\n  j2[i][0] = 0;\n  j3[i][0] = 0;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/21"}
{"code": "for (i3 = 1; i3 < (n3 - 1); i3++)\n{\n  for (i2 = 1; i2 < (n2 - 1); i2++)\n  {\n    for (i1 = 1; i1 < (n1 - 1); i1++)\n    {\n      if (z[i3][i2][i1] > ten[0][1])\n      {\n        ten[0][1] = z[i3][i2][i1];\n        j1[0][1] = i1;\n        j2[0][1] = i2;\n        j3[0][1] = i3;\n        bubble(ten, j1, j2, j3, 10, 1);\n      }\n\n      if (z[i3][i2][i1] < ten[0][0])\n      {\n        ten[0][0] = z[i3][i2][i1];\n        j1[0][0] = i1;\n        j2[0][0] = i2;\n        j3[0][0] = i3;\n        bubble(ten, j1, j2, j3, 10, 0);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/22"}
{"code": "for (i = 10 - 1; i >= 0; i--)\n{\n  best = z[j3[i1][1]][j2[i1][1]][j1[i1][1]];\n  if (best == z[j3[i1][1]][j2[i1][1]][j1[i1][1]])\n  {\n    jg[0][i][1] = 0;\n    jg[1][i][1] = (is1 - 1) + j1[i1][1];\n    jg[2][i][1] = (is2 - 1) + j2[i1][1];\n    jg[3][i][1] = (is3 - 1) + j3[i1][1];\n    i1 = i1 - 1;\n  }\n  else\n  {\n    jg[0][i][1] = 0;\n    jg[1][i][1] = 0;\n    jg[2][i][1] = 0;\n    jg[3][i][1] = 0;\n  }\n\n  ten[i][1] = best;\n  best = z[j3[i0][0]][j2[i0][0]][j1[i0][0]];\n  if (best == z[j3[i0][0]][j2[i0][0]][j1[i0][0]])\n  {\n    jg[0][i][0] = 0;\n    jg[1][i][0] = (is1 - 1) + j1[i0][0];\n    jg[2][i][0] = (is2 - 1) + j2[i0][0];\n    jg[3][i][0] = (is3 - 1) + j3[i0][0];\n    i0 = i0 - 1;\n  }\n  else\n  {\n    jg[0][i][0] = 0;\n    jg[1][i][0] = 0;\n    jg[2][i][0] = 0;\n    jg[3][i][0] = 0;\n  }\n\n  ten[i][0] = best;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/23"}
{"code": "for (i = 10 - 1; i >= m0; i--)\n{\n  z[j3[i][0]][j2[i][0]][j1[i][0]] = -1.0;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/24"}
{"code": "for (i = 10 - 1; i >= m1; i--)\n{\n  z[j3[i][1]][j2[i][1]][j1[i][1]] = 1.0;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/25"}
{"code": "for (i3 = 0; i3 < m3; i3++)\n{\n  for (i1 = 0; i1 < m1; i1++)\n  {\n    for (i2 = 0; i2 < m2; i2++)\n    {\n      printf(\"%6.3f\", z[i3][i2][i1]);\n    }\n\n    printf(\"\\n\");\n  }\n\n  printf(\" - - - - - - - \\n\");\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/26"}
{"code": "for (i = 0; i < (m - 1); i++)\n{\n  if (ten[i][ind] > ten[i + 1][ind])\n  {\n    temp = ten[i + 1][ind];\n    ten[i + 1][ind] = ten[i][ind];\n    ten[i][ind] = temp;\n    j_temp = j1[i + 1][ind];\n    j1[i + 1][ind] = j1[i][ind];\n    j1[i][ind] = j_temp;\n    j_temp = j2[i + 1][ind];\n    j2[i + 1][ind] = j2[i][ind];\n    j2[i][ind] = j_temp;\n    j_temp = j3[i + 1][ind];\n    j3[i + 1][ind] = j3[i][ind];\n    j3[i][ind] = j_temp;\n  }\n  else\n  {\n    return;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/27"}
{"code": "for (i = 0; i < (m - 1); i++)\n{\n  if (ten[i][ind] < ten[i + 1][ind])\n  {\n    temp = ten[i + 1][ind];\n    ten[i + 1][ind] = ten[i][ind];\n    ten[i][ind] = temp;\n    j_temp = j1[i + 1][ind];\n    j1[i + 1][ind] = j1[i][ind];\n    j1[i][ind] = j_temp;\n    j_temp = j2[i + 1][ind];\n    j2[i + 1][ind] = j2[i][ind];\n    j2[i][ind] = j_temp;\n    j_temp = j3[i + 1][ind];\n    j3[i + 1][ind] = j3[i][ind];\n    j3[i][ind] = j_temp;\n  }\n  else\n  {\n    return;\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/MG/mg/28"}
{"code": "for (m = 0; m < 5; m++)\n{\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        u[m][i][j][k] = u[m][i][j][k] + rhs[m][i][j][k];\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/0"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      lhs[n][i][j][k] = 0.0;\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/1"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    for (k = 0; k < grid_points[2]; k++)\n    {\n      lhs[(5 * n) + 2][i][j][k] = 1.0;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/2"}
{"code": "for (i = 0; i <= (grid_points[0] - 1); i++)\n{\n  ru1 = c3c4 * rho_i[i][j][k];\n  cv[i] = us[i][j][k];\n  rhon[i] = max(dx2 + (con43 * ru1), max(dx5 + (c1c5 * ru1), max(dxmax + ru1, dx1)));\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/3"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  lhs[0][i][j][k] = 0.0;\n  lhs[1][i][j][k] = ((-dttx2) * cv[i - 1]) - (dttx1 * rhon[i - 1]);\n  lhs[2][i][j][k] = 1.0 + (c2dttx1 * rhon[i]);\n  lhs[3][i][j][k] = (dttx2 * cv[i + 1]) - (dttx1 * rhon[i + 1]);\n  lhs[4][i][j][k] = 0.0;\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/4"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    lhs[2][i][j][k] = lhs[2][i][j][k] + comz5;\n    lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n    lhs[4][i][j][k] = lhs[4][i][j][k] + comz1;\n    lhs[1][i + 1][j][k] = lhs[1][i + 1][j][k] - comz4;\n    lhs[2][i + 1][j][k] = lhs[2][i + 1][j][k] + comz6;\n    lhs[3][i + 1][j][k] = lhs[3][i + 1][j][k] - comz4;\n    lhs[4][i + 1][j][k] = lhs[4][i + 1][j][k] + comz1;\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/5"}
{"code": "for (i = 3; i <= (grid_points[0] - 4); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      lhs[0][i][j][k] = lhs[0][i][j][k] + comz1;\n      lhs[1][i][j][k] = lhs[1][i][j][k] - comz4;\n      lhs[2][i][j][k] = lhs[2][i][j][k] + comz6;\n      lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n      lhs[4][i][j][k] = lhs[4][i][j][k] + comz1;\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/6"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    lhs[0][i][j][k] = lhs[0][i][j][k] + comz1;\n    lhs[1][i][j][k] = lhs[1][i][j][k] - comz4;\n    lhs[2][i][j][k] = lhs[2][i][j][k] + comz6;\n    lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n    lhs[0][i + 1][j][k] = lhs[0][i + 1][j][k] + comz1;\n    lhs[1][i + 1][j][k] = lhs[1][i + 1][j][k] - comz4;\n    lhs[2][i + 1][j][k] = lhs[2][i + 1][j][k] + comz5;\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/7"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      lhs[0 + 5][i][j][k] = lhs[0][i][j][k];\n      lhs[1 + 5][i][j][k] = lhs[1][i][j][k] - (dttx2 * speed[i - 1][j][k]);\n      lhs[2 + 5][i][j][k] = lhs[2][i][j][k];\n      lhs[3 + 5][i][j][k] = lhs[3][i][j][k] + (dttx2 * speed[i + 1][j][k]);\n      lhs[4 + 5][i][j][k] = lhs[4][i][j][k];\n      lhs[0 + 10][i][j][k] = lhs[0][i][j][k];\n      lhs[1 + 10][i][j][k] = lhs[1][i][j][k] + (dttx2 * speed[i - 1][j][k]);\n      lhs[2 + 10][i][j][k] = lhs[2][i][j][k];\n      lhs[3 + 10][i][j][k] = lhs[3][i][j][k] - (dttx2 * speed[i + 1][j][k]);\n      lhs[4 + 10][i][j][k] = lhs[4][i][j][k];\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/8"}
{"code": "for (j = 0; j <= (grid_points[1] - 1); j++)\n{\n  ru1 = c3c4 * rho_i[i][j][k];\n  cv[j] = vs[i][j][k];\n  rhoq[j] = max(dy3 + (con43 * ru1), max(dy5 + (c1c5 * ru1), max(dymax + ru1, dy1)));\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/9"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  lhs[0][i][j][k] = 0.0;\n  lhs[1][i][j][k] = ((-dtty2) * cv[j - 1]) - (dtty1 * rhoq[j - 1]);\n  lhs[2][i][j][k] = 1.0 + (c2dtty1 * rhoq[j]);\n  lhs[3][i][j][k] = (dtty2 * cv[j + 1]) - (dtty1 * rhoq[j + 1]);\n  lhs[4][i][j][k] = 0.0;\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/10"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    lhs[2][i][j][k] = lhs[2][i][j][k] + comz5;\n    lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n    lhs[4][i][j][k] = lhs[4][i][j][k] + comz1;\n    lhs[1][i][j + 1][k] = lhs[1][i][j + 1][k] - comz4;\n    lhs[2][i][j + 1][k] = lhs[2][i][j + 1][k] + comz6;\n    lhs[3][i][j + 1][k] = lhs[3][i][j + 1][k] - comz4;\n    lhs[4][i][j + 1][k] = lhs[4][i][j + 1][k] + comz1;\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/11"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 3; j <= (grid_points[1] - 4); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      lhs[0][i][j][k] = lhs[0][i][j][k] + comz1;\n      lhs[1][i][j][k] = lhs[1][i][j][k] - comz4;\n      lhs[2][i][j][k] = lhs[2][i][j][k] + comz6;\n      lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n      lhs[4][i][j][k] = lhs[4][i][j][k] + comz1;\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/12"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    lhs[0][i][j][k] = lhs[0][i][j][k] + comz1;\n    lhs[1][i][j][k] = lhs[1][i][j][k] - comz4;\n    lhs[2][i][j][k] = lhs[2][i][j][k] + comz6;\n    lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n    lhs[0][i][j + 1][k] = lhs[0][i][j + 1][k] + comz1;\n    lhs[1][i][j + 1][k] = lhs[1][i][j + 1][k] - comz4;\n    lhs[2][i][j + 1][k] = lhs[2][i][j + 1][k] + comz5;\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/13"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      lhs[0 + 5][i][j][k] = lhs[0][i][j][k];\n      lhs[1 + 5][i][j][k] = lhs[1][i][j][k] - (dtty2 * speed[i][j - 1][k]);\n      lhs[2 + 5][i][j][k] = lhs[2][i][j][k];\n      lhs[3 + 5][i][j][k] = lhs[3][i][j][k] + (dtty2 * speed[i][j + 1][k]);\n      lhs[4 + 5][i][j][k] = lhs[4][i][j][k];\n      lhs[0 + 10][i][j][k] = lhs[0][i][j][k];\n      lhs[1 + 10][i][j][k] = lhs[1][i][j][k] + (dtty2 * speed[i][j - 1][k]);\n      lhs[2 + 10][i][j][k] = lhs[2][i][j][k];\n      lhs[3 + 10][i][j][k] = lhs[3][i][j][k] - (dtty2 * speed[i][j + 1][k]);\n      lhs[4 + 10][i][j][k] = lhs[4][i][j][k];\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/14"}
{"code": "for (k = 0; k <= (grid_points[2] - 1); k++)\n{\n  ru1 = c3c4 * rho_i[i][j][k];\n  cv[k] = ws[i][j][k];\n  rhos[k] = max(dz4 + (con43 * ru1), max(dz5 + (c1c5 * ru1), max(dzmax + ru1, dz1)));\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/15"}
{"code": "for (k = 1; k <= (grid_points[2] - 2); k++)\n{\n  lhs[0][i][j][k] = 0.0;\n  lhs[1][i][j][k] = ((-dttz2) * cv[k - 1]) - (dttz1 * rhos[k - 1]);\n  lhs[2][i][j][k] = 1.0 + (c2dttz1 * rhos[k]);\n  lhs[3][i][j][k] = (dttz2 * cv[k + 1]) - (dttz1 * rhos[k + 1]);\n  lhs[4][i][j][k] = 0.0;\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/16"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    lhs[2][i][j][k] = lhs[2][i][j][k] + comz5;\n    lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n    lhs[4][i][j][k] = lhs[4][i][j][k] + comz1;\n    lhs[1][i][j][k + 1] = lhs[1][i][j][k + 1] - comz4;\n    lhs[2][i][j][k + 1] = lhs[2][i][j][k + 1] + comz6;\n    lhs[3][i][j][k + 1] = lhs[3][i][j][k + 1] - comz4;\n    lhs[4][i][j][k + 1] = lhs[4][i][j][k + 1] + comz1;\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/17"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 3; k <= (grid_points[2] - 4); k++)\n    {\n      lhs[0][i][j][k] = lhs[0][i][j][k] + comz1;\n      lhs[1][i][j][k] = lhs[1][i][j][k] - comz4;\n      lhs[2][i][j][k] = lhs[2][i][j][k] + comz6;\n      lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n      lhs[4][i][j][k] = lhs[4][i][j][k] + comz1;\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/18"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    lhs[0][i][j][k] = lhs[0][i][j][k] + comz1;\n    lhs[1][i][j][k] = lhs[1][i][j][k] - comz4;\n    lhs[2][i][j][k] = lhs[2][i][j][k] + comz6;\n    lhs[3][i][j][k] = lhs[3][i][j][k] - comz4;\n    lhs[0][i][j][k + 1] = lhs[0][i][j][k + 1] + comz1;\n    lhs[1][i][j][k + 1] = lhs[1][i][j][k + 1] - comz4;\n    lhs[2][i][j][k + 1] = lhs[2][i][j][k + 1] + comz5;\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/19"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      lhs[0 + 5][i][j][k] = lhs[0][i][j][k];\n      lhs[1 + 5][i][j][k] = lhs[1][i][j][k] - (dttz2 * speed[i][j][k - 1]);\n      lhs[2 + 5][i][j][k] = lhs[2][i][j][k];\n      lhs[3 + 5][i][j][k] = lhs[3][i][j][k] + (dttz2 * speed[i][j][k + 1]);\n      lhs[4 + 5][i][j][k] = lhs[4][i][j][k];\n      lhs[0 + 10][i][j][k] = lhs[0][i][j][k];\n      lhs[1 + 10][i][j][k] = lhs[1][i][j][k] + (dttz2 * speed[i][j][k - 1]);\n      lhs[2 + 10][i][j][k] = lhs[2][i][j][k];\n      lhs[3 + 10][i][j][k] = lhs[3][i][j][k] - (dttz2 * speed[i][j][k + 1]);\n      lhs[4 + 10][i][j][k] = lhs[4][i][j][k];\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/20"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      r1 = rhs[0][i][j][k];\n      r2 = rhs[1][i][j][k];\n      r3 = rhs[2][i][j][k];\n      r4 = rhs[3][i][j][k];\n      r5 = rhs[4][i][j][k];\n      t1 = bt * r3;\n      t2 = 0.5 * (r4 + r5);\n      rhs[0][i][j][k] = -r2;\n      rhs[1][i][j][k] = r1;\n      rhs[2][i][j][k] = bt * (r4 - r5);\n      rhs[3][i][j][k] = (-t1) + t2;\n      rhs[4][i][j][k] = t1 + t2;\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(i,j,k,r1,r2,r3,r4,r5,t1,t2)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/21"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      r1 = rhs[0][i][j][k];\n      r2 = rhs[1][i][j][k];\n      r3 = rhs[2][i][j][k];\n      r4 = rhs[3][i][j][k];\n      r5 = rhs[4][i][j][k];\n      t1 = bt * r1;\n      t2 = 0.5 * (r4 + r5);\n      rhs[0][i][j][k] = bt * (r4 - r5);\n      rhs[1][i][j][k] = -r3;\n      rhs[2][i][j][k] = r2;\n      rhs[3][i][j][k] = (-t1) + t2;\n      rhs[4][i][j][k] = t1 + t2;\n    }\n\n  }\n\n}\n", "pragma": "omp parallel for default(shared) private(i,j,k,r1,r2,r3,r4,r5,t1,t2)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/22"}
{"code": "for (i = 0; i <= (grid_points[0] - 1); i++)\n{\n  for (j = 0; j <= (grid_points[1] - 1); j++)\n  {\n    for (k = 0; k <= (grid_points[2] - 1); k++)\n    {\n      rho_inv = 1.0 / u[0][i][j][k];\n      rho_i[i][j][k] = rho_inv;\n      us[i][j][k] = u[1][i][j][k] * rho_inv;\n      vs[i][j][k] = u[2][i][j][k] * rho_inv;\n      ws[i][j][k] = u[3][i][j][k] * rho_inv;\n      square[i][j][k] = (0.5 * (((u[1][i][j][k] * u[1][i][j][k]) + (u[2][i][j][k] * u[2][i][j][k])) + (u[3][i][j][k] * u[3][i][j][k]))) * rho_inv;\n      qs[i][j][k] = square[i][j][k] * rho_inv;\n      aux = (c1c2 * rho_inv) * (u[4][i][j][k] - square[i][j][k]);\n      aux = sqrt(aux);\n      speed[i][j][k] = aux;\n      ainv[i][j][k] = 1.0 / aux;\n    }\n\n  }\n\n}\n", "pragma": "omp for nowait", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/23"}
{"code": "for (i = 0; i <= (grid_points[0] - 1); i++)\n{\n  for (j = 0; j <= (grid_points[1] - 1); j++)\n  {\n    for (k = 0; k <= (grid_points[2] - 1); k++)\n    {\n      rhs[m][i][j][k] = forcing[m][i][j][k];\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/24"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      uijk = us[i][j][k];\n      up1 = us[i + 1][j][k];\n      um1 = us[i - 1][j][k];\n      rhs[0][i][j][k] = (rhs[0][i][j][k] + (dx1tx1 * ((u[0][i + 1][j][k] - (2.0 * u[0][i][j][k])) + u[0][i - 1][j][k]))) - (tx2 * (u[1][i + 1][j][k] - u[1][i - 1][j][k]));\n      rhs[1][i][j][k] = ((rhs[1][i][j][k] + (dx2tx1 * ((u[1][i + 1][j][k] - (2.0 * u[1][i][j][k])) + u[1][i - 1][j][k]))) + ((xxcon2 * con43) * ((up1 - (2.0 * uijk)) + um1))) - (tx2 * (((u[1][i + 1][j][k] * up1) - (u[1][i - 1][j][k] * um1)) + ((((u[4][i + 1][j][k] - square[i + 1][j][k]) - u[4][i - 1][j][k]) + square[i - 1][j][k]) * c2)));\n      rhs[2][i][j][k] = ((rhs[2][i][j][k] + (dx3tx1 * ((u[2][i + 1][j][k] - (2.0 * u[2][i][j][k])) + u[2][i - 1][j][k]))) + (xxcon2 * ((vs[i + 1][j][k] - (2.0 * vs[i][j][k])) + vs[i - 1][j][k]))) - (tx2 * ((u[2][i + 1][j][k] * up1) - (u[2][i - 1][j][k] * um1)));\n      rhs[3][i][j][k] = ((rhs[3][i][j][k] + (dx4tx1 * ((u[3][i + 1][j][k] - (2.0 * u[3][i][j][k])) + u[3][i - 1][j][k]))) + (xxcon2 * ((ws[i + 1][j][k] - (2.0 * ws[i][j][k])) + ws[i - 1][j][k]))) - (tx2 * ((u[3][i + 1][j][k] * up1) - (u[3][i - 1][j][k] * um1)));\n      rhs[4][i][j][k] = ((((rhs[4][i][j][k] + (dx5tx1 * ((u[4][i + 1][j][k] - (2.0 * u[4][i][j][k])) + u[4][i - 1][j][k]))) + (xxcon3 * ((qs[i + 1][j][k] - (2.0 * qs[i][j][k])) + qs[i - 1][j][k]))) + (xxcon4 * (((up1 * up1) - ((2.0 * uijk) * uijk)) + (um1 * um1)))) + (xxcon5 * (((u[4][i + 1][j][k] * rho_i[i + 1][j][k]) - ((2.0 * u[4][i][j][k]) * rho_i[i][j][k])) + (u[4][i - 1][j][k] * rho_i[i - 1][j][k])))) - (tx2 * ((((c1 * u[4][i + 1][j][k]) - (c2 * square[i + 1][j][k])) * up1) - (((c1 * u[4][i - 1][j][k]) - (c2 * square[i - 1][j][k])) * um1)));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/25"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((5.0 * u[m][i][j][k]) - (4.0 * u[m][i + 1][j][k])) + u[m][i + 2][j][k]));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/26"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((((-4.0) * u[m][i - 1][j][k]) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i + 1][j][k])) + u[m][i + 2][j][k]));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/27"}
{"code": "for (i = 3 * 1; i <= ((grid_points[0] - (3 * 1)) - 1); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((((u[m][i - 2][j][k] - (4.0 * u[m][i - 1][j][k])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i + 1][j][k])) + u[m][i + 2][j][k]));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/28"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((u[m][i - 2][j][k] - (4.0 * u[m][i - 1][j][k])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i + 1][j][k])));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/29"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((u[m][i - 2][j][k] - (4.0 * u[m][i - 1][j][k])) + (5.0 * u[m][i][j][k])));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/30"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      vijk = vs[i][j][k];\n      vp1 = vs[i][j + 1][k];\n      vm1 = vs[i][j - 1][k];\n      rhs[0][i][j][k] = (rhs[0][i][j][k] + (dy1ty1 * ((u[0][i][j + 1][k] - (2.0 * u[0][i][j][k])) + u[0][i][j - 1][k]))) - (ty2 * (u[2][i][j + 1][k] - u[2][i][j - 1][k]));\n      rhs[1][i][j][k] = ((rhs[1][i][j][k] + (dy2ty1 * ((u[1][i][j + 1][k] - (2.0 * u[1][i][j][k])) + u[1][i][j - 1][k]))) + (yycon2 * ((us[i][j + 1][k] - (2.0 * us[i][j][k])) + us[i][j - 1][k]))) - (ty2 * ((u[1][i][j + 1][k] * vp1) - (u[1][i][j - 1][k] * vm1)));\n      rhs[2][i][j][k] = ((rhs[2][i][j][k] + (dy3ty1 * ((u[2][i][j + 1][k] - (2.0 * u[2][i][j][k])) + u[2][i][j - 1][k]))) + ((yycon2 * con43) * ((vp1 - (2.0 * vijk)) + vm1))) - (ty2 * (((u[2][i][j + 1][k] * vp1) - (u[2][i][j - 1][k] * vm1)) + ((((u[4][i][j + 1][k] - square[i][j + 1][k]) - u[4][i][j - 1][k]) + square[i][j - 1][k]) * c2)));\n      rhs[3][i][j][k] = ((rhs[3][i][j][k] + (dy4ty1 * ((u[3][i][j + 1][k] - (2.0 * u[3][i][j][k])) + u[3][i][j - 1][k]))) + (yycon2 * ((ws[i][j + 1][k] - (2.0 * ws[i][j][k])) + ws[i][j - 1][k]))) - (ty2 * ((u[3][i][j + 1][k] * vp1) - (u[3][i][j - 1][k] * vm1)));\n      rhs[4][i][j][k] = ((((rhs[4][i][j][k] + (dy5ty1 * ((u[4][i][j + 1][k] - (2.0 * u[4][i][j][k])) + u[4][i][j - 1][k]))) + (yycon3 * ((qs[i][j + 1][k] - (2.0 * qs[i][j][k])) + qs[i][j - 1][k]))) + (yycon4 * (((vp1 * vp1) - ((2.0 * vijk) * vijk)) + (vm1 * vm1)))) + (yycon5 * (((u[4][i][j + 1][k] * rho_i[i][j + 1][k]) - ((2.0 * u[4][i][j][k]) * rho_i[i][j][k])) + (u[4][i][j - 1][k] * rho_i[i][j - 1][k])))) - (ty2 * ((((c1 * u[4][i][j + 1][k]) - (c2 * square[i][j + 1][k])) * vp1) - (((c1 * u[4][i][j - 1][k]) - (c2 * square[i][j - 1][k])) * vm1)));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/31"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((5.0 * u[m][i][j][k]) - (4.0 * u[m][i][j + 1][k])) + u[m][i][j + 2][k]));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/32"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((((-4.0) * u[m][i][j - 1][k]) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j + 1][k])) + u[m][i][j + 2][k]));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/33"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 3 * 1; j <= ((grid_points[1] - (3 * 1)) - 1); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((((u[m][i][j - 2][k] - (4.0 * u[m][i][j - 1][k])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j + 1][k])) + u[m][i][j + 2][k]));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/34"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((u[m][i][j - 2][k] - (4.0 * u[m][i][j - 1][k])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j + 1][k])));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/35"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((u[m][i][j - 2][k] - (4.0 * u[m][i][j - 1][k])) + (5.0 * u[m][i][j][k])));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/36"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      wijk = ws[i][j][k];\n      wp1 = ws[i][j][k + 1];\n      wm1 = ws[i][j][k - 1];\n      rhs[0][i][j][k] = (rhs[0][i][j][k] + (dz1tz1 * ((u[0][i][j][k + 1] - (2.0 * u[0][i][j][k])) + u[0][i][j][k - 1]))) - (tz2 * (u[3][i][j][k + 1] - u[3][i][j][k - 1]));\n      rhs[1][i][j][k] = ((rhs[1][i][j][k] + (dz2tz1 * ((u[1][i][j][k + 1] - (2.0 * u[1][i][j][k])) + u[1][i][j][k - 1]))) + (zzcon2 * ((us[i][j][k + 1] - (2.0 * us[i][j][k])) + us[i][j][k - 1]))) - (tz2 * ((u[1][i][j][k + 1] * wp1) - (u[1][i][j][k - 1] * wm1)));\n      rhs[2][i][j][k] = ((rhs[2][i][j][k] + (dz3tz1 * ((u[2][i][j][k + 1] - (2.0 * u[2][i][j][k])) + u[2][i][j][k - 1]))) + (zzcon2 * ((vs[i][j][k + 1] - (2.0 * vs[i][j][k])) + vs[i][j][k - 1]))) - (tz2 * ((u[2][i][j][k + 1] * wp1) - (u[2][i][j][k - 1] * wm1)));\n      rhs[3][i][j][k] = ((rhs[3][i][j][k] + (dz4tz1 * ((u[3][i][j][k + 1] - (2.0 * u[3][i][j][k])) + u[3][i][j][k - 1]))) + ((zzcon2 * con43) * ((wp1 - (2.0 * wijk)) + wm1))) - (tz2 * (((u[3][i][j][k + 1] * wp1) - (u[3][i][j][k - 1] * wm1)) + ((((u[4][i][j][k + 1] - square[i][j][k + 1]) - u[4][i][j][k - 1]) + square[i][j][k - 1]) * c2)));\n      rhs[4][i][j][k] = ((((rhs[4][i][j][k] + (dz5tz1 * ((u[4][i][j][k + 1] - (2.0 * u[4][i][j][k])) + u[4][i][j][k - 1]))) + (zzcon3 * ((qs[i][j][k + 1] - (2.0 * qs[i][j][k])) + qs[i][j][k - 1]))) + (zzcon4 * (((wp1 * wp1) - ((2.0 * wijk) * wijk)) + (wm1 * wm1)))) + (zzcon5 * (((u[4][i][j][k + 1] * rho_i[i][j][k + 1]) - ((2.0 * u[4][i][j][k]) * rho_i[i][j][k])) + (u[4][i][j][k - 1] * rho_i[i][j][k - 1])))) - (tz2 * ((((c1 * u[4][i][j][k + 1]) - (c2 * square[i][j][k + 1])) * wp1) - (((c1 * u[4][i][j][k - 1]) - (c2 * square[i][j][k - 1])) * wm1)));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/37"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((5.0 * u[m][i][j][k]) - (4.0 * u[m][i][j][k + 1])) + u[m][i][j][k + 2]));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/38"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((((-4.0) * u[m][i][j][k - 1]) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j][k + 1])) + u[m][i][j][k + 2]));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/39"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 3 * 1; k <= ((grid_points[2] - (3 * 1)) - 1); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((((u[m][i][j][k - 2] - (4.0 * u[m][i][j][k - 1])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j][k + 1])) + u[m][i][j][k + 2]));\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/40"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((u[m][i][j][k - 2] - (4.0 * u[m][i][j][k - 1])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j][k + 1])));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/41"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((u[m][i][j][k - 2] - (4.0 * u[m][i][j][k - 1])) + (5.0 * u[m][i][j][k])));\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/42"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] * dt;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/43"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      ru1 = rho_i[i][j][k];\n      uu = us[i][j][k];\n      vv = vs[i][j][k];\n      ww = ws[i][j][k];\n      ac = speed[i][j][k];\n      ac2inv = ainv[i][j][k] * ainv[i][j][k];\n      r1 = rhs[0][i][j][k];\n      r2 = rhs[1][i][j][k];\n      r3 = rhs[2][i][j][k];\n      r4 = rhs[3][i][j][k];\n      r5 = rhs[4][i][j][k];\n      t1 = (c2 * ac2inv) * (((((qs[i][j][k] * r1) - (uu * r2)) - (vv * r3)) - (ww * r4)) + r5);\n      t2 = (bt * ru1) * ((uu * r1) - r2);\n      t3 = ((bt * ru1) * ac) * t1;\n      rhs[0][i][j][k] = r1 - t1;\n      rhs[1][i][j][k] = (-ru1) * ((ww * r1) - r4);\n      rhs[2][i][j][k] = ru1 * ((vv * r1) - r3);\n      rhs[3][i][j][k] = (-t2) + t3;\n      rhs[4][i][j][k] = t2 + t3;\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/44"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      xvel = us[i][j][k];\n      yvel = vs[i][j][k];\n      zvel = ws[i][j][k];\n      ac = speed[i][j][k];\n      acinv = ainv[i][j][k];\n      ac2u = ac * ac;\n      r1 = rhs[0][i][j][k];\n      r2 = rhs[1][i][j][k];\n      r3 = rhs[2][i][j][k];\n      r4 = rhs[3][i][j][k];\n      r5 = rhs[4][i][j][k];\n      uzik1 = u[0][i][j][k];\n      btuz = bt * uzik1;\n      t1 = (btuz * acinv) * (r4 + r5);\n      t2 = r3 + t1;\n      t3 = btuz * (r4 - r5);\n      rhs[0][i][j][k] = t2;\n      rhs[1][i][j][k] = ((-uzik1) * r2) + (xvel * t2);\n      rhs[2][i][j][k] = (uzik1 * r1) + (yvel * t2);\n      rhs[3][i][j][k] = (zvel * t2) + t3;\n      rhs[4][i][j][k] = (((uzik1 * (((-xvel) * r2) + (yvel * r1))) + (qs[i][j][k] * t2)) + ((c2iv * ac2u) * t1)) + (zvel * t3);\n    }\n\n  }\n\n}\n", "pragma": "omp for private(i,j,k,t1,t2,t3,ac,xvel,yvel,zvel,r1,r2,r3,r4,r5,btuz,ac2u,uzik1)", "exist": 1, "private": 1, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/45"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    }\n\n    lhs[n + 2][i1][j][k] = lhs[n + 2][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i1][j][k] = lhs[n + 3][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 4][i][j][k]);\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i1][j][k] = rhs[m][i1][j][k] - (lhs[n + 1][i1][j][k] * rhs[m][i][j][k]);\n    }\n\n    lhs[n + 1][i2][j][k] = lhs[n + 1][i2][j][k] - (lhs[n + 0][i2][j][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 2][i2][j][k] = lhs[n + 2][i2][j][k] - (lhs[n + 0][i2][j][k] * lhs[n + 4][i][j][k]);\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i2][j][k] = rhs[m][i2][j][k] - (lhs[n + 0][i2][j][k] * rhs[m][i][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/46"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    fac1 = 1.0 / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    }\n\n    lhs[n + 2][i1][j][k] = lhs[n + 2][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i1][j][k] = lhs[n + 3][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 4][i][j][k]);\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i1][j][k] = rhs[m][i1][j][k] - (lhs[n + 1][i1][j][k] * rhs[m][i][j][k]);\n    }\n\n    fac2 = 1. / lhs[n + 2][i1][j][k];\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i1][j][k] = fac2 * rhs[m][i1][j][k];\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/47"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    lhs[n + 2][i1][j][k] = lhs[n + 2][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i1][j][k] = lhs[n + 3][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 4][i][j][k]);\n    rhs[m][i1][j][k] = rhs[m][i1][j][k] - (lhs[n + 1][i1][j][k] * rhs[m][i][j][k]);\n    lhs[n + 1][i2][j][k] = lhs[n + 1][i2][j][k] - (lhs[n + 0][i2][j][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 2][i2][j][k] = lhs[n + 2][i2][j][k] - (lhs[n + 0][i2][j][k] * lhs[n + 4][i][j][k]);\n    rhs[m][i2][j][k] = rhs[m][i2][j][k] - (lhs[n + 0][i2][j][k] * rhs[m][i][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/48"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    lhs[n + 2][i1][j][k] = lhs[n + 2][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i1][j][k] = lhs[n + 3][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 4][i][j][k]);\n    rhs[m][i1][j][k] = rhs[m][i1][j][k] - (lhs[n + 1][i1][j][k] * rhs[m][i][j][k]);\n    fac2 = 1. / lhs[n + 2][i1][j][k];\n    rhs[m][i1][j][k] = fac2 * rhs[m][i1][j][k];\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/49"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i1][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/50"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    n = ((m - 3) + 1) * 5;\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i1][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/51"}
{"code": "for (m = 0; m < 3; m++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i1][j][k])) - (lhs[n + 4][i][j][k] * rhs[m][i2][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/52"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i1][j][k])) - (lhs[n + 4][i][j][k] * rhs[m][i2][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/53"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    }\n\n    lhs[n + 2][i][j1][k] = lhs[n + 2][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i][j1][k] = lhs[n + 3][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 4][i][j][k]);\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j1][k] = rhs[m][i][j1][k] - (lhs[n + 1][i][j1][k] * rhs[m][i][j][k]);\n    }\n\n    lhs[n + 1][i][j2][k] = lhs[n + 1][i][j2][k] - (lhs[n + 0][i][j2][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 2][i][j2][k] = lhs[n + 2][i][j2][k] - (lhs[n + 0][i][j2][k] * lhs[n + 4][i][j][k]);\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j2][k] = rhs[m][i][j2][k] - (lhs[n + 0][i][j2][k] * rhs[m][i][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/54"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    }\n\n    lhs[n + 2][i][j1][k] = lhs[n + 2][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i][j1][k] = lhs[n + 3][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 4][i][j][k]);\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j1][k] = rhs[m][i][j1][k] - (lhs[n + 1][i][j1][k] * rhs[m][i][j][k]);\n    }\n\n    fac2 = 1. / lhs[n + 2][i][j1][k];\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j1][k] = fac2 * rhs[m][i][j1][k];\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/55"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    lhs[n + 2][i][j1][k] = lhs[n + 2][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i][j1][k] = lhs[n + 3][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 4][i][j][k]);\n    rhs[m][i][j1][k] = rhs[m][i][j1][k] - (lhs[n + 1][i][j1][k] * rhs[m][i][j][k]);\n    lhs[n + 1][i][j2][k] = lhs[n + 1][i][j2][k] - (lhs[n + 0][i][j2][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 2][i][j2][k] = lhs[n + 2][i][j2][k] - (lhs[n + 0][i][j2][k] * lhs[n + 4][i][j][k]);\n    rhs[m][i][j2][k] = rhs[m][i][j2][k] - (lhs[n + 0][i][j2][k] * rhs[m][i][j][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/56"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    lhs[n + 2][i][j1][k] = lhs[n + 2][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i][j1][k] = lhs[n + 3][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 4][i][j][k]);\n    rhs[m][i][j1][k] = rhs[m][i][j1][k] - (lhs[n + 1][i][j1][k] * rhs[m][i][j][k]);\n    fac2 = 1. / lhs[n + 2][i][j1][k];\n    rhs[m][i][j1][k] = fac2 * rhs[m][i][j1][k];\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/57"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j1][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/58"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    n = ((m - 3) + 1) * 5;\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j1][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/59"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j1][k])) - (lhs[n + 4][i][j][k] * rhs[m][i][j2][k]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/60"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 0; k <= (grid_points[2] - 3); k++)\n    {\n      k1 = k + 1;\n      k2 = k + 2;\n      fac1 = 1. / lhs[n + 2][i][j][k];\n      lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n      lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n      }\n\n      lhs[n + 2][i][j][k1] = lhs[n + 2][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 3][i][j][k]);\n      lhs[n + 3][i][j][k1] = lhs[n + 3][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 4][i][j][k]);\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i][j][k1] = rhs[m][i][j][k1] - (lhs[n + 1][i][j][k1] * rhs[m][i][j][k]);\n      }\n\n      lhs[n + 1][i][j][k2] = lhs[n + 1][i][j][k2] - (lhs[n + 0][i][j][k2] * lhs[n + 3][i][j][k]);\n      lhs[n + 2][i][j][k2] = lhs[n + 2][i][j][k2] - (lhs[n + 0][i][j][k2] * lhs[n + 4][i][j][k]);\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i][j][k2] = rhs[m][i][j][k2] - (lhs[n + 0][i][j][k2] * rhs[m][i][j][k]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/61"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    }\n\n    lhs[n + 2][i][j][k1] = lhs[n + 2][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i][j][k1] = lhs[n + 3][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 4][i][j][k]);\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j][k1] = rhs[m][i][j][k1] - (lhs[n + 1][i][j][k1] * rhs[m][i][j][k]);\n    }\n\n    fac2 = 1. / lhs[n + 2][i][j][k1];\n    for (m = 0; m < 3; m++)\n    {\n      rhs[m][i][j][k1] = fac2 * rhs[m][i][j][k1];\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/62"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 0; k <= (grid_points[2] - 3); k++)\n    {\n      k1 = k + 1;\n      k2 = k + 2;\n      fac1 = 1. / lhs[n + 2][i][j][k];\n      lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n      lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n      lhs[n + 2][i][j][k1] = lhs[n + 2][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 3][i][j][k]);\n      lhs[n + 3][i][j][k1] = lhs[n + 3][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 4][i][j][k]);\n      rhs[m][i][j][k1] = rhs[m][i][j][k1] - (lhs[n + 1][i][j][k1] * rhs[m][i][j][k]);\n      lhs[n + 1][i][j][k2] = lhs[n + 1][i][j][k2] - (lhs[n + 0][i][j][k2] * lhs[n + 3][i][j][k]);\n      lhs[n + 2][i][j][k2] = lhs[n + 2][i][j][k2] - (lhs[n + 0][i][j][k2] * lhs[n + 4][i][j][k]);\n      rhs[m][i][j][k2] = rhs[m][i][j][k2] - (lhs[n + 0][i][j][k2] * rhs[m][i][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/63"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    fac1 = 1. / lhs[n + 2][i][j][k];\n    lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n    lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n    rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n    lhs[n + 2][i][j][k1] = lhs[n + 2][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 3][i][j][k]);\n    lhs[n + 3][i][j][k1] = lhs[n + 3][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 4][i][j][k]);\n    rhs[m][i][j][k1] = rhs[m][i][j][k1] - (lhs[n + 1][i][j][k1] * rhs[m][i][j][k]);\n    fac2 = 1. / lhs[n + 2][i][j][k1];\n    rhs[m][i][j][k1] = fac2 * rhs[m][i][j][k1];\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/64"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j][k1]);\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/65"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = grid_points[2] - 3; k >= 0; k--)\n    {\n      k1 = k + 1;\n      k2 = k + 2;\n      rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j][k1])) - (lhs[n + 4][i][j][k] * rhs[m][i][j][k2]);\n    }\n\n  }\n\n}\n", "pragma": "omp for", "exist": 1, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/66"}
{"code": "for (i = 0; i <= (grid_points[0] - 1); i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (j = 0; j <= (grid_points[1] - 1); j++)\n  {\n    eta = ((double) j) * dnym1;\n    for (k = 0; k <= (grid_points[2] - 1); k++)\n    {\n      zeta = ((double) k) * dnzm1;\n      exact_solution(xi, eta, zeta, u_exact);\n      for (m = 0; m < 5; m++)\n      {\n        add = u[m][i][j][k] - u_exact[m];\n        rms[m] = rms[m] + (add * add);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/67"}
{"code": "for (m = 0; m < 5; m++)\n{\n  for (d = 0; d < 3; d++)\n  {\n    rms[m] = rms[m] / ((double) (grid_points[d] - 2));\n  }\n\n  rms[m] = sqrt(rms[m]);\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/68"}
{"code": "for (i = 0; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 0; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 0; k <= (grid_points[2] - 2); k++)\n    {\n      for (m = 0; m < 5; m++)\n      {\n        add = rhs[m][i][j][k];\n        rms[m] = rms[m] + (add * add);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/69"}
{"code": "for (m = 0; m < 5; m++)\n{\n  for (i = 0; i <= (grid_points[0] - 1); i++)\n  {\n    for (j = 0; j <= (grid_points[1] - 1); j++)\n    {\n      for (k = 0; k <= (grid_points[2] - 1); k++)\n      {\n        forcing[m][i][j][k] = 0.0;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/70"}
{"code": "for (k = 1; k <= (grid_points[2] - 2); k++)\n{\n  zeta = ((double) k) * dnzm1;\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    eta = ((double) j) * dnym1;\n    for (i = 0; i <= (grid_points[0] - 1); i++)\n    {\n      xi = ((double) i) * dnxm1;\n      exact_solution(xi, eta, zeta, dtemp);\n      for (m = 0; m < 5; m++)\n      {\n        ue[m][i] = dtemp[m];\n      }\n\n      dtpp = 1.0 / dtemp[0];\n      for (m = 1; m < 5; m++)\n      {\n        buf[m][i] = dtpp * dtemp[m];\n      }\n\n      cuf[i] = buf[1][i] * buf[1][i];\n      buf[0][i] = (cuf[i] + (buf[2][i] * buf[2][i])) + (buf[3][i] * buf[3][i]);\n      q[i] = 0.5 * (((buf[1][i] * ue[1][i]) + (buf[2][i] * ue[2][i])) + (buf[3][i] * ue[3][i]));\n    }\n\n    for (i = 1; i <= (grid_points[0] - 2); i++)\n    {\n      im1 = i - 1;\n      ip1 = i + 1;\n      forcing[0][i][j][k] = (forcing[0][i][j][k] - (tx2 * (ue[1][ip1] - ue[1][im1]))) + (dx1tx1 * ((ue[0][ip1] - (2.0 * ue[0][i])) + ue[0][im1]));\n      forcing[1][i][j][k] = ((forcing[1][i][j][k] - (tx2 * (((ue[1][ip1] * buf[1][ip1]) + (c2 * (ue[4][ip1] - q[ip1]))) - ((ue[1][im1] * buf[1][im1]) + (c2 * (ue[4][im1] - q[im1])))))) + (xxcon1 * ((buf[1][ip1] - (2.0 * buf[1][i])) + buf[1][im1]))) + (dx2tx1 * ((ue[1][ip1] - (2.0 * ue[1][i])) + ue[1][im1]));\n      forcing[2][i][j][k] = ((forcing[2][i][j][k] - (tx2 * ((ue[2][ip1] * buf[1][ip1]) - (ue[2][im1] * buf[1][im1])))) + (xxcon2 * ((buf[2][ip1] - (2.0 * buf[2][i])) + buf[2][im1]))) + (dx3tx1 * ((ue[2][ip1] - (2.0 * ue[2][i])) + ue[2][im1]));\n      forcing[3][i][j][k] = ((forcing[3][i][j][k] - (tx2 * ((ue[3][ip1] * buf[1][ip1]) - (ue[3][im1] * buf[1][im1])))) + (xxcon2 * ((buf[3][ip1] - (2.0 * buf[3][i])) + buf[3][im1]))) + (dx4tx1 * ((ue[3][ip1] - (2.0 * ue[3][i])) + ue[3][im1]));\n      forcing[4][i][j][k] = ((((forcing[4][i][j][k] - (tx2 * ((buf[1][ip1] * ((c1 * ue[4][ip1]) - (c2 * q[ip1]))) - (buf[1][im1] * ((c1 * ue[4][im1]) - (c2 * q[im1])))))) + ((0.5 * xxcon3) * ((buf[0][ip1] - (2.0 * buf[0][i])) + buf[0][im1]))) + (xxcon4 * ((cuf[ip1] - (2.0 * cuf[i])) + cuf[im1]))) + (xxcon5 * ((buf[4][ip1] - (2.0 * buf[4][i])) + buf[4][im1]))) + (dx5tx1 * ((ue[4][ip1] - (2.0 * ue[4][i])) + ue[4][im1]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      i = 1;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((5.0 * ue[m][i]) - (4.0 * ue[m][i + 1])) + ue[m][i + 2]));\n      i = 2;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((((-4.0) * ue[m][i - 1]) + (6.0 * ue[m][i])) - (4.0 * ue[m][i + 1])) + ue[m][i + 2]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      for (i = 3; i <= (grid_points[0] - 4); i++)\n      {\n        forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * ((((ue[m][i - 2] - (4.0 * ue[m][i - 1])) + (6.0 * ue[m][i])) - (4.0 * ue[m][i + 1])) + ue[m][i + 2]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      i = grid_points[0] - 3;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((ue[m][i - 2] - (4.0 * ue[m][i - 1])) + (6.0 * ue[m][i])) - (4.0 * ue[m][i + 1])));\n      i = grid_points[0] - 2;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * ((ue[m][i - 2] - (4.0 * ue[m][i - 1])) + (5.0 * ue[m][i])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/71"}
{"code": "for (k = 1; k <= (grid_points[2] - 2); k++)\n{\n  zeta = ((double) k) * dnzm1;\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    xi = ((double) i) * dnxm1;\n    for (j = 0; j <= (grid_points[1] - 1); j++)\n    {\n      eta = ((double) j) * dnym1;\n      exact_solution(xi, eta, zeta, dtemp);\n      for (m = 0; m < 5; m++)\n      {\n        ue[m][j] = dtemp[m];\n      }\n\n      dtpp = 1.0 / dtemp[0];\n      for (m = 1; m < 5; m++)\n      {\n        buf[m][j] = dtpp * dtemp[m];\n      }\n\n      cuf[j] = buf[2][j] * buf[2][j];\n      buf[0][j] = (cuf[j] + (buf[1][j] * buf[1][j])) + (buf[3][j] * buf[3][j]);\n      q[j] = 0.5 * (((buf[1][j] * ue[1][j]) + (buf[2][j] * ue[2][j])) + (buf[3][j] * ue[3][j]));\n    }\n\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      jm1 = j - 1;\n      jp1 = j + 1;\n      forcing[0][i][j][k] = (forcing[0][i][j][k] - (ty2 * (ue[2][jp1] - ue[2][jm1]))) + (dy1ty1 * ((ue[0][jp1] - (2.0 * ue[0][j])) + ue[0][jm1]));\n      forcing[1][i][j][k] = ((forcing[1][i][j][k] - (ty2 * ((ue[1][jp1] * buf[2][jp1]) - (ue[1][jm1] * buf[2][jm1])))) + (yycon2 * ((buf[1][jp1] - (2.0 * buf[1][j])) + buf[1][jm1]))) + (dy2ty1 * ((ue[1][jp1] - (2.0 * ue[1][j])) + ue[1][jm1]));\n      forcing[2][i][j][k] = ((forcing[2][i][j][k] - (ty2 * (((ue[2][jp1] * buf[2][jp1]) + (c2 * (ue[4][jp1] - q[jp1]))) - ((ue[2][jm1] * buf[2][jm1]) + (c2 * (ue[4][jm1] - q[jm1])))))) + (yycon1 * ((buf[2][jp1] - (2.0 * buf[2][j])) + buf[2][jm1]))) + (dy3ty1 * ((ue[2][jp1] - (2.0 * ue[2][j])) + ue[2][jm1]));\n      forcing[3][i][j][k] = ((forcing[3][i][j][k] - (ty2 * ((ue[3][jp1] * buf[2][jp1]) - (ue[3][jm1] * buf[2][jm1])))) + (yycon2 * ((buf[3][jp1] - (2.0 * buf[3][j])) + buf[3][jm1]))) + (dy4ty1 * ((ue[3][jp1] - (2.0 * ue[3][j])) + ue[3][jm1]));\n      forcing[4][i][j][k] = ((((forcing[4][i][j][k] - (ty2 * ((buf[2][jp1] * ((c1 * ue[4][jp1]) - (c2 * q[jp1]))) - (buf[2][jm1] * ((c1 * ue[4][jm1]) - (c2 * q[jm1])))))) + ((0.5 * yycon3) * ((buf[0][jp1] - (2.0 * buf[0][j])) + buf[0][jm1]))) + (yycon4 * ((cuf[jp1] - (2.0 * cuf[j])) + cuf[jm1]))) + (yycon5 * ((buf[4][jp1] - (2.0 * buf[4][j])) + buf[4][jm1]))) + (dy5ty1 * ((ue[4][jp1] - (2.0 * ue[4][j])) + ue[4][jm1]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      j = 1;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((5.0 * ue[m][j]) - (4.0 * ue[m][j + 1])) + ue[m][j + 2]));\n      j = 2;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((((-4.0) * ue[m][j - 1]) + (6.0 * ue[m][j])) - (4.0 * ue[m][j + 1])) + ue[m][j + 2]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      for (j = 3; j <= (grid_points[1] - 4); j++)\n      {\n        forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * ((((ue[m][j - 2] - (4.0 * ue[m][j - 1])) + (6.0 * ue[m][j])) - (4.0 * ue[m][j + 1])) + ue[m][j + 2]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      j = grid_points[1] - 3;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((ue[m][j - 2] - (4.0 * ue[m][j - 1])) + (6.0 * ue[m][j])) - (4.0 * ue[m][j + 1])));\n      j = grid_points[1] - 2;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * ((ue[m][j - 2] - (4.0 * ue[m][j - 1])) + (5.0 * ue[m][j])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/72"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  eta = ((double) j) * dnym1;\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    xi = ((double) i) * dnxm1;\n    for (k = 0; k <= (grid_points[2] - 1); k++)\n    {\n      zeta = ((double) k) * dnzm1;\n      exact_solution(xi, eta, zeta, dtemp);\n      for (m = 0; m < 5; m++)\n      {\n        ue[m][k] = dtemp[m];\n      }\n\n      dtpp = 1.0 / dtemp[0];\n      for (m = 1; m < 5; m++)\n      {\n        buf[m][k] = dtpp * dtemp[m];\n      }\n\n      cuf[k] = buf[3][k] * buf[3][k];\n      buf[0][k] = (cuf[k] + (buf[1][k] * buf[1][k])) + (buf[2][k] * buf[2][k]);\n      q[k] = 0.5 * (((buf[1][k] * ue[1][k]) + (buf[2][k] * ue[2][k])) + (buf[3][k] * ue[3][k]));\n    }\n\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      km1 = k - 1;\n      kp1 = k + 1;\n      forcing[0][i][j][k] = (forcing[0][i][j][k] - (tz2 * (ue[3][kp1] - ue[3][km1]))) + (dz1tz1 * ((ue[0][kp1] - (2.0 * ue[0][k])) + ue[0][km1]));\n      forcing[1][i][j][k] = ((forcing[1][i][j][k] - (tz2 * ((ue[1][kp1] * buf[3][kp1]) - (ue[1][km1] * buf[3][km1])))) + (zzcon2 * ((buf[1][kp1] - (2.0 * buf[1][k])) + buf[1][km1]))) + (dz2tz1 * ((ue[1][kp1] - (2.0 * ue[1][k])) + ue[1][km1]));\n      forcing[2][i][j][k] = ((forcing[2][i][j][k] - (tz2 * ((ue[2][kp1] * buf[3][kp1]) - (ue[2][km1] * buf[3][km1])))) + (zzcon2 * ((buf[2][kp1] - (2.0 * buf[2][k])) + buf[2][km1]))) + (dz3tz1 * ((ue[2][kp1] - (2.0 * ue[2][k])) + ue[2][km1]));\n      forcing[3][i][j][k] = ((forcing[3][i][j][k] - (tz2 * (((ue[3][kp1] * buf[3][kp1]) + (c2 * (ue[4][kp1] - q[kp1]))) - ((ue[3][km1] * buf[3][km1]) + (c2 * (ue[4][km1] - q[km1])))))) + (zzcon1 * ((buf[3][kp1] - (2.0 * buf[3][k])) + buf[3][km1]))) + (dz4tz1 * ((ue[3][kp1] - (2.0 * ue[3][k])) + ue[3][km1]));\n      forcing[4][i][j][k] = ((((forcing[4][i][j][k] - (tz2 * ((buf[3][kp1] * ((c1 * ue[4][kp1]) - (c2 * q[kp1]))) - (buf[3][km1] * ((c1 * ue[4][km1]) - (c2 * q[km1])))))) + ((0.5 * zzcon3) * ((buf[0][kp1] - (2.0 * buf[0][k])) + buf[0][km1]))) + (zzcon4 * ((cuf[kp1] - (2.0 * cuf[k])) + cuf[km1]))) + (zzcon5 * ((buf[4][kp1] - (2.0 * buf[4][k])) + buf[4][km1]))) + (dz5tz1 * ((ue[4][kp1] - (2.0 * ue[4][k])) + ue[4][km1]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      k = 1;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((5.0 * ue[m][k]) - (4.0 * ue[m][k + 1])) + ue[m][k + 2]));\n      k = 2;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((((-4.0) * ue[m][k - 1]) + (6.0 * ue[m][k])) - (4.0 * ue[m][k + 1])) + ue[m][k + 2]));\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      for (k = 3; k <= (grid_points[2] - 4); k++)\n      {\n        forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * ((((ue[m][k - 2] - (4.0 * ue[m][k - 1])) + (6.0 * ue[m][k])) - (4.0 * ue[m][k + 1])) + ue[m][k + 2]));\n      }\n\n    }\n\n    for (m = 0; m < 5; m++)\n    {\n      k = grid_points[2] - 3;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * (((ue[m][k - 2] - (4.0 * ue[m][k - 1])) + (6.0 * ue[m][k])) - (4.0 * ue[m][k + 1])));\n      k = grid_points[2] - 2;\n      forcing[m][i][j][k] = forcing[m][i][j][k] - (dssp * ((ue[m][k - 2] - (4.0 * ue[m][k - 1])) + (5.0 * ue[m][k])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/73"}
{"code": "for (m = 0; m < 5; m++)\n{\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        forcing[m][i][j][k] = (-1.0) * forcing[m][i][j][k];\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/74"}
{"code": "for (m = 0; m < 5; m++)\n{\n  dtemp[m] = ((ce[0][m] + (xi * (ce[1][m] + (xi * (ce[4][m] + (xi * (ce[7][m] + (xi * ce[10][m])))))))) + (eta * (ce[2][m] + (eta * (ce[5][m] + (eta * (ce[8][m] + (eta * ce[11][m])))))))) + (zeta * (ce[3][m] + (zeta * (ce[6][m] + (zeta * (ce[9][m] + (zeta * ce[12][m])))))));\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/75"}
{"code": "for (i = 0; i <= (IMAX - 1); i++)\n{\n  for (j = 0; j <= (IMAX - 1); j++)\n  {\n    for (k = 0; k <= (IMAX - 1); k++)\n    {\n      u[0][i][j][k] = 1.0;\n      u[1][i][j][k] = 0.0;\n      u[2][i][j][k] = 0.0;\n      u[3][i][j][k] = 0.0;\n      u[4][i][j][k] = 1.0;\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/76"}
{"code": "for (i = 0; i <= (grid_points[0] - 1); i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (j = 0; j <= (grid_points[1] - 1); j++)\n  {\n    eta = ((double) j) * dnym1;\n    for (k = 0; k <= (grid_points[2] - 1); k++)\n    {\n      zeta = ((double) k) * dnzm1;\n      for (ix = 0; ix < 2; ix++)\n      {\n        exact_solution((double) ix, eta, zeta, &Pface[ix][0][0]);\n      }\n\n      for (iy = 0; iy < 2; iy++)\n      {\n        exact_solution(xi, (double) iy, zeta, &Pface[iy][1][0]);\n      }\n\n      for (iz = 0; iz < 2; iz++)\n      {\n        exact_solution(xi, eta, (double) iz, &Pface[iz][2][0]);\n      }\n\n      for (m = 0; m < 5; m++)\n      {\n        Pxi = (xi * Pface[1][0][m]) + ((1.0 - xi) * Pface[0][0][m]);\n        Peta = (eta * Pface[1][1][m]) + ((1.0 - eta) * Pface[0][1][m]);\n        Pzeta = (zeta * Pface[1][2][m]) + ((1.0 - zeta) * Pface[0][2][m]);\n        u[m][i][j][k] = (((((Pxi + Peta) + Pzeta) - (Pxi * Peta)) - (Pxi * Pzeta)) - (Peta * Pzeta)) + ((Pxi * Peta) * Pzeta);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/77"}
{"code": "for (j = 0; j < grid_points[1]; j++)\n{\n  eta = ((double) j) * dnym1;\n  for (k = 0; k < grid_points[2]; k++)\n  {\n    zeta = ((double) k) * dnzm1;\n    exact_solution(xi, eta, zeta, temp);\n    for (m = 0; m < 5; m++)\n    {\n      u[m][i][j][k] = temp[m];\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/78"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (k = 0; k < grid_points[2]; k++)\n  {\n    zeta = ((double) k) * dnzm1;\n    exact_solution(xi, eta, zeta, temp);\n    for (m = 0; m < 5; m++)\n    {\n      u[m][i][j][k] = temp[m];\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/79"}
{"code": "for (i = 0; i < grid_points[0]; i++)\n{\n  xi = ((double) i) * dnxm1;\n  for (j = 0; j < grid_points[1]; j++)\n  {\n    eta = ((double) j) * dnym1;\n    exact_solution(xi, eta, zeta, temp);\n    for (m = 0; m < 5; m++)\n    {\n      u[m][i][j][k] = temp[m];\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/80"}
{"code": "for (n = 0; n < 15; n++)\n{\n  #pragma omp for nowait\n  for (i = 0; i < grid_points[0]; i++)\n  {\n    for (j = 0; j < grid_points[1]; j++)\n    {\n      for (k = 0; k < grid_points[2]; k++)\n      {\n        lhs[n][i][j][k] = 0.0;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/81"}
{"code": "for (n = 0; n < 3; n++)\n{\n  #pragma omp for\n  for (i = 0; i < grid_points[0]; i++)\n  {\n    for (j = 0; j < grid_points[1]; j++)\n    {\n      for (k = 0; k < grid_points[2]; k++)\n      {\n        lhs[(5 * n) + 2][i][j][k] = 1.0;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/82"}
{"code": "for (j = 1; j <= (grid_points[1] - 2); j++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    #pragma omp for\n    for (i = 0; i <= (grid_points[0] - 1); i++)\n    {\n      ru1 = c3c4 * rho_i[i][j][k];\n      cv[i] = us[i][j][k];\n      rhon[i] = max(dx2 + (con43 * ru1), max(dx5 + (c1c5 * ru1), max(dxmax + ru1, dx1)));\n    }\n\n    #pragma omp for\n    for (i = 1; i <= (grid_points[0] - 2); i++)\n    {\n      lhs[0][i][j][k] = 0.0;\n      lhs[1][i][j][k] = ((-dttx2) * cv[i - 1]) - (dttx1 * rhon[i - 1]);\n      lhs[2][i][j][k] = 1.0 + (c2dttx1 * rhon[i]);\n      lhs[3][i][j][k] = (dttx2 * cv[i + 1]) - (dttx1 * rhon[i + 1]);\n      lhs[4][i][j][k] = 0.0;\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/83"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (k = 1; k <= (grid_points[2] - 2); k++)\n  {\n    #pragma omp for\n    for (j = 0; j <= (grid_points[1] - 1); j++)\n    {\n      ru1 = c3c4 * rho_i[i][j][k];\n      cv[j] = vs[i][j][k];\n      rhoq[j] = max(dy3 + (con43 * ru1), max(dy5 + (c1c5 * ru1), max(dymax + ru1, dy1)));\n    }\n\n    #pragma omp for\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      lhs[0][i][j][k] = 0.0;\n      lhs[1][i][j][k] = ((-dtty2) * cv[j - 1]) - (dtty1 * rhoq[j - 1]);\n      lhs[2][i][j][k] = 1.0 + (c2dtty1 * rhoq[j]);\n      lhs[3][i][j][k] = (dtty2 * cv[j + 1]) - (dtty1 * rhoq[j + 1]);\n      lhs[4][i][j][k] = 0.0;\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/84"}
{"code": "for (i = 1; i <= (grid_points[0] - 2); i++)\n{\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    #pragma omp for\n    for (k = 0; k <= (grid_points[2] - 1); k++)\n    {\n      ru1 = c3c4 * rho_i[i][j][k];\n      cv[k] = ws[i][j][k];\n      rhos[k] = max(dz4 + (con43 * ru1), max(dz5 + (c1c5 * ru1), max(dzmax + ru1, dz1)));\n    }\n\n    #pragma omp for\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      lhs[0][i][j][k] = 0.0;\n      lhs[1][i][j][k] = ((-dttz2) * cv[k - 1]) - (dttz1 * rhos[k - 1]);\n      lhs[2][i][j][k] = 1.0 + (c2dttz1 * rhos[k]);\n      lhs[3][i][j][k] = (dttz2 * cv[k + 1]) - (dttz1 * rhos[k + 1]);\n      lhs[4][i][j][k] = 0.0;\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/85"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 0; i <= (grid_points[0] - 1); i++)\n  {\n    for (j = 0; j <= (grid_points[1] - 1); j++)\n    {\n      for (k = 0; k <= (grid_points[2] - 1); k++)\n      {\n        rhs[m][i][j][k] = forcing[m][i][j][k];\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/86"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((5.0 * u[m][i][j][k]) - (4.0 * u[m][i + 1][j][k])) + u[m][i + 2][j][k]));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/87"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((((-4.0) * u[m][i - 1][j][k]) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i + 1][j][k])) + u[m][i + 2][j][k]));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/88"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 3 * 1; i <= ((grid_points[0] - (3 * 1)) - 1); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((((u[m][i - 2][j][k] - (4.0 * u[m][i - 1][j][k])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i + 1][j][k])) + u[m][i + 2][j][k]));\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/89"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((u[m][i - 2][j][k] - (4.0 * u[m][i - 1][j][k])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i + 1][j][k])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/90"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((u[m][i - 2][j][k] - (4.0 * u[m][i - 1][j][k])) + (5.0 * u[m][i][j][k])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/91"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((5.0 * u[m][i][j][k]) - (4.0 * u[m][i][j + 1][k])) + u[m][i][j + 2][k]));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/92"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((((-4.0) * u[m][i][j - 1][k]) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j + 1][k])) + u[m][i][j + 2][k]));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/93"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 3 * 1; j <= ((grid_points[1] - (3 * 1)) - 1); j++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((((u[m][i][j - 2][k] - (4.0 * u[m][i][j - 1][k])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j + 1][k])) + u[m][i][j + 2][k]));\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/94"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((u[m][i][j - 2][k] - (4.0 * u[m][i][j - 1][k])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j + 1][k])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/95"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((u[m][i][j - 2][k] - (4.0 * u[m][i][j - 1][k])) + (5.0 * u[m][i][j][k])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/96"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((5.0 * u[m][i][j][k]) - (4.0 * u[m][i][j][k + 1])) + u[m][i][j][k + 2]));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/97"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((((-4.0) * u[m][i][j][k - 1]) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j][k + 1])) + u[m][i][j][k + 2]));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/98"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 3 * 1; k <= ((grid_points[2] - (3 * 1)) - 1); k++)\n      {\n        rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((((u[m][i][j][k - 2] - (4.0 * u[m][i][j][k - 1])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j][k + 1])) + u[m][i][j][k + 2]));\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/99"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * (((u[m][i][j][k - 2] - (4.0 * u[m][i][j][k - 1])) + (6.0 * u[m][i][j][k])) - (4.0 * u[m][i][j][k + 1])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/100"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (dssp * ((u[m][i][j][k - 2] - (4.0 * u[m][i][j][k - 1])) + (5.0 * u[m][i][j][k])));\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/101"}
{"code": "for (m = 0; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        rhs[m][i][j][k] = rhs[m][i][j][k] * dt;\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/102"}
{"code": "for (i = 0; i <= (grid_points[0] - 3); i++)\n{\n  i1 = i + 1;\n  i2 = i + 2;\n  #pragma omp for\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      fac1 = 1. / lhs[n + 2][i][j][k];\n      lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n      lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n      }\n\n      lhs[n + 2][i1][j][k] = lhs[n + 2][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 3][i][j][k]);\n      lhs[n + 3][i1][j][k] = lhs[n + 3][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 4][i][j][k]);\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i1][j][k] = rhs[m][i1][j][k] - (lhs[n + 1][i1][j][k] * rhs[m][i][j][k]);\n      }\n\n      lhs[n + 1][i2][j][k] = lhs[n + 1][i2][j][k] - (lhs[n + 0][i2][j][k] * lhs[n + 3][i][j][k]);\n      lhs[n + 2][i2][j][k] = lhs[n + 2][i2][j][k] - (lhs[n + 0][i2][j][k] * lhs[n + 4][i][j][k]);\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i2][j][k] = rhs[m][i2][j][k] - (lhs[n + 0][i2][j][k] * rhs[m][i][j][k]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/103"}
{"code": "for (m = 3; m < 5; m++)\n{\n  n = ((m - 3) + 1) * 5;\n  for (i = 0; i <= (grid_points[0] - 3); i++)\n  {\n    i1 = i + 1;\n    i2 = i + 2;\n    #pragma omp for\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        fac1 = 1. / lhs[n + 2][i][j][k];\n        lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n        lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n        rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n        lhs[n + 2][i1][j][k] = lhs[n + 2][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 3][i][j][k]);\n        lhs[n + 3][i1][j][k] = lhs[n + 3][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 4][i][j][k]);\n        rhs[m][i1][j][k] = rhs[m][i1][j][k] - (lhs[n + 1][i1][j][k] * rhs[m][i][j][k]);\n        lhs[n + 1][i2][j][k] = lhs[n + 1][i2][j][k] - (lhs[n + 0][i2][j][k] * lhs[n + 3][i][j][k]);\n        lhs[n + 2][i2][j][k] = lhs[n + 2][i2][j][k] - (lhs[n + 0][i2][j][k] * lhs[n + 4][i][j][k]);\n        rhs[m][i2][j][k] = rhs[m][i2][j][k] - (lhs[n + 0][i2][j][k] * rhs[m][i][j][k]);\n      }\n\n    }\n\n  }\n\n  i = grid_points[0] - 2;\n  i1 = grid_points[0] - 1;\n  #pragma omp for\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      fac1 = 1. / lhs[n + 2][i][j][k];\n      lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n      lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n      lhs[n + 2][i1][j][k] = lhs[n + 2][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 3][i][j][k]);\n      lhs[n + 3][i1][j][k] = lhs[n + 3][i1][j][k] - (lhs[n + 1][i1][j][k] * lhs[n + 4][i][j][k]);\n      rhs[m][i1][j][k] = rhs[m][i1][j][k] - (lhs[n + 1][i1][j][k] * rhs[m][i][j][k]);\n      fac2 = 1. / lhs[n + 2][i1][j][k];\n      rhs[m][i1][j][k] = fac2 * rhs[m][i1][j][k];\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/104"}
{"code": "for (m = 0; m < 3; m++)\n{\n  #pragma omp for\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i1][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/105"}
{"code": "for (m = 3; m < 5; m++)\n{\n  #pragma omp for\n  for (j = 1; j <= (grid_points[1] - 2); j++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      n = ((m - 3) + 1) * 5;\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i1][j][k]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/106"}
{"code": "for (i = grid_points[0] - 3; i >= 0; i--)\n{\n  i1 = i + 1;\n  i2 = i + 2;\n  #pragma omp for\n  for (m = 0; m < 3; m++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i1][j][k])) - (lhs[n + 4][i][j][k] * rhs[m][i2][j][k]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/107"}
{"code": "for (m = 3; m < 5; m++)\n{\n  n = ((m - 3) + 1) * 5;\n  for (i = grid_points[0] - 3; i >= 0; i--)\n  {\n    i1 = i + 1;\n    i2 = i + 2;\n    #pragma omp for\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i1][j][k])) - (lhs[n + 4][i][j][k] * rhs[m][i2][j][k]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/108"}
{"code": "for (j = 0; j <= (grid_points[1] - 3); j++)\n{\n  j1 = j + 1;\n  j2 = j + 2;\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      fac1 = 1. / lhs[n + 2][i][j][k];\n      lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n      lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n      }\n\n      lhs[n + 2][i][j1][k] = lhs[n + 2][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 3][i][j][k]);\n      lhs[n + 3][i][j1][k] = lhs[n + 3][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 4][i][j][k]);\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i][j1][k] = rhs[m][i][j1][k] - (lhs[n + 1][i][j1][k] * rhs[m][i][j][k]);\n      }\n\n      lhs[n + 1][i][j2][k] = lhs[n + 1][i][j2][k] - (lhs[n + 0][i][j2][k] * lhs[n + 3][i][j][k]);\n      lhs[n + 2][i][j2][k] = lhs[n + 2][i][j2][k] - (lhs[n + 0][i][j2][k] * lhs[n + 4][i][j][k]);\n      for (m = 0; m < 3; m++)\n      {\n        rhs[m][i][j2][k] = rhs[m][i][j2][k] - (lhs[n + 0][i][j2][k] * rhs[m][i][j][k]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/109"}
{"code": "for (m = 3; m < 5; m++)\n{\n  n = ((m - 3) + 1) * 5;\n  for (j = 0; j <= (grid_points[1] - 3); j++)\n  {\n    j1 = j + 1;\n    j2 = j + 2;\n    #pragma omp for\n    for (i = 1; i <= (grid_points[0] - 2); i++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        fac1 = 1. / lhs[n + 2][i][j][k];\n        lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n        lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n        rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n        lhs[n + 2][i][j1][k] = lhs[n + 2][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 3][i][j][k]);\n        lhs[n + 3][i][j1][k] = lhs[n + 3][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 4][i][j][k]);\n        rhs[m][i][j1][k] = rhs[m][i][j1][k] - (lhs[n + 1][i][j1][k] * rhs[m][i][j][k]);\n        lhs[n + 1][i][j2][k] = lhs[n + 1][i][j2][k] - (lhs[n + 0][i][j2][k] * lhs[n + 3][i][j][k]);\n        lhs[n + 2][i][j2][k] = lhs[n + 2][i][j2][k] - (lhs[n + 0][i][j2][k] * lhs[n + 4][i][j][k]);\n        rhs[m][i][j2][k] = rhs[m][i][j2][k] - (lhs[n + 0][i][j2][k] * rhs[m][i][j][k]);\n      }\n\n    }\n\n  }\n\n  j = grid_points[1] - 2;\n  j1 = grid_points[1] - 1;\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      fac1 = 1. / lhs[n + 2][i][j][k];\n      lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n      lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n      lhs[n + 2][i][j1][k] = lhs[n + 2][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 3][i][j][k]);\n      lhs[n + 3][i][j1][k] = lhs[n + 3][i][j1][k] - (lhs[n + 1][i][j1][k] * lhs[n + 4][i][j][k]);\n      rhs[m][i][j1][k] = rhs[m][i][j1][k] - (lhs[n + 1][i][j1][k] * rhs[m][i][j][k]);\n      fac2 = 1. / lhs[n + 2][i][j1][k];\n      rhs[m][i][j1][k] = fac2 * rhs[m][i][j1][k];\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/110"}
{"code": "for (m = 0; m < 3; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j1][k]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/111"}
{"code": "for (m = 3; m < 5; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (k = 1; k <= (grid_points[2] - 2); k++)\n    {\n      n = ((m - 3) + 1) * 5;\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j1][k]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/112"}
{"code": "for (m = 0; m < 3; m++)\n{\n  for (j = grid_points[1] - 3; j >= 0; j--)\n  {\n    j1 = j + 1;\n    j2 = j + 2;\n    #pragma omp for\n    for (i = 1; i <= (grid_points[0] - 2); i++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j1][k])) - (lhs[n + 4][i][j][k] * rhs[m][i][j2][k]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/113"}
{"code": "for (m = 3; m < 5; m++)\n{\n  n = ((m - 3) + 1) * 5;\n  for (j = grid_points[1] - 3; j >= 0; j--)\n  {\n    j1 = j + 1;\n    j2 = j1 + 1;\n    #pragma omp for\n    for (i = 1; i <= (grid_points[0] - 2); i++)\n    {\n      for (k = 1; k <= (grid_points[2] - 2); k++)\n      {\n        rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j1][k])) - (lhs[n + 4][i][j][k] * rhs[m][i][j2][k]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/114"}
{"code": "for (m = 3; m < 5; m++)\n{\n  n = ((m - 3) + 1) * 5;\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = 0; k <= (grid_points[2] - 3); k++)\n      {\n        k1 = k + 1;\n        k2 = k + 2;\n        fac1 = 1. / lhs[n + 2][i][j][k];\n        lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n        lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n        rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n        lhs[n + 2][i][j][k1] = lhs[n + 2][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 3][i][j][k]);\n        lhs[n + 3][i][j][k1] = lhs[n + 3][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 4][i][j][k]);\n        rhs[m][i][j][k1] = rhs[m][i][j][k1] - (lhs[n + 1][i][j][k1] * rhs[m][i][j][k]);\n        lhs[n + 1][i][j][k2] = lhs[n + 1][i][j][k2] - (lhs[n + 0][i][j][k2] * lhs[n + 3][i][j][k]);\n        lhs[n + 2][i][j][k2] = lhs[n + 2][i][j][k2] - (lhs[n + 0][i][j][k2] * lhs[n + 4][i][j][k]);\n        rhs[m][i][j][k2] = rhs[m][i][j][k2] - (lhs[n + 0][i][j][k2] * rhs[m][i][j][k]);\n      }\n\n    }\n\n  }\n\n  k = grid_points[2] - 2;\n  k1 = grid_points[2] - 1;\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      fac1 = 1. / lhs[n + 2][i][j][k];\n      lhs[n + 3][i][j][k] = fac1 * lhs[n + 3][i][j][k];\n      lhs[n + 4][i][j][k] = fac1 * lhs[n + 4][i][j][k];\n      rhs[m][i][j][k] = fac1 * rhs[m][i][j][k];\n      lhs[n + 2][i][j][k1] = lhs[n + 2][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 3][i][j][k]);\n      lhs[n + 3][i][j][k1] = lhs[n + 3][i][j][k1] - (lhs[n + 1][i][j][k1] * lhs[n + 4][i][j][k]);\n      rhs[m][i][j][k1] = rhs[m][i][j][k1] - (lhs[n + 1][i][j][k1] * rhs[m][i][j][k]);\n      fac2 = 1. / lhs[n + 2][i][j][k1];\n      rhs[m][i][j][k1] = fac2 * rhs[m][i][j][k1];\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/115"}
{"code": "for (m = 0; m < 3; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j][k1]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/116"}
{"code": "for (m = 3; m < 5; m++)\n{\n  n = ((m - 3) + 1) * 5;\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      rhs[m][i][j][k] = rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j][k1]);\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/117"}
{"code": "for (m = 0; m < 3; m++)\n{\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = grid_points[2] - 3; k >= 0; k--)\n      {\n        k1 = k + 1;\n        k2 = k + 2;\n        rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j][k1])) - (lhs[n + 4][i][j][k] * rhs[m][i][j][k2]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/118"}
{"code": "for (m = 3; m < 5; m++)\n{\n  n = ((m - 3) + 1) * 5;\n  #pragma omp for\n  for (i = 1; i <= (grid_points[0] - 2); i++)\n  {\n    for (j = 1; j <= (grid_points[1] - 2); j++)\n    {\n      for (k = grid_points[2] - 3; k >= 0; k--)\n      {\n        k1 = k + 1;\n        k2 = k + 2;\n        rhs[m][i][j][k] = (rhs[m][i][j][k] - (lhs[n + 3][i][j][k] * rhs[m][i][j][k1])) - (lhs[n + 4][i][j][k] * rhs[m][i][j][k2]);\n      }\n\n    }\n\n  }\n\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/SP/sp/119"}
{"code": "for (i = 1; i <= n; i++)\n{\n  t1 = ((((((((((((((((((((((0.5 * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * x;\n  x1 = (int) t1;\n  x2 = x - (((((((((((((((((((((((2.0 * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * x1);\n  t1 = (a1 * x2) + (a2 * x1);\n  t2 = (int) (((((((((((((((((((((((0.5 * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * t1);\n  z = t1 - (((((((((((((((((((((((2.0 * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * t2);\n  t3 = (((((((((((((((((((((((2.0 * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * z) + (a2 * x2);\n  t4 = (int) ((((((((((((((((((((((((0.5 * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * ((((((((((((((((((((((0.5 * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5)) * t3);\n  x = t3 - ((((((((((((((((((((((((2.0 * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * ((((((((((((((((((((((2.0 * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0) * 2.0)) * t4);\n  y[i] = (((((((((((((((((((((((0.5 * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * ((((((((((((((((((((((0.5 * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5) * 0.5)) * x;\n}\n", "pragma": "", "exist": 0, "private": 0, "reduction": 0, "path": "/home/talkad/LIGHTBITS_SHARE/nas_loops/common/c_randdp/0"}
