code:

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define NUM 1000000000

int a[NUM], b[NUM];

int main() {

	long n = NUM;

	for (long i = 0; i < n; i++) {
		a[i] = rand()%10;
		b[i] = rand()%10;
	}

	double t1 = omp_get_wtime();

	omp_set_num_threads(6);

	#pragma omp parallel for schedule(static)
		for (int i = 0; i < n; i++) {
			a[i] = a[i] + b[i];
		}

	double t2 = omp_get_wtime();

	printf("%f\n", t2-t1);

	return 0;
}

=================================================================================

result:

1. pragma: None

code:

For: 
  DeclList: 
    Decl: i, [], [], []
      TypeDecl: i, []
        IdentifierType: ['long']
      Constant: int, 0
  BinaryOp: <
    ID: i
    ID: n
  UnaryOp: p++
    ID: i
  Compound: 
    Assignment: =
      ArrayRef: 
        ID: a
        ID: i
      BinaryOp: %
        FuncCall: 
          ID: rand
        Constant: int, 10
    Assignment: =
      ArrayRef: 
        ID: b
        ID: i
      BinaryOp: %
        FuncCall: 
          ID: rand
        Constant: int, 10

2. pragma: Pragma(string='omp parallel for schedule(static)')
code:

For: 
  DeclList: 
    Decl: i, [], [], []
      TypeDecl: i, []
        IdentifierType: ['int']
      Constant: int, 0
  BinaryOp: <
    ID: i
    ID: n
  UnaryOp: p++
    ID: i
  Compound: 
    Assignment: =
      ArrayRef: 
        ID: a
        ID: i
      BinaryOp: +
        ArrayRef: 
          ID: a
          ID: i
        ArrayRef: 
          ID: b
          ID: i

